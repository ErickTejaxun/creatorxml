/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CreatorXml201213050;

import Analisis.Fs.AST.Entorno;
import Analisis.Fs.AST.Nodo;
import Analisis.Fs.parserfs;
import Analisis.Fs.scannerfs;
import Analisis.XML.AST.NodoXML;
import Recursos.singlenton;
import Analisis.XML.parserxml;
import Analisis.XML.scannerxml;
import Recursos.error;
import Recursos.lexema;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.fife.ui.rtextarea.*;
import org.fife.ui.rsyntaxtextarea.*;



/**
 *
 * @author erick
 */
public class InterfazIDE extends javax.swing.JFrame {

    public int contadorNuevos=1;
    public Hashtable<String,String> archivos  = new Hashtable<>();
    public Hashtable<String,String> direcciones  = new Hashtable<>();        
    public String raizActual = getPathActual();    
    public ArrayList<error> listaErrores = new ArrayList();    
    public ArrayList<error> todosErrores= new ArrayList();   
    public String archivoActual = "";
    public String salida = "";
    public ArrayList<ArrayList<NodoXML>> listaxml = new ArrayList<ArrayList<NodoXML>>();
    
    public String cadenaImportaciones = "";
    public int contadorPrincipal = 0;
    public String cadenaCuerpo = "";
        
    
    /**
     Contadores de elementos     
     */
    
    public int contadorVentanas = 0;
    public String ventanaActual = "";
    public String colorActual = "";
    public int contadorContenedor = 0; 
    public String contenedorActual = "";
    /**
     * Creates new form interfaz
     */
    public InterfazIDE() 
    {
        initComponents(); 
        arbolDirectorio.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
//        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
//        root.removeAllChildren();
//        model.reload(root); 

    }
    
    public void setContenedorActual(String c)
    {
        contenedorActual = c;
    }
    public String gerConenedorActual()
    {
        return contenedorActual;
    }
    public void setVentanaActual(String c)
    {
        ventanaActual = c;
    }
    public void setColorActual(String c)
    {
        colorActual = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEditor = new javax.swing.JPanel();
        panelDirectorio = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolDirectorio = new javax.swing.JTree();
        panelEdicion = new javax.swing.JPanel();
        textoBusqueda = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        contenedorPaneles = new javax.swing.JTabbedPane();
        botonCompilar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaConsola = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabladeSimbolos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        abrirCarpeta = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        menuEjecucion = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        panelEditor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        panelDirectorio.setBackground(new java.awt.Color(153, 255, 51));
        panelDirectorio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        arbolDirectorio.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolDirectorioValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(arbolDirectorio);

        javax.swing.GroupLayout panelDirectorioLayout = new javax.swing.GroupLayout(panelDirectorio);
        panelDirectorio.setLayout(panelDirectorioLayout);
        panelDirectorioLayout.setHorizontalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDirectorioLayout.setVerticalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        panelEdicion.setBackground(new java.awt.Color(204, 204, 255));

        textoBusqueda.setText("Busqueda...");

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonCompilar.setText("Compilar");
        botonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCompilarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEdicionLayout = new javax.swing.GroupLayout(panelEdicion);
        panelEdicion.setLayout(panelEdicionLayout);
        panelEdicionLayout.setHorizontalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                        .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                        .addComponent(botonCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))))
            .addComponent(contenedorPaneles)
        );
        panelEdicionLayout.setVerticalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(botonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3))
                    .addComponent(textoBusqueda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(contenedorPaneles, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 102));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1197, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("DASM", jPanel2);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Descripción", "Linea", "Columna", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaErrores);

        jPanel3.add(jScrollPane2);

        jTabbedPane1.addTab("Errores", jPanel3);

        textAreaConsola.setColumns(20);
        textAreaConsola.setRows(5);
        jScrollPane4.setViewportView(textAreaConsola);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consola", jPanel4);

        tabladeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabladeSimbolos);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla de Símbolos", jPanel5);

        jPanel1.add(jTabbedPane1);

        javax.swing.GroupLayout panelEditorLayout = new javax.swing.GroupLayout(panelEditor);
        panelEditor.setLayout(panelEditorLayout);
        panelEditorLayout.setHorizontalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addComponent(panelDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1203, Short.MAX_VALUE)
        );
        panelEditorLayout.setVerticalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelDirectorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panelEditor);

        menuArchivo.setText("Archivo");

        jMenuItem9.setText("Abrir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem9);

        abrirCarpeta.setText("Abrir Carpeta");
        abrirCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCarpetaActionPerformed(evt);
            }
        });
        menuArchivo.add(abrirCarpeta);

        jMenuItem1.setText("Nuevo Archivo (nueva Tab)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem1);

        jMenuItem2.setText("Nueva Carpeta");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem2);

        jMenuItem3.setText("Guardar (tab Actual)");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem3);

        jMenuItem4.setText("Cerrar (tab Actual)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem4);

        jMenuItem5.setText("Salir");
        menuArchivo.add(jMenuItem5);

        jMenuBar1.add(menuArchivo);

        menuEjecucion.setText("Depurar");

        jMenuItem6.setText("Iniciar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem6);

        jMenuItem7.setText("Siguiente Paso");
        menuEjecucion.add(jMenuItem7);

        jMenuItem8.setText("Terminar Todo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem8);

        jMenuBar1.add(menuEjecucion);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        nuevaCarpeta();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void arbolDirectorioValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolDirectorioValueChanged
        try 
        {
            abrirDesdeArbol();
        } 
        catch (Exception e) 
        {
        }
    }//GEN-LAST:event_arbolDirectorioValueChanged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            save();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            cerrarActual();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try 
        {
            abrirArchivo();
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void botonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCompilarActionPerformed
        try { 
            compilar();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Object> lista = new ArrayList();
    }//GEN-LAST:event_botonCompilarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        iniciarDebuger();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

       
        
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void abrirCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCarpetaActionPerformed
        try {
            abrirCarpeta();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirCarpetaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazIDE().setVisible(true);
            }
        });
    }

    public void abrirArchivo() throws FileNotFoundException
    {

        String path = "";
        String nombreArchivo ="";
        JFileChooser file=new JFileChooser(PathActual());        
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(path,"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreArchivo = nombre;  
            direcciones.put(nombreArchivo,path);  //  Guardamos <nombre, dirccion>
        }  
        if(eleccion==null){return;}
        
        
        File archivo= new File(path); 
        Scanner sc = new Scanner(archivo); 
        String data = "";
        while (sc.hasNextLine())
        {
            if(data.equals(""))
            {
                data = sc.nextLine();
            }
            else
            {
                data = data + "\n" + sc.nextLine();
            }
        }        
        nuevoArchivoConData(nombreArchivo, data);                
    }
    
//    public void addConsola(Nodo cadena)
//    {
//        salida = salida + "\n" + cadena.getValue();       
//        actualizarSalida();
//    }
    
    public void actualizarSalida()
    {
        textAreaConsola.setText(salida);
    }
    
    public void escribirConsola(String cad)
    {
        textAreaConsola.setText
        (
                textAreaConsola.getText() + "\n" + cad
        );
    }
    
    
    public void abrirCarpeta() throws FileNotFoundException
    {

        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");      
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
        }  
        if(eleccion==null){return;}
        
        File aDirectory = new File(path);        
        String[] filesInDir = aDirectory.list();
        for ( int i=0; i<filesInDir.length; i++ )
        {            
            if(filesInDir[i].contains(".d++")||filesInDir[i].contains(".djs")||filesInDir[i].contains(".dasm"))
            {
                direcciones.put(filesInDir[i],path+"\\"+filesInDir[i]);
            }
        }        
        
        System.out.println(direcciones.toString());
        //nuevoArchivoConData(nombreCarpeta, data);                
    }    
    
    public void abrirDesdeArbol()
    {
            TreePath[] paths = arbolDirectorio.getSelectionPaths();
            String nombre = "";
            int ubicacion = 666;
            for (TreePath path : paths) 
            {                
                nombre = path.getLastPathComponent().toString();
            }
            
            for(int posicion = 0; posicion<contenedorPaneles.getTabCount();posicion++)
            {
                if(nombre.equals(contenedorPaneles.getTitleAt(posicion)))
                {
                    ubicacion = posicion;
                    break;
                }
            }
            if(ubicacion!=666)
            {                
                contenedorPaneles.setSelectedIndex(ubicacion);                
            }
            String tipo = archivos.get(nombre);
            if(tipo.equals("carpeta"))
            {
                raizActual= nombre;
            }
            else
            {
                raizActual = getPathActual();
            }        
    }
    
 
    //Este metodo creará una nuevo panel con su editor en blanco.
    public void nuevoArchivo()
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            RSyntaxTextArea editor = new RSyntaxTextArea(30,60);
            editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
            editor.setCodeFoldingEnabled(true);
            RTextScrollPane sp = new RTextScrollPane(editor);            
            sp.setIconRowHeaderEnabled(true);
                                                
            Gutter gutter = sp.getGutter();                                
            gutter.setBookmarkIcon(new ImageIcon(getClass().getResource("/breakpoint.png")));            
            gutter.setBookmarkingEnabled(true);
            panel.add(sp);    
            contenedorPaneles.add("Nuevo-"+contadorNuevos, panel);                        
            agregarArbolGrafico("Nuevo-"+contadorNuevos);
            contadorNuevos++;            

    }
    
    
    public void nuevoArchivoConData(String nombre, String data)
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            RSyntaxTextArea editor = new RSyntaxTextArea(30,60);            
            editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
            //editor.setCodeFoldingEnabled(true);
            RTextScrollPane sp = new RTextScrollPane(editor);            
            sp.setIconRowHeaderEnabled(true);
                                                
            Gutter gutter = sp.getGutter();                                
            gutter.setBookmarkIcon(new ImageIcon(getClass().getResource("/breakpoint.png")));            
            gutter.setBookmarkingEnabled(true);        
            editor.setText(data);                 
            
            panel.add(sp);    
            contenedorPaneles.add(nombre, panel);                        
            agregarArbolGrafico(nombre);
            //contadorNuevos++;            

    }    
    
    public void agregarArbolGrafico(String nombre)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
        if(raizActual.equals(getPathActual()))
        {
            root.add(new DefaultMutableTreeNode(nombre));    
            //direcciones.put(nombre,getPathActual());
        }
        else
        {                            
           for(int contador = 0 ; contador<root.getChildCount(); contador ++)
           {
               if(root.getChildAt(contador).toString().equals(raizActual))
               {
                   DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) root.getChildAt(contador); 
                   nodo.add(new DefaultMutableTreeNode(nombre));
                   //direcciones.put(nombre,direcciones.get(raizActual));
               }
           }
        }
        model.reload(root);            
        archivos.put(nombre, "archivo");        

    }
    
    public void nuevaCarpeta()
    {
        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(eleccion.getPath(),"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreCarpeta = nombre;  
            direcciones.put(nombreCarpeta,path);
        }        
        
        if(!nombreCarpeta.equals(getPathActual()))
        {        
            //String nombreCarpeta  = JOptionPane.showInputDialog("Nombre de la nueva carpeta");
            DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
            root.add(new DefaultMutableTreeNode(nombreCarpeta));
            model.reload(root);             
            archivos.put(nombreCarpeta, "carpeta");
        }
    }
    
    
    public String getPathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path+"\\Proyectos";
    }      
    
    
    public void save() throws FileNotFoundException
    {        
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);  
        if(directorio!=null)
        {
            guardarArchivo();   
        }        
        else
        {
            guardarArchivoNuevo();
        }        
    }
    
    public void guardarArchivoNuevo() throws FileNotFoundException
    {
        String tipo = "";       
        String[] options = {".gmxl", ".gdato", ".fs","cancelar"};
        int x = -1;
        
        while(x==-1)
        {
            x=JOptionPane.showOptionDialog(null, "Seleccion el tipo de archivo a guardar.",
                "Haga click en el botón",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);            
        }
        if(x==3){return;}
        tipo = options[x];

        
        if(tipo.equals("1")){tipo=".gmxl";}
        if(tipo.equals("2")){tipo=".gdato";}
        if(tipo.equals("3")){tipo=".fs";}
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        nombre += tipo;
        String directorio=direcciones.get(seleccionado); 
        if(directorio==null){directorio= getPathActual()+"\\"+nombre;}
        
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(texto);
            writer.print(texto);
        }
        
        direcciones.put(nombre,directorio);
        ActualizarNombres(seleccionado,nombre);
        
    }
    
    public void guardarArchivoNuevoSinGrafo(boolean compilar) 
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);       
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        String tipo = "";       
        String[] options = {".gmxl", ".gdato", ".fs","cancelar"};
        int x = -1;
        
        while(x==-1)
        {
            x=JOptionPane.showOptionDialog(null, "Seleccion el tipo de archivo a guardar.",
                "Haga click en el botón",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);            
        }
        if(x==3){return;}
        tipo = options[x];        
        if(!compilar){quitarNodo(seleccionado);}
        File archivo=new File(directorio+"\\"+nombre+"."+tipo);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(texto);
            writer.print(texto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");        
        
        //ActualizarNombres(seleccionado,nombre+".d++");
        
    }    
    
    public void guardarArchivo() throws FileNotFoundException
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio/*+"\\"+nombre+".d++"*/);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(texto);
            writer.print(texto);
        }                
        ActualizarNombres(seleccionado,nombre);
        
    }  
    
    public void guardarArchivoSinGrafo(boolean compilar) 
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(texto);
            writer.print(texto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(!compilar){quitarNodo(seleccionado);}
        
        //ActualizarNombres(seleccionado,nombre+".d++");
        
    }    
    
    
    
    
    
    public void quitarNodo(String actual)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
        qNodo(root, actual);
        model.reload(root);  
    }
    
    public void qNodo(DefaultMutableTreeNode root, String actual)
    {                                          
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);               
               break;
           }
           else
           {
               qNodo((DefaultMutableTreeNode) root.getChildAt(contador), actual);
           }
       }                              
    }
    
    
    public void ActualizarNombres(String actual, String nuevo)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {
               root.remove(contador);
               root.insert(new DefaultMutableTreeNode(nuevo), contador);               
               break;
           }
       }        
        model.reload(root);            
        archivos.put(nuevo, archivos.get(actual)); 
        String direccion  = direcciones.get(actual);
        if(direccion==null){direccion = getPathActual()+"\\"+nuevo;}
        direcciones.put(nuevo, direccion);        
        contenedorPaneles.setTitleAt(contenedorPaneles.getSelectedIndex(), nuevo);        
    }
    
    
    public void cerrarActual() throws FileNotFoundException
    {        
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String[] partes = actual.split("\\.");
        if(partes.length==2)
        {
            guardarArchivoSinGrafo(false);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(false);
        }
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);
               break;
           }
       }        
        model.reload(root);            
        archivos.remove(actual);
        direcciones.remove(actual);
        contenedorPaneles.remove(contenedorPaneles.getSelectedIndex());
    }


    public void mostrarErrores(ArrayList<error> errores)
    {
        DefaultTableModel filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");        
        filasErrores.addColumn("Id");
        filasErrores.addColumn("Descripción");
        filasErrores.addColumn("Linea"); 
        filasErrores.addColumn("Columna");                 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);        
                
        errores.forEach((error) -> 
        {
            filasErrores.addRow(new Object[]
            {raizActual,
                error.getValor(),
                error.getDescripcion(),
                error.getLinea(),
                error.getColumna(),
                error.getTipo()}                    
            );
        });                       
    }
    
    
    public void compilar() throws FileNotFoundException, Exception 
    {
        todosErrores.clear(); 
        singlenton.listaErrores.clear();
        listaxml.clear();
        textAreaConsola.setText("");
        cadenaImportaciones = cadenaCuerpo = "";
        /*Guardar-------*/
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());                
        if(actual.contains("."))
        {
            guardarArchivoSinGrafo(true);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(true);
        }   
        /*Fin Guardar*------------*/
        try 
        {
            String nombreArchivo = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
            String pathArchivo = direcciones.get(nombreArchivo);
            archivoActual = nombreArchivo;            
            if(pathArchivo.toLowerCase().contains(".fs"))
            {
                parserfs parserfs_;
                scannerfs scannerfs_ = new scannerfs(new java.io.FileReader(pathArchivo));
                parserfs_ = new parserfs(scannerfs_);
                parserfs_.parse();  
                ejecutarFs(parserfs_.metodo);// --Enviamos a ejecutarFs nuestra mierda                 
            }
            else
            if(pathArchivo.toLowerCase().contains(".gxml"))
            {
                parserxml parserxml_;
                scannerxml scannerxml_ = new scannerxml(new java.io.FileReader(pathArchivo));
                parserxml_ = new parserxml(scannerxml_);
                parserxml_.parse();               
                if(!parserxml_.lista.isEmpty())
                {
                  listaxml.add(parserxml_.lista);
                }     
                EjecutarXML();                
            }                       
        } 
        catch (Exception e) 
        {
            System.out.println(e.getMessage());
        }
                       
        /*Mandamos a ejecutarFs esta onda.*/                
        mostrarErrores(singlenton.listaErrores);            
    }
    
    public void EjecutarXML()
    {
        /*Primero el primer ast*/
        for(ArrayList<NodoXML> l : listaxml)
        {
            for(NodoXML n : l)
            {
                n.ejecutar(this);
            }
        }
        
        /*Ahora las importaciones*/
//        for(ArrayList<NodoXML> l : singlenton.listaAST)
        for(int cont = 0; cont<singlenton.listaAST.size(); cont++)
        {
            ArrayList<NodoXML> l = singlenton.listaAST.get(cont);
            for(NodoXML n : l)
            {
                n.ejecutar(this);
            }
        }       
        mostrarTraduccion();
    }
    
    
    public void imprimirTokens(ArrayList<lexema> lexemas)
    {
        System.out.println("Id\tDescripcion\tLinea\tColumna");
        lexemas.forEach((_item) -> 
        {            
            System.out.println("" + _item.getValor()
                    +"\t"+_item.getTipo()
                    +"\t" + _item.getDescripcion()
                    +"\t" + _item.getLinea()
                    +"\t"+_item.getColumna()
            );            
        });        
    }
    
    public void buscar()
    {
        
        JPanel actual = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
        RTextScrollPane scrollActual= (RTextScrollPane) actual.getComponent(0);                
        SearchContext contexto = new SearchContext();
        String texto = textoBusqueda.getText();
        if (!texto.equals(""))
        {
            contexto.setSearchFor(texto);
            //contexto.setMatchCase(true);
            contexto.setRegularExpression(true);
            //contexto.setSearchForward(true);
            //contexto.setWholeWord(false);
            System.out.println(scrollActual.getTextArea().getText());
            boolean encontrado = SearchEngine.find(scrollActual.getTextArea(), contexto).wasFound();
            if(!encontrado)
            {
                JOptionPane.showMessageDialog(this, "Sin coincidencias encontradas.");
            }
        }                      
    }
    
    
    MouseListener editorListener= new MouseListener() 
    {

        @Override
        public void mouseReleased(MouseEvent e)
        {
            System.out.println("mouseReleased");
        }

        @Override
        public void mousePressed(MouseEvent e) 
        {        
            System.out.println("mousePressed");
            if(e.getSource() instanceof RTextScrollPane )
            {
                RTextScrollPane scrollActual = (RTextScrollPane)e.getSource();
                System.out.println(scrollActual.getMousePosition().x);
            }            
        }

        @Override
        public void mouseExited(MouseEvent e) {
            System.out.println("mouseExited");
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            System.out.println("mouseEntered");                        
        }

        @Override
        public void mouseClicked(MouseEvent e) 
        {
            System.out.println("mouseClicked");
            if(e.getSource() instanceof RTextScrollPane )
            {
                RTextScrollPane scrollActual = (RTextScrollPane)e.getSource();
                System.out.println("Putas");
            }               
        }
    }; 
    
    
    
    public void iniciarDebuger()
    {
        JPanel panelActual = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex()); // Panel Actual
        RTextScrollPane scrollActual= (RTextScrollPane) panelActual.getComponent(0); // Scroll actual.
        Gutter gutter = scrollActual.getGutter(); 
        GutterIconInfo[] puntos = gutter.getBookmarks(); // Array de información de puntos.
        //for(GutterIconInfo point: puntos){Imprimir("GutterIconInfo\t"+point.getMarkedOffset());}
        ArrayList<Integer> breakPoints = new ArrayList(); // Array donde se guardan la líneas de los breakpoints.
        breakPoints.clear();// :v
        String texto = scrollActual.getTextArea().getText().replace("\n", " \n");//
        texto = texto + " ";//         
        String[] lineas = texto.split("\n");                   
        StringTokenizer st = new StringTokenizer(texto,"\n");
        lineas = new String[st.countTokens()];
        int count = 0;
        while (st.hasMoreTokens()) 
        {
            lineas[count] = st.nextToken();
            count ++ ;
        }               
        Integer[] limites = new Integer[lineas.length + 1 ];
        limites[0] = 0;
        int contador = 1;                
        for(String line: lineas)
        {        
            if(contador == 0)
            {
                limites[contador] = line.length() ;
            }
            else
            {
                limites[contador] = line.length() +limites[contador-1];
            }            
            contador++;                       
        }    
        //for(int lim : limites){Imprimir("Inicio Linea\t"+lim);}
        for( GutterIconInfo punto : puntos)
        {
            for(int x = 0 ; x < lineas.length; x++)
            {
                if(punto.getMarkedOffset()==limites[x])
                {
                    breakPoints.add(x);
                    break;
                }
            }            
        }                      
        System.out.println("-----------------");
        for(int point: breakPoints)
        {
            System.out.println("BreakPoint\t"+point);
        }                
    }
    
    public void Imprimir(Object cadena)
    {
        System.out.println(cadena);
    }
    
    
    public String PathActual(){                
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path+"\\Proyectos";
    } 
    
        public double factorial(double num)
    {
        if(num==0){return 1;}
        else{return num*factorial(num-1);}
    }
    
    
    public double seno(double x, int ajuste)
    {
        double contador=0;
        if( ajuste>= 1 && ajuste<=10)
        {
            Imprimir("El ajuste debe estar entre 1 y 10");
            return -1;
        }
        double valor=0;
        ajuste = ajuste*100;
        while(contador<=ajuste)
        {
            valor = valor + (Math.pow(-1,contador)/(factorial(2*contador+1)))*Math.pow(x, 2*contador);
        }
        return valor;
    }
    
    
   public Color colorFuente(String color)
   {
       color = quitarComillas(color).toLowerCase();       
       Color retorno = Color.WHITE ;
       System.out.println("Buscando color: \t "+color);
       
       if(color.contains("#"))
       {
            //Mensaje("Buscando color: \t "+color,"");           
            //Color colorFodo = new Color(int r, int g, int b, int a);
            //this.scroll.setBackground(colorFondo);
            int r,g,b,a;
            String hr,hg,hb,ha;
            String entrada= color;
            hr = entrada.substring(1,3);
            hg = entrada.substring(3,5);
            hb = entrada.substring(5,7);

            r = hexToDec(hr);
            g = hexToDec(hg);
            b = hexToDec(hb);
            a=0;
            if(r==300 || g ==300 || b==300)
            {
                //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),"Semantico", hijoD.getValue() + " Valor rgb no valido."});
                String mensaje = color + "Valor rgb no válido.";
                listaErrores.add(new error("Sematico", 0,0, mensaje ));                
            }
            else
            {
                //panel.setBackground(new Color(r,g,b));
                retorno = new Color(r,g,b);            
            }        
       }
       else
       {              
            switch(color)
            {
                case "blue":
                    retorno = Color.blue;
                    break;
                case "black":
                    retorno = Color.BLACK;
                    break;
                case "gray":
                    retorno = Color.GRAY;
                    break;
                case "cyan":
                    retorno = Color.CYAN;
                    break;
                case "dark_gray":
                    retorno = Color.DARK_GRAY;
                    break;   
                case "green":
                    retorno = Color.GREEN;
                    break;
                case "light_gray":
                    retorno = Color.LIGHT_GRAY;
                    break;
                case "magenta":
                    retorno = Color.MAGENTA;
                    break;
                case "orange":
                    retorno = Color.ORANGE;
                    break;
                case "pink":
                    retorno = Color.PINK;
                    break;
                case "red":
                    retorno = Color.RED;
                    break;
                case "white":
                    retorno = Color.WHITE;
                    break;
                case "yellow":
                    retorno = Color.YELLOW;
                    break;  
                default:
                    //filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                    //Errores(String tipo, int linea, int columna, String valor)
                    String mensaje = color + "Nombre de color no válido.";
                    listaErrores.add(new error("Sematico", 0, 0, mensaje ));
                    break;
            }   
       }
        return retorno;
   }    
    public String quitarComillas(String cadena)
    {
        if(cadena!=null)
        {
            if(!cadena.equals(""))
            {
                String inicio = cadena.substring(0, 1);
                if(inicio.equals("\""))
                {
                    return cadena.substring(1, cadena.length()-1);
                }
                return cadena.trim();            
            }
            return cadena.trim();
        }
        return cadena.trim();
    }    

   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
    }
   
    public void ejecutardjs()
    {

    }
    
    public void mostrarSimbolos()
    {
        DefaultTableModel simbolos = new DefaultTableModel();        
        simbolos.addColumn("Archivo");        
        simbolos.addColumn("Id");
        simbolos.addColumn("Ambito");
        simbolos.addColumn("Rol"); 
        simbolos.addColumn("Posicion");                 
        simbolos.addColumn("Tamaño");                 
        simbolos.addColumn("dimensiones");                 
        simbolos.addColumn("Tipo"); 
        simbolos.addColumn("Valor");
        tabladeSimbolos.setModel(simbolos);                                               
    }
    public void addImportacion(String c)
    {
        cadenaImportaciones +="\n"+c;
    }
    
    public void addCuerpoInicio(String c)
    {
        //cadenaCuerpo =  c +"\n"+ cadenaCuerpo;
        cadenaCuerpo +="\n"+ c;
    }
    
    public void addCuerpoFinal(String c)
    {
        cadenaCuerpo += "\n" + c;
    }    
    
    public void mostrarTraduccion()
    {
        textAreaConsola.setText(cadenaImportaciones + "\n" + cadenaCuerpo);
    }

    public String generarEtiqueta()
    {
        return "L0";
    }
    public void setSalida(String c)
    {
        this.textAreaConsola.setText(this.textAreaConsola.getText() + "\n" +c);
    }
    public String generarTemporal()
    {
        return "t0";
    }
    
    public void add3d(String c)
    {
        this.textAreaConsola.setText(this.textAreaConsola.getText() + "\n" +c);
    }     
    
    public void ejecutarFs(Nodo nodo)
    {        
        nodo.ejecutar(new Entorno(null,this));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirCarpeta;
    private javax.swing.JTree arbolDirectorio;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCompilar;
    private javax.swing.JTabbedPane contenedorPaneles;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEjecucion;
    private javax.swing.JPanel panelDirectorio;
    private javax.swing.JPanel panelEdicion;
    private javax.swing.JPanel panelEditor;
    private javax.swing.JTable tablaErrores;
    private javax.swing.JTable tabladeSimbolos;
    private javax.swing.JTextArea textAreaConsola;
    private javax.swing.JTextField textoBusqueda;
    // End of variables declaration//GEN-END:variables
}
