/* The following code was generated by JFlex 1.7.0 */

package Analisis.XML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis.XML.AST.singlenton;
import Recursos.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class scannerxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;
  public static final int COMENTARIO2 = 6;
  public static final int COMENTARIO3 = 8;
  public static final int COMENTARIO4 = 10;
  public static final int YYINITIAL2 = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    58, 58, 58, 58, 58, 58, 58, 58, 58,  1,  3, 56,  1,  2, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
     1, 23,  8, 17, 18, 58, 32, 58, 24, 25,  9, 28, 27, 29, 58, 19, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 58, 58, 20, 21, 22, 58, 
    58, 41, 51, 42, 35, 44, 47, 55, 50, 34,  5,  5, 48, 39, 43, 38, 
    37,  5, 40, 53, 36, 54, 45,  5, 46, 49,  5, 16, 58, 15, 30,  5, 
    58, 41, 51, 42, 35, 44, 47, 55, 50, 34,  5,  5, 48, 39, 43, 38, 
    37,  5, 40, 53, 36, 54, 45,  5, 46, 49,  5, 14, 31, 26, 58, 58, 
    58, 58, 58, 58, 58, 56, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58,  7, 58, 58, 58, 58, 58, 58, 58,  7, 58, 58, 58,  7, 58, 58, 
    58,  7, 58,  7, 58, 58, 58, 58, 58, 58,  7, 58, 58, 58, 58, 58, 
    58, 58, 10,  6, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 10,  6, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\1\1\7\2\1\1\10\1\11\1\12\1\13\1\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\3\1"+
    "\13\5\1\23\2\5\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\1\11\1\42\15\0\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\0"+
    "\1\52\3\5\1\0\4\5\1\0\20\5\1\0\2\5"+
    "\1\53\12\0\1\54\1\0\2\43\4\0\3\5\1\0"+
    "\1\5\1\55\2\5\1\0\22\5\1\0\3\5\14\0"+
    "\1\43\1\0\1\5\1\56\1\5\2\57\1\5\1\60"+
    "\1\0\1\5\1\0\3\5\1\0\2\5\1\61\3\5"+
    "\1\0\3\5\1\0\3\5\1\0\2\5\1\0\3\5"+
    "\1\0\1\62\12\0\2\5\1\63\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\64\1\0\2\5"+
    "\1\65\1\0\2\5\1\0\1\5\1\0\3\5\2\66"+
    "\1\5\1\0\1\5\1\67\1\70\2\0\1\71\6\0"+
    "\1\72\2\0\2\5\2\73\2\74\1\0\2\5\2\75"+
    "\1\0\2\5\1\0\1\5\1\76\1\0\1\5\2\77"+
    "\2\5\1\100\1\0\1\5\5\0\1\101\3\0\1\5"+
    "\1\102\1\0\2\5\2\0\2\5\1\0\1\103\1\5"+
    "\2\104\2\105\1\5\1\106\1\0\1\5\1\0\1\107"+
    "\1\0\1\103\1\0\1\110\1\0\2\111\1\0\2\5"+
    "\2\0\2\5\1\0\2\5\1\0\1\5\1\112\4\0"+
    "\1\5\1\0\1\5\2\0\2\5\1\0\1\5\1\113"+
    "\1\0\1\5\3\0\2\114\2\115\2\0\2\5\1\0"+
    "\1\116\2\117\1\120\1\116\1\121\1\0\1\122\1\5"+
    "\1\122\2\0\1\5\1\0\2\123\4\0\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u019d\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u019d\0\u02c4"+
    "\0\u02ff\0\u02ff\0\u033a\0\u019d\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u0213\0\u079b\0\u07d6"+
    "\0\u0213\0\u0811\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u084c\0\u019d\0\u019d\0\u019d\0\u033a\0\u019d"+
    "\0\u019d\0\u019d\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u024e\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d"+
    "\0\u0bc1\0\u0213\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u019d\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u019d\0\u14be\0\u14f9\0\u019d\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u0213\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1534\0\u1fce\0\u2009\0\u0213"+
    "\0\u2044\0\u019d\0\u0213\0\u207f\0\u0213\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u0213\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u019d\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u0213"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u0213\0\u2c05\0\u2c40\0\u2c7b\0\u0213\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u019d"+
    "\0\u0213\0\u2ec9\0\u2f04\0\u2f3f\0\u0213\0\u0213\0\u2f7a\0\u2fb5"+
    "\0\u019d\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u019d"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u019d\0\u0213\0\u019d\0\u0213"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u0213\0\u348c\0\u34c7\0\u019d\0\u0213\0\u3502"+
    "\0\u353d\0\u0213\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\u019d\0\u3715\0\u3750\0\u378b\0\u37c6\0\u0213\0\u3801"+
    "\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u0213"+
    "\0\u39d9\0\u019d\0\u0213\0\u019d\0\u0213\0\u3a14\0\u0213\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u019d\0\u3b00\0\u019d\0\u3b3b\0\u019d\0\u3b76"+
    "\0\u019d\0\u0213\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u019d\0\u3e75"+
    "\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d"+
    "\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u0213\0\u4174\0\u41af\0\u41ea"+
    "\0\u4225\0\u4260\0\u019d\0\u0213\0\u019d\0\u0213\0\u429b\0\u42d6"+
    "\0\u4311\0\u434c\0\u4387\0\u0213\0\u019d\0\u0213\0\u019d\0\u019d"+
    "\0\u019d\0\u43c2\0\u019d\0\u43fd\0\u0213\0\u4438\0\u4473\0\u44ae"+
    "\0\u44e9\0\u019d\0\u0213\0\u4524\0\u455f\0\u459a\0\u45d5\0\u019d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\3\10\1\21\1\10\1\22\1\23\1\10"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\14\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\14"+
    "\1\62\1\10\3\14\2\0\1\10\1\0\12\63\3\0"+
    "\23\63\1\0\22\63\1\0\4\63\1\0\1\63\21\64"+
    "\1\65\1\66\1\64\1\67\46\64\3\70\1\71\67\70"+
    "\21\72\1\0\1\73\1\72\1\74\46\72\22\75\1\76"+
    "\50\75\1\0\3\11\15\0\1\77\1\0\1\100\1\101"+
    "\1\0\1\102\12\0\2\103\1\104\1\105\2\0\1\106"+
    "\2\0\1\107\1\0\1\110\1\111\2\0\1\112\2\0"+
    "\1\113\106\0\1\13\72\0\2\14\1\114\33\0\22\14"+
    "\1\0\3\14\12\0\1\14\63\0\11\115\1\0\61\115"+
    "\13\0\1\116\57\0\11\117\1\0\61\117\21\0\1\120"+
    "\1\121\75\0\1\122\72\0\1\123\72\0\1\124\72\0"+
    "\1\125\104\0\1\126\73\0\1\127\75\0\1\130\3\0"+
    "\1\131\27\0\2\14\1\114\33\0\1\14\1\132\3\14"+
    "\1\133\14\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\7\14\1\134\2\14\1\135\7\14\1\0\3\14\7\0"+
    "\2\14\1\114\32\0\1\136\1\137\6\14\1\140\2\14"+
    "\1\141\7\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\7\14\1\142\12\14\1\0\3\14\7\0\2\14\1\114"+
    "\32\0\1\143\1\144\6\14\1\145\12\14\1\0\1\14"+
    "\1\146\1\14\7\0\2\14\1\114\33\0\12\14\1\147"+
    "\7\14\1\0\3\14\7\0\2\14\1\114\33\0\10\14"+
    "\1\150\1\151\4\14\1\152\3\14\1\0\1\14\1\153"+
    "\1\14\7\0\2\14\1\114\33\0\4\14\1\154\15\14"+
    "\1\0\1\14\1\155\1\14\7\0\2\14\1\114\33\0"+
    "\4\14\1\156\5\14\1\157\7\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\11\14\1\160\10\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\12\14\1\161\7\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\7\14\1\162\12\14"+
    "\1\0\1\14\1\163\1\14\7\0\2\14\1\114\32\0"+
    "\1\164\1\165\21\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\4\14\1\166\15\14\1\0\3\14\24\0\1\167"+
    "\120\0\1\170\74\0\1\171\2\0\1\172\72\0\1\173"+
    "\104\0\1\174\52\0\1\175\77\0\1\176\73\0\1\177"+
    "\57\0\2\200\76\0\1\201\24\0\10\115\1\202\62\115"+
    "\14\0\1\203\56\0\17\117\1\202\53\117\2\120\1\204"+
    "\1\205\67\120\11\206\1\207\10\206\1\210\50\206\45\0"+
    "\1\211\31\0\2\14\1\114\33\0\3\14\1\212\16\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\2\14\1\213"+
    "\17\14\1\0\3\14\7\0\2\14\1\114\33\0\15\14"+
    "\1\214\4\14\1\0\3\14\50\0\1\215\31\0\2\14"+
    "\1\114\33\0\3\14\1\216\16\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\5\14\1\217\14\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\14\14\1\220\5\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\2\14\1\221\17\14"+
    "\1\0\3\14\56\0\1\222\23\0\2\14\1\114\33\0"+
    "\11\14\1\223\10\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\14\14\1\224\5\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\16\14\1\225\3\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\15\14\1\226\4\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\10\14\1\227\11\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\10\14\1\230\11\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\2\14\1\231"+
    "\17\14\1\0\3\14\7\0\2\14\1\114\33\0\2\14"+
    "\1\232\17\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\11\14\1\233\4\14\1\234\3\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\6\14\1\235\13\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\5\14\1\236\14\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\22\14\1\0\2\14"+
    "\1\237\7\0\2\14\1\114\33\0\13\14\1\240\6\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\6\14\1\241"+
    "\2\14\1\242\10\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\16\14\1\243\3\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\12\14\1\244\7\14\1\0\3\14\67\0"+
    "\2\245\11\0\2\14\1\114\33\0\22\14\1\245\1\246"+
    "\2\14\7\0\2\14\1\114\33\0\2\14\1\247\3\14"+
    "\1\250\13\14\1\0\3\14\50\0\1\251\71\0\1\252"+
    "\105\0\1\253\71\0\1\254\74\0\1\255\65\0\1\256"+
    "\74\0\1\257\70\0\1\260\103\0\2\261\51\0\1\262"+
    "\26\0\11\263\1\0\61\263\3\0\1\205\67\0\22\206"+
    "\1\264\61\206\1\207\11\206\1\0\70\206\1\265\1\264"+
    "\50\206\46\0\1\266\30\0\2\14\1\114\33\0\4\14"+
    "\1\267\15\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\4\14\1\270\15\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\12\14\1\271\7\14\1\0\3\14\51\0\1\272"+
    "\30\0\2\14\1\114\33\0\4\14\1\273\15\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\2\14\1\274\17\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\20\14\1\275"+
    "\1\14\1\0\3\14\44\0\2\276\34\0\2\14\1\114"+
    "\32\0\1\276\1\277\21\14\1\0\3\14\7\0\2\14"+
    "\1\114\32\0\1\300\1\301\21\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\2\14\1\302\17\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\12\14\1\303\7\14\1\0"+
    "\3\14\7\0\2\14\1\114\32\0\1\304\1\305\21\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\20\14\1\306"+
    "\1\14\1\0\3\14\7\0\2\14\1\114\33\0\4\14"+
    "\1\307\15\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\4\14\1\310\15\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\2\14\1\311\17\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\4\14\1\312\15\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\22\14\1\313\1\314\2\14\7\0"+
    "\2\14\1\114\33\0\21\14\1\315\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\6\14\1\316\13\14\1\0\3\14"+
    "\7\0\2\14\1\114\32\0\1\317\1\320\21\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\1\14\1\321\20\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\2\14\1\322"+
    "\17\14\1\0\3\14\7\0\2\14\1\114\33\0\22\14"+
    "\1\323\1\324\2\14\7\0\2\14\1\114\33\0\11\14"+
    "\1\325\10\14\1\0\3\14\47\0\1\326\32\0\2\14"+
    "\1\114\33\0\2\14\1\327\17\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\4\14\1\330\15\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\1\14\1\331\20\14\1\0"+
    "\3\14\51\0\1\332\72\0\1\333\100\0\1\334\62\0"+
    "\1\335\72\0\1\336\72\0\1\337\67\0\2\340\74\0"+
    "\1\341\72\0\1\342\74\0\1\343\24\0\12\263\1\344"+
    "\60\263\21\206\1\205\1\264\50\206\50\0\1\345\26\0"+
    "\2\14\1\114\33\0\6\14\1\346\13\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\10\14\1\347\11\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\4\14\1\350\15\14"+
    "\1\0\3\14\52\0\1\351\27\0\2\14\1\114\33\0"+
    "\5\14\1\352\14\14\1\0\3\14\52\0\1\353\27\0"+
    "\2\14\1\114\33\0\5\14\1\354\14\14\1\0\3\14"+
    "\7\0\2\14\1\114\32\0\1\355\1\356\21\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\6\14\1\357\13\14"+
    "\1\0\3\14\51\0\1\360\30\0\2\14\1\114\33\0"+
    "\4\14\1\361\15\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\4\14\1\362\15\14\1\0\3\14\7\0\2\14"+
    "\1\114\26\0\1\363\4\0\22\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\6\14\1\364\3\14\1\365\7\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\6\14\1\366"+
    "\13\14\1\0\3\14\44\0\2\367\34\0\2\14\1\114"+
    "\32\0\1\367\1\370\21\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\6\14\1\371\13\14\1\0\3\14\7\0"+
    "\2\14\1\114\32\0\1\372\1\373\21\14\1\0\3\14"+
    "\54\0\1\374\25\0\2\14\1\114\33\0\7\14\1\375"+
    "\12\14\1\0\3\14\7\0\2\14\1\114\33\0\7\14"+
    "\1\376\12\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\7\14\1\377\12\14\1\0\3\14\51\0\1\u0100\30\0"+
    "\2\14\1\114\33\0\4\14\1\u0101\15\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\2\14\1\u0102\17\14\1\0"+
    "\3\14\54\0\1\u0103\25\0\2\14\1\114\33\0\7\14"+
    "\1\u0104\12\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\11\14\1\u0105\10\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\12\14\1\u0106\7\14\1\0\3\14\53\0\1\u0107"+
    "\74\0\1\u0108\66\0\1\u0109\65\0\2\u010a\100\0\1\u010b"+
    "\3\0\1\u010c\67\0\1\u010d\72\0\1\u010e\72\0\1\u010f"+
    "\74\0\1\u0110\17\0\12\263\1\344\1\u0111\57\263\44\0"+
    "\1\u0112\32\0\2\14\1\114\33\0\2\14\1\u0113\17\14"+
    "\1\0\3\14\7\0\2\14\1\114\33\0\2\14\1\u0114"+
    "\17\14\1\0\3\14\51\0\1\u0115\30\0\2\14\1\114"+
    "\33\0\4\14\1\u0116\15\14\1\0\3\14\51\0\1\u0117"+
    "\30\0\2\14\1\114\33\0\4\14\1\u0118\15\14\1\0"+
    "\3\14\52\0\1\u0119\27\0\2\14\1\114\33\0\5\14"+
    "\1\u011a\14\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\12\14\1\u011b\7\14\1\0\3\14\56\0\1\u011c\23\0"+
    "\2\14\1\114\33\0\11\14\1\u011d\10\14\1\0\3\14"+
    "\53\0\1\u011e\26\0\2\14\1\114\33\0\4\14\1\u011f"+
    "\15\14\1\0\3\14\7\0\2\14\1\114\33\0\11\14"+
    "\1\u0120\10\14\1\0\3\14\60\0\1\u0121\21\0\2\14"+
    "\1\114\33\0\13\14\1\u0122\6\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\12\14\1\u0123\7\14\1\0\3\14"+
    "\47\0\1\u0124\32\0\2\14\1\114\33\0\2\14\1\u0125"+
    "\17\14\1\0\3\14\53\0\1\u0126\26\0\2\14\1\114"+
    "\33\0\6\14\1\u0127\13\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\1\14\1\u0128\20\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\11\14\1\u0129\10\14\1\0\3\14"+
    "\7\0\2\14\1\114\33\0\12\14\1\u012a\7\14\1\0"+
    "\3\14\46\0\1\u012b\33\0\2\14\1\114\33\0\1\14"+
    "\1\u012c\20\14\1\0\3\14\47\0\1\u012d\72\0\1\u012e"+
    "\75\0\1\u012f\71\0\1\u0130\77\0\1\u0131\67\0\1\u0132"+
    "\75\0\1\u0133\62\0\1\u0134\27\0\12\263\1\344\2\263"+
    "\1\202\55\263\51\0\1\u0135\25\0\2\14\1\114\33\0"+
    "\7\14\1\u0136\12\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\4\14\1\u0137\15\14\1\0\3\14\57\0\1\u0138"+
    "\22\0\2\14\1\114\33\0\12\14\1\u0139\7\14\1\0"+
    "\3\14\7\0\2\14\1\114\33\0\11\14\1\u013a\10\14"+
    "\1\0\3\14\44\0\2\u013b\14\0\1\u013c\17\0\2\14"+
    "\1\114\32\0\1\u013b\1\u013d\14\14\1\u013e\4\14\1\0"+
    "\3\14\57\0\1\u013f\22\0\2\14\1\114\33\0\16\14"+
    "\1\u0140\3\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\12\14\1\u0141\7\14\1\0\3\14\54\0\1\u0142\25\0"+
    "\2\14\1\114\33\0\7\14\1\u0143\12\14\1\0\3\14"+
    "\54\0\1\u0144\25\0\2\14\1\114\33\0\7\14\1\u0145"+
    "\12\14\1\0\3\14\7\0\2\14\1\114\33\0\12\14"+
    "\1\u0146\7\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\7\14\1\u0147\12\14\1\0\3\14\54\0\1\u0148\25\0"+
    "\2\14\1\114\33\0\7\14\1\u0149\12\14\1\0\3\14"+
    "\54\0\1\u014a\67\0\1\u014b\100\0\1\u014c\76\0\1\u014d"+
    "\66\0\1\u014e\67\0\1\u014f\72\0\1\u0150\71\0\1\u0151"+
    "\26\0\2\14\1\114\33\0\6\14\1\u0152\13\14\1\0"+
    "\3\14\46\0\1\u0153\33\0\2\14\1\114\33\0\1\14"+
    "\1\u0154\20\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\10\14\1\u0155\11\14\1\0\3\14\56\0\1\u0156\60\0"+
    "\2\u0157\34\0\2\14\1\114\33\0\11\14\1\u0158\10\14"+
    "\1\0\3\14\7\0\2\14\1\114\32\0\1\u0157\1\u0159"+
    "\21\14\1\0\3\14\50\0\1\u015a\31\0\2\14\1\114"+
    "\33\0\1\14\1\u015b\20\14\1\0\3\14\7\0\2\14"+
    "\1\114\33\0\6\14\1\u015c\13\14\1\0\3\14\47\0"+
    "\1\u015d\32\0\2\14\1\114\33\0\2\14\1\u015e\17\14"+
    "\1\0\3\14\53\0\1\u015f\65\0\1\u0160\72\0\1\u0161"+
    "\73\0\1\u0162\67\0\2\u0163\34\0\2\14\1\114\32\0"+
    "\1\u0163\1\u0164\21\14\1\0\3\14\7\0\2\14\1\114"+
    "\32\0\1\u0165\1\u0166\21\14\1\0\3\14\44\0\2\u0167"+
    "\103\0\1\u0168\23\0\2\14\1\114\32\0\1\u0167\1\u0169"+
    "\21\14\1\0\3\14\7\0\2\14\1\114\33\0\11\14"+
    "\1\u016a\10\14\1\0\3\14\53\0\1\u016b\26\0\2\14"+
    "\1\114\33\0\4\14\1\u016c\15\14\1\0\3\14\7\0"+
    "\2\14\1\114\33\0\4\14\1\u016d\15\14\1\0\3\14"+
    "\51\0\1\u016e\30\0\2\14\1\114\33\0\4\14\1\u016f"+
    "\15\14\1\0\3\14\44\0\2\u0170\76\0\1\u0171\72\0"+
    "\1\u0172\75\0\1\u0173\25\0\2\14\1\114\33\0\7\14"+
    "\1\u0174\12\14\1\0\3\14\54\0\1\u0175\25\0\2\14"+
    "\1\114\33\0\7\14\1\u0176\12\14\1\0\3\14\55\0"+
    "\1\u0177\71\0\1\u0178\25\0\2\14\1\114\33\0\10\14"+
    "\1\u0179\11\14\1\0\3\14\7\0\2\14\1\114\33\0"+
    "\7\14\1\u017a\12\14\1\0\3\14\51\0\1\u017b\30\0"+
    "\2\14\1\114\33\0\6\14\1\u017c\13\14\1\0\3\14"+
    "\67\0\2\u017d\11\0\2\14\1\114\33\0\22\14\1\u017d"+
    "\1\u017e\2\14\54\0\1\u017f\71\0\1\u0180\106\0\2\u0181"+
    "\46\0\2\u0182\110\0\1\u0183\16\0\2\14\1\114\32\0"+
    "\1\u0182\1\u0184\21\14\1\0\3\14\7\0\2\14\1\114"+
    "\33\0\16\14\1\u0185\3\14\1\0\3\14\46\0\1\u0186"+
    "\100\0\1\u0187\25\0\2\14\1\114\33\0\7\14\1\u0188"+
    "\12\14\1\0\3\14\71\0\1\u0189\64\0\1\u018a\16\0"+
    "\2\14\1\114\33\0\16\14\1\u018b\3\14\1\0\3\14"+
    "\55\0\1\u018c\72\0\1\u018d\61\0\2\u018e\76\0\1\u018f"+
    "\77\0\1\u0190\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\4\1\1\11\4\1\1\11\4\1\7\11"+
    "\23\1\10\11\1\1\3\11\1\0\3\11\15\0\1\1"+
    "\1\0\7\11\1\0\4\1\1\0\4\1\1\0\20\1"+
    "\1\0\2\1\1\11\12\0\1\11\1\0\1\1\1\11"+
    "\4\0\3\1\1\0\4\1\1\0\22\1\1\0\3\1"+
    "\14\0\1\1\1\0\3\1\1\11\3\1\1\0\1\1"+
    "\1\0\3\1\1\0\6\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\11\12\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\11\2\1\1\0\3\1\2\0\1\11\6\0\1\11"+
    "\2\0\2\1\1\11\1\1\1\11\1\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\11\4\1"+
    "\1\0\1\1\5\0\1\11\3\0\2\1\1\0\2\1"+
    "\2\0\2\1\1\0\2\1\1\11\1\1\1\11\3\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\11\4\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\1\1\3\0\1\11"+
    "\1\1\1\11\1\1\2\0\2\1\1\0\1\1\1\11"+
    "\1\1\3\11\1\0\1\11\2\1\2\0\1\1\1\0"+
    "\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).
    public String cadena ="";
    public boolean flag = false;
    public boolean flagSalto= false;
    public int contadorEtiquetas = 0 ;  // 0 estado yyinitial, 1 estado 0, 2 estado 1;


    public void iniciarCadena()
    {  
        flag = true;
        cadena = "";
    }

    public void finalizarCadena()
    {   
        flagSalto = !flagSalto;     
        Imprimir("--------------------");
        Imprimir(cadena);
        Imprimir("--------------------");
        cadena = "";        
        flag = false;        
    }
    
    public void adderror(int linea, int columna, String valor)
    {        
        singlenton.addErrores(new error("Lexico",valor, linea, columna));
    }
    public void adderror(int linea, int columna, String valor, String desc)
    {        
        singlenton.addErrores(new error("Lexico",linea, columna, valor, desc));
    }    
    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 

    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   

    



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerxml(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
            adderror(yyline, yychar, yytext().toLowerCase());
            } 
            // fall through
          case 85: break;
          case 2: 
            { /*Imprimir("Salto de linea");*/
            } 
            // fall through
          case 86: break;
          case 3: 
            { yychar=0;
            } 
            // fall through
          case 87: break;
          case 4: 
            { addLexema("numerico",yytext(), yyline, yychar);
                return new Symbol(sym.numero,yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 88: break;
          case 5: 
            { addLexema("identificador",yytext(), yyline, yychar);
                return new Symbol(sym.id,yychar, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 6: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.multi, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 90: break;
          case 7: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.llavei, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 91: break;
          case 8: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            yybegin(YYINITIAL2);
            Imprimir("Saltando a YYINITIAL2");
            return  new Symbol(sym.slash, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 92: break;
          case 9: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            finalizarCadena();            
            return  new Symbol(sym.menorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 93: break;
          case 10: 
            { addLexema("simbolo", yytext(), yyline, yychar);            
            return  new Symbol(sym.igual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 94: break;
          case 11: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            if(flag)
            {
                yybegin(CADENA);
            }      
            return  new Symbol(sym.mayorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 95: break;
          case 12: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.pari, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 96: break;
          case 13: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.pard, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 97: break;
          case 14: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.llaved, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 98: break;
          case 15: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.coma, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 99: break;
          case 16: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.mas, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 100: break;
          case 17: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.menos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 101: break;
          case 18: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.potencia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 102: break;
          case 19: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tx, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 103: break;
          case 20: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ty, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 104: break;
          case 21: 
            { switch(yytext())
        {
            case "#":
                yybegin(COMENTARIO);
                break;
            case "<":            
                yybegin(YYINITIAL2);
                yypushback(1);                
                addLexema("cadena",cadena, yyline, yychar);     
                Imprimir("Saliendo de estado cadena.");
                return new Symbol(sym.cadena, yychar, yyline, cadena.trim());            
            default:
                if(yytext().equals("\n"))
                {
                    cadena  = cadena + "\n";  
                    yychar = 1;                  
                }
                else
                {
                    cadena  = cadena + yytext();            
                }  
                //Imprimir(cadena);
                break;
        }
            } 
            // fall through
          case 105: break;
          case 22: 
            { yybegin(CADENA);        
        cadena = cadena + "#";
            } 
            // fall through
          case 106: break;
          case 23: 
            { yybegin(COMENTARIO2);/*Comentario de una sola linea*/
        Imprimir("Inicia comentario uni linea.");
            } 
            // fall through
          case 107: break;
          case 24: 
            { yybegin(COMENTARIO3);/*Comentario multilinea*/
        Imprimir("Inicia comentario multi linea.");
            } 
            // fall through
          case 108: break;
          case 25: 
            { adderror(yyline, yychar, yytext(),"Falta simbolo para cierre de comentario.");
        yybegin(CADENA);
        yypushback(1);
            } 
            // fall through
          case 109: break;
          case 26: 
            { /*Ignorar que es comentario*/
            } 
            // fall through
          case 110: break;
          case 27: 
            { yybegin(CADENA);
        //yyline++;
        Imprimir("Regresando a estado cadena");
            } 
            // fall through
          case 111: break;
          case 28: 
            { //Imprimir(yytext().toLowerCase());
        /*Ignorar*/
            } 
            // fall through
          case 112: break;
          case 29: 
            { //cadena += "$";
        adderror(yyline, yychar, yytext(),"Falta simbolo para cierre de comentario.");
        yybegin(CADENA);/*Comentario de una sola linea*/        
        Imprimir("Fin del comentario multi linea.");
            } 
            // fall through
          case 113: break;
          case 30: 
            { yybegin(CADENA);
        yypushback(1);
            } 
            // fall through
          case 114: break;
          case 31: 
            { yybegin(COMENTARIO3);
        Imprimir("Saltar a comentario 3");
            } 
            // fall through
          case 115: break;
          case 32: 
            { yybegin(CADENA);/*Comentario de una sola linea*/
            } 
            // fall through
          case 116: break;
          case 33: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            return  new Symbol(sym.slash, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 117: break;
          case 34: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            yybegin(YYINITIAL);
            return  new Symbol(sym.mayorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 118: break;
          case 35: 
            { /*Imprimir(yytext().toLowerCase());*/
            } 
            // fall through
          case 119: break;
          case 36: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.menorigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 120: break;
          case 37: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.igualigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 121: break;
          case 38: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.mayorigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 122: break;
          case 39: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.diferente, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 123: break;
          case 40: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.or, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 124: break;
          case 41: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.and, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 125: break;
          case 42: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tid, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 126: break;
          case 43: 
            { yybegin(CADENA);/*Comentario de una sola linea*/        
        Imprimir("Fin del comentario multi linea.");
            } 
            // fall through
          case 127: break;
          case 44: 
            { addLexema("cadena",yytext(), yyline, yychar);
                return new Symbol(sym.cadena,yychar, yyline, yytext().substring(1,yytext().length()-1));
            } 
            // fall through
          case 128: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttamanio, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 129: break;
          case 46: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            iniciarCadena();          
            return  new Symbol(sym.dato, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 130: break;
          case 47: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttipo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 131: break;
          case 48: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tpath, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 132: break;
          case 49: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.talto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 133: break;
          case 50: 
            { addLexema("reservada", yytext(), yyline, yychar);      
            return  new Symbol(sym.dato, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 134: break;
          case 51: 
            { addLexema("reservada", yytext(), yyline, yychar);              
            iniciarCadena();
            return  new Symbol(sym.ttexto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 135: break;
          case 52: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tancho, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 136: break;
          case 53: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcolor, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 137: break;
          case 54: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.falso, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 138: break;
          case 55: 
            { addLexema("reservada", yytext(), yyline, yychar); 
            iniciarCadena();           
            return  new Symbol(sym.tboton, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 139: break;
          case 56: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tborde, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 140: break;
          case 57: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.ttexto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 141: break;
          case 58: 
            { addLexema("reservada", yytext(), yyline, yychar);                       
            return  new Symbol(sym.tboton, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 142: break;
          case 59: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tminimo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 143: break;
          case 60: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmaximo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 144: break;
          case 61: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.taccion, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 145: break;
          case 62: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnombre, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 146: break;
          case 63: 
            { addLexema("reservada", yytext(), yyline, yychar);    
            iniciarCadena();
            return  new Symbol(sym.tenviar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 147: break;
          case 64: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfuente, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 148: break;
          case 65: 
            { addLexema("reservada", yytext(), yyline, yychar);                       
            return  new Symbol(sym.tenviar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 149: break;
          case 66: 
            { addLexema("reservada", yytext(), yyline, yychar);                        
            iniciarCadena();            
            return  new Symbol(sym.defecto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 150: break;
          case 67: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcontrol, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 151: break;
          case 68: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcursiva, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 152: break;
          case 69: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnegrita, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 153: break;
          case 70: 
            { addLexema("reservada", yytext(), yyline, yychar);
            finalizarCadena();                        
            return  new Symbol(sym.tventana, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 154: break;
          case 71: 
            { addLexema("reservada", yytext(), yyline, yychar);                         
            return  new Symbol(sym.defecto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 155: break;
          case 72: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tventana, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 156: break;
          case 73: 
            { addLexema("reservada", yytext(), yyline, yychar); 
            iniciarCadena();       
            return  new Symbol(sym.timportar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 157: break;
          case 74: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.timportar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 158: break;
          case 75: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.verdadero, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 159: break;
          case 76: 
            { addLexema("reservada", yytext(), yyline, yychar);
            finalizarCadena();            
            return  new Symbol(sym.tmultimedia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 160: break;
          case 77: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.treferencia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 161: break;
          case 78: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.contenedor, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 162: break;
          case 79: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.listadatos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 163: break;
          case 80: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmultimedia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 164: break;
          case 81: 
            { addLexema("reservada", yytext(), yyline, yychar);      
            return  new Symbol(sym.listadatos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 165: break;
          case 82: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfinal, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 166: break;
          case 83: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tinicial, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 167: break;
          case 84: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tautoreproduccion, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
