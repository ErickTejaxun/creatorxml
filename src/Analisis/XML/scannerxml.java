/* The following code was generated by JFlex 1.7.0 */

package Analisis.XML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Recursos.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class scannerxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;
  public static final int COMENTARIO2 = 6;
  public static final int COMENTARIO3 = 8;
  public static final int COMENTARIO4 = 10;
  public static final int YYINITIAL2 = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    48, 48, 48, 48, 48, 48, 48, 48, 48,  1,  3, 46,  1,  2, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
     1, 48,  8, 14, 15, 48, 48, 48, 48, 48,  9, 48, 48, 45, 48, 16, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 48, 48, 17, 19, 18, 48, 
    48, 30, 40, 31, 24, 33, 36, 44, 39, 23,  5,  5, 37, 28, 32, 27, 
    26,  5, 29, 42, 25, 43, 34,  5, 35, 38,  5, 48, 48, 48, 48,  5, 
    48, 30, 40, 31, 24, 33, 36, 44, 39, 23,  5,  5, 37, 28, 32, 27, 
    26,  5, 29, 42, 25, 43, 34,  5, 35, 38,  5, 20, 48, 21, 48, 48, 
    48, 48, 48, 48, 48, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48,  7, 48, 48, 48, 48, 48, 48, 48,  7, 48, 48, 48,  7, 48, 48, 
    48,  7, 48,  7, 48, 48, 48, 48, 48, 48,  7, 48, 48, 48, 48, 48, 
    48, 48, 10,  6, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 10,  6, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\13\4\1\13\2\4"+
    "\1\14\1\4\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\1\25\1\0\1\26\1\27\10\0"+
    "\1\30\1\0\1\31\1\0\1\31\3\4\1\0\4\4"+
    "\1\0\20\4\1\0\2\4\1\32\6\0\1\33\1\0"+
    "\2\30\4\0\3\4\1\0\1\4\1\34\2\4\1\0"+
    "\22\4\1\0\3\4\10\0\1\30\1\0\1\4\1\35"+
    "\1\4\2\36\1\4\1\37\1\0\1\4\1\0\3\4"+
    "\1\0\2\4\1\40\3\4\1\0\3\4\1\0\3\4"+
    "\1\0\2\4\1\0\3\4\1\0\1\41\6\0\2\4"+
    "\1\42\1\0\1\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\1\43\1\0\2\4\1\44\1\0\2\4\1\0"+
    "\1\4\1\0\3\4\2\45\1\4\1\0\1\4\1\46"+
    "\1\47\2\0\1\50\4\0\2\4\2\51\2\52\1\0"+
    "\2\4\2\53\1\0\2\4\1\0\1\4\1\54\1\0"+
    "\1\4\2\55\2\4\1\56\1\0\1\4\5\0\1\4"+
    "\1\57\1\0\2\4\2\0\2\4\1\0\1\60\1\4"+
    "\2\61\2\62\1\4\1\63\1\0\1\4\1\0\1\64"+
    "\1\0\1\65\2\66\1\0\2\4\2\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\67\2\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\1\70\1\0\1\4\1\0"+
    "\2\71\2\72\2\0\2\4\1\0\1\73\2\74\1\73"+
    "\1\0\1\75\1\4\1\75\2\0\1\4\1\0\2\76"+
    "\4\0\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0157\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u0157"+
    "\0\u0157\0\u0157\0\u0157\0\u0157\0\u0157\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u0188\0\u04c9\0\u04fa\0\u0188\0\u052b\0\u0157\0\u0157"+
    "\0\u0157\0\u0157\0\u0157\0\u0157\0\u0157\0\u055c\0\u0157\0\u0157"+
    "\0\u024c\0\u0157\0\u0157\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u01b9\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0157\0\u0746\0\u0188"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0157\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0157\0\u0df9\0\u0e2a\0\u0157\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u0188\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u0e5b\0\u1665\0\u1696\0\u0188\0\u16c7\0\u0157"+
    "\0\u0188\0\u16f8\0\u0188\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u0188\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u0157\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u0188\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u0188\0\u1fc6\0\u1ff7\0\u2028\0\u0188"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1\0\u0157\0\u0188\0\u2212\0\u2243\0\u2274\0\u0188\0\u0188"+
    "\0\u22a5\0\u22d6\0\u0157\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u0157\0\u0188\0\u0157\0\u0188\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u0188"+
    "\0\u2617\0\u2648\0\u0157\0\u0188\0\u2679\0\u26aa\0\u0188\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u0188"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u0188\0\u29eb\0\u0157\0\u0188\0\u0157\0\u0188\0\u2a1c\0\u0188"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\u0157\0\u2ae0\0\u0157\0\u0157\0\u0188"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u0157\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u0188\0\u2f78\0\u2fa9\0\u2fda\0\u0157\0\u0188\0\u0157\0\u0188"+
    "\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u0188\0\u0157\0\u0188"+
    "\0\u0157\0\u3100\0\u0157\0\u3131\0\u0188\0\u3162\0\u3193\0\u31c4"+
    "\0\u31f5\0\u0157\0\u0188\0\u3226\0\u3257\0\u3288\0\u32b9\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\10\1\13\1\14\1\10\1\15"+
    "\1\10\1\16\3\10\1\17\1\10\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\13\1\46\1\10\3\13"+
    "\1\10\2\0\1\10\1\0\12\47\3\0\10\47\1\0"+
    "\22\47\1\0\5\47\1\0\1\47\16\50\1\51\1\52"+
    "\41\50\3\53\1\54\55\53\16\55\1\0\1\56\41\55"+
    "\17\57\1\60\41\57\1\0\3\11\12\0\1\61\1\0"+
    "\1\62\1\21\1\63\3\0\2\64\1\65\1\66\5\0"+
    "\1\67\2\0\1\70\103\0\2\13\1\71\20\0\22\13"+
    "\1\0\3\13\13\0\1\13\51\0\11\72\1\0\47\72"+
    "\13\0\1\73\63\0\1\74\1\75\71\0\1\76\3\0"+
    "\1\77\30\0\2\13\1\71\20\0\1\13\1\100\3\13"+
    "\1\101\14\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\7\13\1\102\2\13\1\103\7\13\1\0\3\13\10\0"+
    "\2\13\1\71\17\0\1\104\1\105\6\13\1\106\2\13"+
    "\1\107\7\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\7\13\1\110\12\13\1\0\3\13\10\0\2\13\1\71"+
    "\17\0\1\111\1\112\6\13\1\113\12\13\1\0\1\13"+
    "\1\114\1\13\10\0\2\13\1\71\20\0\12\13\1\115"+
    "\7\13\1\0\3\13\10\0\2\13\1\71\20\0\10\13"+
    "\1\116\1\117\4\13\1\120\3\13\1\0\1\13\1\121"+
    "\1\13\10\0\2\13\1\71\20\0\4\13\1\122\15\13"+
    "\1\0\1\13\1\123\1\13\10\0\2\13\1\71\20\0"+
    "\4\13\1\124\5\13\1\125\7\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\11\13\1\126\10\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\12\13\1\127\7\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\7\13\1\130\12\13"+
    "\1\0\1\13\1\131\1\13\10\0\2\13\1\71\17\0"+
    "\1\132\1\133\21\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\4\13\1\134\15\13\1\0\3\13\22\0\1\135"+
    "\76\0\1\136\62\0\1\137\2\0\1\140\60\0\1\141"+
    "\52\0\1\142\66\0\1\143\17\0\10\72\1\144\50\72"+
    "\14\0\1\145\44\0\2\74\1\146\1\147\55\74\11\150"+
    "\1\151\5\150\1\152\41\150\32\0\1\153\32\0\2\13"+
    "\1\71\20\0\3\13\1\154\16\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\2\13\1\155\17\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\15\13\1\156\4\13\1\0"+
    "\3\13\36\0\1\157\32\0\2\13\1\71\20\0\3\13"+
    "\1\160\16\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\5\13\1\161\14\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\14\13\1\162\5\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\2\13\1\163\17\13\1\0\3\13\44\0"+
    "\1\164\24\0\2\13\1\71\20\0\11\13\1\165\10\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\14\13\1\166"+
    "\5\13\1\0\3\13\10\0\2\13\1\71\20\0\16\13"+
    "\1\167\3\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\15\13\1\170\4\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\10\13\1\171\11\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\10\13\1\172\11\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\2\13\1\173\17\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\2\13\1\174\17\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\11\13\1\175\4\13"+
    "\1\176\3\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\6\13\1\177\13\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\5\13\1\200\14\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\22\13\1\0\2\13\1\201\10\0\2\13"+
    "\1\71\20\0\13\13\1\202\6\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\6\13\1\203\2\13\1\204\10\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\16\13\1\205"+
    "\3\13\1\0\3\13\10\0\2\13\1\71\20\0\12\13"+
    "\1\206\7\13\1\0\3\13\55\0\2\207\12\0\2\13"+
    "\1\71\20\0\22\13\1\207\1\210\2\13\10\0\2\13"+
    "\1\71\20\0\2\13\1\211\3\13\1\212\13\13\1\0"+
    "\3\13\36\0\1\213\57\0\1\214\73\0\1\215\57\0"+
    "\1\216\55\0\1\217\60\0\1\220\20\0\11\221\1\0"+
    "\47\221\3\0\1\147\55\0\17\150\1\222\52\150\1\151"+
    "\6\150\1\0\56\150\1\223\1\222\41\150\33\0\1\224"+
    "\31\0\2\13\1\71\20\0\4\13\1\225\15\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\4\13\1\226\15\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\12\13\1\227"+
    "\7\13\1\0\3\13\37\0\1\230\31\0\2\13\1\71"+
    "\20\0\4\13\1\231\15\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\2\13\1\232\17\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\20\13\1\233\1\13\1\0\3\13"+
    "\32\0\2\234\35\0\2\13\1\71\17\0\1\234\1\235"+
    "\21\13\1\0\3\13\10\0\2\13\1\71\17\0\1\236"+
    "\1\237\21\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\2\13\1\240\17\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\12\13\1\241\7\13\1\0\3\13\10\0\2\13"+
    "\1\71\17\0\1\242\1\243\21\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\20\13\1\244\1\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\4\13\1\245\15\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\4\13\1\246\15\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\2\13\1\247"+
    "\17\13\1\0\3\13\10\0\2\13\1\71\20\0\4\13"+
    "\1\250\15\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\22\13\1\251\1\252\2\13\10\0\2\13\1\71\20\0"+
    "\21\13\1\253\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\6\13\1\254\13\13\1\0\3\13\10\0\2\13\1\71"+
    "\17\0\1\255\1\256\21\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\1\13\1\257\20\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\2\13\1\260\17\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\22\13\1\261\1\262\2\13"+
    "\10\0\2\13\1\71\20\0\11\13\1\263\10\13\1\0"+
    "\3\13\35\0\1\264\33\0\2\13\1\71\20\0\2\13"+
    "\1\265\17\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\4\13\1\266\15\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\1\13\1\267\20\13\1\0\3\13\37\0\1\270"+
    "\60\0\1\271\66\0\1\272\50\0\1\273\60\0\1\274"+
    "\60\0\1\275\27\0\12\221\1\276\46\221\16\150\1\147"+
    "\1\222\41\150\35\0\1\277\27\0\2\13\1\71\20\0"+
    "\6\13\1\300\13\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\10\13\1\301\11\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\4\13\1\302\15\13\1\0\3\13\40\0"+
    "\1\303\30\0\2\13\1\71\20\0\5\13\1\304\14\13"+
    "\1\0\3\13\40\0\1\305\30\0\2\13\1\71\20\0"+
    "\5\13\1\306\14\13\1\0\3\13\10\0\2\13\1\71"+
    "\17\0\1\307\1\310\21\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\6\13\1\311\13\13\1\0\3\13\37\0"+
    "\1\312\31\0\2\13\1\71\20\0\4\13\1\313\15\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\4\13\1\314"+
    "\15\13\1\0\3\13\10\0\2\13\1\71\20\0\22\13"+
    "\1\0\3\13\1\315\7\0\2\13\1\71\20\0\6\13"+
    "\1\316\3\13\1\317\7\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\6\13\1\320\13\13\1\0\3\13\32\0"+
    "\2\321\35\0\2\13\1\71\17\0\1\321\1\322\21\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\6\13\1\323"+
    "\13\13\1\0\3\13\10\0\2\13\1\71\17\0\1\324"+
    "\1\325\21\13\1\0\3\13\42\0\1\326\26\0\2\13"+
    "\1\71\20\0\7\13\1\327\12\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\7\13\1\330\12\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\7\13\1\331\12\13\1\0"+
    "\3\13\37\0\1\332\31\0\2\13\1\71\20\0\4\13"+
    "\1\333\15\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\2\13\1\334\17\13\1\0\3\13\42\0\1\335\26\0"+
    "\2\13\1\71\20\0\7\13\1\336\12\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\11\13\1\337\10\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\12\13\1\340\7\13"+
    "\1\0\3\13\41\0\1\341\62\0\1\342\54\0\1\343"+
    "\66\0\1\344\55\0\1\345\22\0\12\221\1\276\1\346"+
    "\45\221\31\0\1\347\33\0\2\13\1\71\20\0\2\13"+
    "\1\350\17\13\1\0\3\13\10\0\2\13\1\71\20\0"+
    "\2\13\1\351\17\13\1\0\3\13\37\0\1\352\31\0"+
    "\2\13\1\71\20\0\4\13\1\353\15\13\1\0\3\13"+
    "\37\0\1\354\31\0\2\13\1\71\20\0\4\13\1\355"+
    "\15\13\1\0\3\13\40\0\1\356\30\0\2\13\1\71"+
    "\20\0\5\13\1\357\14\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\12\13\1\360\7\13\1\0\3\13\44\0"+
    "\1\361\24\0\2\13\1\71\20\0\11\13\1\362\10\13"+
    "\1\0\3\13\41\0\1\363\27\0\2\13\1\71\20\0"+
    "\4\13\1\364\15\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\11\13\1\365\10\13\1\0\3\13\46\0\1\366"+
    "\22\0\2\13\1\71\20\0\13\13\1\367\6\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\12\13\1\370\7\13"+
    "\1\0\3\13\35\0\1\371\33\0\2\13\1\71\20\0"+
    "\2\13\1\372\17\13\1\0\3\13\41\0\1\373\27\0"+
    "\2\13\1\71\20\0\6\13\1\374\13\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\1\13\1\375\20\13\1\0"+
    "\3\13\10\0\2\13\1\71\20\0\11\13\1\376\10\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\12\13\1\377"+
    "\7\13\1\0\3\13\34\0\1\u0100\34\0\2\13\1\71"+
    "\20\0\1\13\1\u0101\20\13\1\0\3\13\35\0\1\u0102"+
    "\60\0\1\u0103\67\0\1\u0104\60\0\1\u0105\20\0\12\221"+
    "\1\276\2\221\1\144\43\221\36\0\1\u0106\26\0\2\13"+
    "\1\71\20\0\7\13\1\u0107\12\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\4\13\1\u0108\15\13\1\0\3\13"+
    "\45\0\1\u0109\23\0\2\13\1\71\20\0\12\13\1\u010a"+
    "\7\13\1\0\3\13\10\0\2\13\1\71\20\0\11\13"+
    "\1\u010b\10\13\1\0\3\13\32\0\2\u010c\14\0\1\u010d"+
    "\20\0\2\13\1\71\17\0\1\u010c\1\u010e\14\13\1\u010f"+
    "\4\13\1\0\3\13\45\0\1\u0110\23\0\2\13\1\71"+
    "\20\0\16\13\1\u0111\3\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\12\13\1\u0112\7\13\1\0\3\13\42\0"+
    "\1\u0113\26\0\2\13\1\71\20\0\7\13\1\u0114\12\13"+
    "\1\0\3\13\42\0\1\u0115\26\0\2\13\1\71\20\0"+
    "\7\13\1\u0116\12\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\12\13\1\u0117\7\13\1\0\3\13\10\0\2\13"+
    "\1\71\20\0\7\13\1\u0118\12\13\1\0\3\13\42\0"+
    "\1\u0119\26\0\2\13\1\71\20\0\7\13\1\u011a\12\13"+
    "\1\0\3\13\42\0\1\u011b\55\0\1\u011c\66\0\1\u011d"+
    "\55\0\1\u011e\57\0\1\u011f\27\0\2\13\1\71\20\0"+
    "\6\13\1\u0120\13\13\1\0\3\13\34\0\1\u0121\34\0"+
    "\2\13\1\71\20\0\1\13\1\u0122\20\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\10\13\1\u0123\11\13\1\0"+
    "\3\13\44\0\1\u0124\46\0\2\u0125\35\0\2\13\1\71"+
    "\20\0\11\13\1\u0126\10\13\1\0\3\13\10\0\2\13"+
    "\1\71\17\0\1\u0125\1\u0127\21\13\1\0\3\13\36\0"+
    "\1\u0128\32\0\2\13\1\71\20\0\1\13\1\u0129\20\13"+
    "\1\0\3\13\10\0\2\13\1\71\20\0\6\13\1\u012a"+
    "\13\13\1\0\3\13\35\0\1\u012b\33\0\2\13\1\71"+
    "\20\0\2\13\1\u012c\17\13\1\0\3\13\41\0\1\u012d"+
    "\53\0\1\u012e\56\0\2\u012f\35\0\2\13\1\71\17\0"+
    "\1\u012f\1\u0130\21\13\1\0\3\13\10\0\2\13\1\71"+
    "\17\0\1\u0131\1\u0132\21\13\1\0\3\13\32\0\2\u0133"+
    "\71\0\1\u0134\24\0\2\13\1\71\17\0\1\u0133\1\u0135"+
    "\21\13\1\0\3\13\10\0\2\13\1\71\20\0\11\13"+
    "\1\u0136\10\13\1\0\3\13\41\0\1\u0137\27\0\2\13"+
    "\1\71\20\0\4\13\1\u0138\15\13\1\0\3\13\10\0"+
    "\2\13\1\71\20\0\4\13\1\u0139\15\13\1\0\3\13"+
    "\37\0\1\u013a\31\0\2\13\1\71\20\0\4\13\1\u013b"+
    "\15\13\1\0\3\13\37\0\1\u013c\63\0\1\u013d\26\0"+
    "\2\13\1\71\20\0\7\13\1\u013e\12\13\1\0\3\13"+
    "\42\0\1\u013f\26\0\2\13\1\71\20\0\7\13\1\u0140"+
    "\12\13\1\0\3\13\43\0\1\u0141\57\0\1\u0142\26\0"+
    "\2\13\1\71\20\0\10\13\1\u0143\11\13\1\0\3\13"+
    "\10\0\2\13\1\71\20\0\7\13\1\u0144\12\13\1\0"+
    "\3\13\37\0\1\u0145\31\0\2\13\1\71\20\0\6\13"+
    "\1\u0146\13\13\1\0\3\13\55\0\2\u0147\12\0\2\13"+
    "\1\71\20\0\22\13\1\u0147\1\u0148\2\13\41\0\1\u0149"+
    "\51\0\2\u014a\76\0\1\u014b\17\0\2\13\1\71\17\0"+
    "\1\u014a\1\u014c\21\13\1\0\3\13\10\0\2\13\1\71"+
    "\20\0\16\13\1\u014d\3\13\1\0\3\13\34\0\1\u014e"+
    "\66\0\1\u014f\26\0\2\13\1\71\20\0\7\13\1\u0150"+
    "\12\13\1\0\3\13\57\0\1\u0151\52\0\1\u0152\17\0"+
    "\2\13\1\71\20\0\16\13\1\u0153\3\13\1\0\3\13"+
    "\43\0\1\u0154\60\0\1\u0155\47\0\2\u0156\64\0\1\u0157"+
    "\65\0\1\u0158\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13034];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\5\1\6\11\21\1\7\11\1\0\2\11"+
    "\1\0\2\11\10\0\1\1\1\0\1\11\1\0\4\1"+
    "\1\0\4\1\1\0\20\1\1\0\2\1\1\11\6\0"+
    "\1\11\1\0\1\1\1\11\4\0\3\1\1\0\4\1"+
    "\1\0\22\1\1\0\3\1\10\0\1\1\1\0\3\1"+
    "\1\11\3\1\1\0\1\1\1\0\3\1\1\0\6\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\11\6\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\11\2\1\1\0\3\1"+
    "\2\0\1\11\4\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\0\4\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\11\4\1\1\0\1\1\5\0\2\1\1\0\2\1"+
    "\2\0\2\1\1\0\2\1\1\11\1\1\1\11\3\1"+
    "\1\0\1\1\1\0\1\11\1\0\2\11\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\0\1\1\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\11\1\1\1\11\1\1\2\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\11\1\0\1\11"+
    "\2\1\2\0\1\1\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).
    public String cadena ="";
    public boolean flag = false;
    public boolean flagSalto= false;
    public int contadorEtiquetas = 0 ;  // 0 estado yyinitial, 1 estado 0, 2 estado 1;


    public void iniciarCadena()
    {  
        flag = true;
        cadena = "";
    }

    public void finalizarCadena()
    {   
        flagSalto = !flagSalto;     
        Imprimir("--------------------");
        Imprimir(cadena);
        Imprimir("--------------------");
        cadena = "";        
        flag = false;        
    }
    
    public void adderror(int linea, int columna, String valor)
    {        
        listaErrores.add(new error("Lexico",valor, linea, columna));
    }
    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 

    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   

    



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerxml(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
            adderror(yyline, yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 2: 
            { /*Imprimir("Salto de linea");*/
            } 
            // fall through
          case 65: break;
          case 3: 
            { yychar=0;
            } 
            // fall through
          case 66: break;
          case 4: 
            { addLexema("identificador",yytext(), yyline, yychar);
                return new Symbol(sym.id,yychar, yyline, yytext().substring(1,yytext().length()-1));
            } 
            // fall through
          case 67: break;
          case 5: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            yybegin(YYINITIAL2);
            Imprimir("Saltando a YYINITIAL2");
            return  new Symbol(sym.slash, yychar, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 6: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            finalizarCadena();            
            return  new Symbol(sym.menorque, yychar, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 7: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            if(flag)
            {
                yybegin(CADENA);
            }      
            return  new Symbol(sym.mayorque, yychar, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 8: 
            { addLexema("simbolo", yytext(), yyline, yychar);            
            return  new Symbol(sym.igual, yychar, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 9: 
            { addLexema("simbolo", yytext(), yyline, yychar);            
            return  new Symbol(sym.llaved, yychar, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 10: 
            { addLexema("simbolo", yytext(), yyline, yychar);            
            return  new Symbol(sym.llavei, yychar, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 11: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tx, yychar, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 12: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ty, yychar, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 13: 
            { switch(yytext())
        {
            case "#":
                yybegin(COMENTARIO);
                break;
            case "<":            
                yybegin(YYINITIAL2);
                yypushback(1);                
                addLexema("cadena",cadena, yyline, yychar);     
                Imprimir("Saliendo de estado cadena.");
                return new Symbol(sym.cadena, yychar, yyline+1, cadena);            
            default:
                if(yytext().equals("\n"))
                {
                    cadena  = cadena + "\n";  
                    yychar = 1;                  
                }
                else
                {
                    cadena  = cadena + yytext();            
                }  
                //Imprimir(cadena);
                break;
        }
            } 
            // fall through
          case 76: break;
          case 14: 
            { yybegin(CADENA);        
        cadena = cadena + "#";
            } 
            // fall through
          case 77: break;
          case 15: 
            { yybegin(COMENTARIO2);/*Comentario de una sola linea*/
        Imprimir("Inicia comentario uni linea.");
            } 
            // fall through
          case 78: break;
          case 16: 
            { yybegin(COMENTARIO3);/*Comentario multilinea*/
        Imprimir("Inicia comentario multi linea.");
            } 
            // fall through
          case 79: break;
          case 17: 
            { /*Ignorar que es comentario*/
            } 
            // fall through
          case 80: break;
          case 18: 
            { yybegin(CADENA);
        //yyline++;
        Imprimir("Regresando a estado cadena");
            } 
            // fall through
          case 81: break;
          case 19: 
            { //Imprimir(yytext());
        /*Ignorar*/
            } 
            // fall through
          case 82: break;
          case 20: 
            { yybegin(COMENTARIO3);
        Imprimir("Saltar a comentario 3");
            } 
            // fall through
          case 83: break;
          case 21: 
            { yybegin(CADENA);/*Comentario de una sola linea*/
            } 
            // fall through
          case 84: break;
          case 22: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            return  new Symbol(sym.slash, yychar, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 23: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            yybegin(YYINITIAL);
            return  new Symbol(sym.mayorque, yychar, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 24: 
            { /*Imprimir(yytext());*/
            } 
            // fall through
          case 87: break;
          case 25: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tid, yychar, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 26: 
            { yybegin(CADENA);/*Comentario de una sola linea*/        
        Imprimir("Fin del comentario multi linea.");
            } 
            // fall through
          case 89: break;
          case 27: 
            { addLexema("cadena",yytext(), yyline, yychar);
                return new Symbol(sym.cadena,yychar, yyline, yytext().substring(1,yytext().length()-1));
            } 
            // fall through
          case 90: break;
          case 28: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttamanio, yychar, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 29: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.dato, yychar, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 30: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttipo, yychar, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 31: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.path, yychar, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 32: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.talto, yychar, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 33: 
            { addLexema("reservada", yytext(), yyline, yychar);      
            return  new Symbol(sym.dato, yychar, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 34: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            yybegin(CADENA);
            iniciarCadena();
            return  new Symbol(sym.ttexto, yychar, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 35: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tancho, yychar, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 36: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcolor, yychar, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 37: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.falso, yychar, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 38: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tboton, yychar, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 39: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tborde, yychar, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 40: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.ttexto, yychar, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 41: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tminimo, yychar, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 42: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmaximo, yychar, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 43: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.taccion, yychar, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 44: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnombre, yychar, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tenviar, yychar, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 46: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfuente, yychar, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 47: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            yybegin(CADENA);
            iniciarCadena();            
            return  new Symbol(sym.defecto, yychar, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 48: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcontrol, yychar, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 49: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcursiva, yychar, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 50: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnegrita, yychar, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 51: 
            { addLexema("reservada", yytext(), yyline, yychar);
            finalizarCadena();                        
            return  new Symbol(sym.tventana, yychar, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 52: 
            { addLexema("reservada", yytext(), yyline, yychar);                         
            return  new Symbol(sym.defecto, yychar, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 53: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tventana, yychar, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 54: 
            { addLexema("reservada", yytext(), yyline, yychar); 
            iniciarCadena();       
            return  new Symbol(sym.timportar, yychar, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 55: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.timportar, yychar, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 56: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.verdadero, yychar, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 57: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmultimedia, yychar, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 58: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.treferencia, yychar, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 59: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.contenedor, yychar, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 60: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.listadatos, yychar, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 61: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfinal, yychar, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 62: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tinicial, yychar, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 63: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.autoreproduccion, yychar, yyline, yytext());
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
