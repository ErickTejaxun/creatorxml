/* The following code was generated by JFlex 1.7.0 */

package Analisis.XML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Recursos.singlenton;
import Recursos.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class scannerxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;
  public static final int COMENTARIO2 = 6;
  public static final int COMENTARIO3 = 8;
  public static final int COMENTARIO4 = 10;
  public static final int YYINITIAL2 = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    59, 59, 59, 59, 59, 59, 59, 59, 59,  1,  3, 57,  1,  2, 59, 59, 
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
     1, 24,  9, 18, 19, 59, 33, 59, 25, 26, 10, 29, 28, 30,  5, 20, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 59, 59, 21, 22, 23, 59, 
    59, 42, 52, 43, 36, 45, 48, 56, 51, 35,  6,  6, 49, 40, 44, 39, 
    38,  6, 41, 54, 37, 55, 46,  6, 47, 50,  6, 17, 59, 16, 31,  6, 
    59, 42, 52, 43, 36, 45, 48, 56, 51, 35,  6,  6, 49, 40, 44, 39, 
    38,  6, 41, 54, 37, 55, 46,  6, 47, 50,  6, 15, 32, 27, 59, 59, 
    59, 59, 59, 59, 59, 57, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
    59,  8, 59, 59, 59, 59, 59, 59, 59,  8, 59, 59, 59,  8, 59, 59, 
    59,  8, 59,  8, 59, 59, 59, 59, 59, 59,  8, 59, 59, 59, 59, 59, 
    59, 59, 11,  7, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
    59, 59, 11,  7, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\1\1\7\2\1\1\10\1\11\1\12\1\13\1\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\3\1"+
    "\13\5\1\23\2\5\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\1\11\1\42\12\0\1\5\4\0"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\0\1\52\3\5\1\0\4\5\1\0\20\5"+
    "\1\0\2\5\1\53\12\0\1\4\1\0\1\54\1\0"+
    "\2\43\4\0\3\5\1\0\1\5\1\55\2\5\1\0"+
    "\22\5\1\0\3\5\14\0\1\43\1\0\1\5\1\56"+
    "\1\5\2\57\1\5\1\60\1\0\1\5\1\0\3\5"+
    "\1\0\2\5\1\61\3\5\1\0\3\5\1\0\3\5"+
    "\1\0\2\5\1\0\3\5\1\0\1\62\12\0\2\5"+
    "\1\63\1\0\1\5\1\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\64\1\0\2\5\1\65\1\0\2\5\1\0"+
    "\1\5\1\0\3\5\2\66\1\5\1\0\1\5\1\67"+
    "\1\70\2\0\1\71\6\0\1\72\2\0\2\5\2\73"+
    "\2\74\1\0\2\5\2\75\1\0\2\5\1\0\1\5"+
    "\1\76\1\0\1\5\2\77\2\5\1\100\1\0\1\5"+
    "\5\0\1\101\3\0\1\5\1\102\1\0\2\5\2\0"+
    "\2\5\1\0\1\103\1\5\2\104\2\105\1\5\1\106"+
    "\1\0\1\5\1\0\1\107\1\0\1\103\1\0\1\110"+
    "\1\0\2\111\1\0\2\5\2\0\2\5\1\0\2\5"+
    "\1\0\1\5\1\112\4\0\1\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\1\113\1\0\1\5\3\0\2\114"+
    "\2\115\2\0\2\5\1\0\1\116\2\117\1\120\1\116"+
    "\1\121\1\0\1\122\1\5\1\122\2\0\1\5\1\0"+
    "\2\123\4\0\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u01a4\0\u02d0"+
    "\0\u030c\0\u030c\0\u0348\0\u01a4\0\u0384\0\u03c0\0\u03fc\0\u0438"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u021c\0\u07bc\0\u07f8"+
    "\0\u021c\0\u0834\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u0870\0\u01a4\0\u01a4\0\u01a4\0\u0348\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0258\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u0c6c\0\u021c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u01a4\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u0ac8\0\u1590\0\u01a4\0\u15cc\0\u1608"+
    "\0\u01a4\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u021c\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u1644\0\u210c\0\u2148\0\u021c\0\u2184\0\u01a4\0\u021c\0\u21c0"+
    "\0\u021c\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u021c\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u01a4\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u021c\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u021c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u021c\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u01a4\0\u021c\0\u3048\0\u3084\0\u30c0"+
    "\0\u021c\0\u021c\0\u30fc\0\u3138\0\u01a4\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u01a4\0\u32dc\0\u3318\0\u3354\0\u3390"+
    "\0\u01a4\0\u021c\0\u01a4\0\u021c\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u021c\0\u3624"+
    "\0\u3660\0\u01a4\0\u021c\0\u369c\0\u36d8\0\u021c\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u01a4\0\u38b8\0\u38f4"+
    "\0\u3930\0\u396c\0\u021c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98"+
    "\0\u3ad4\0\u3b10\0\u3b4c\0\u021c\0\u3b88\0\u01a4\0\u021c\0\u01a4"+
    "\0\u021c\0\u3bc4\0\u021c\0\u3c00\0\u3c3c\0\u3c78\0\u01a4\0\u3cb4"+
    "\0\u01a4\0\u3cf0\0\u01a4\0\u3d2c\0\u01a4\0\u021c\0\u3d68\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\u01a4\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128"+
    "\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308"+
    "\0\u021c\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u01a4\0\u021c"+
    "\0\u01a4\0\u021c\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u021c"+
    "\0\u01a4\0\u021c\0\u01a4\0\u01a4\0\u01a4\0\u459c\0\u01a4\0\u45d8"+
    "\0\u021c\0\u4614\0\u4650\0\u468c\0\u46c8\0\u01a4\0\u021c\0\u4704"+
    "\0\u4740\0\u477c\0\u47b8\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\10\1\14\1\15\1\10"+
    "\1\16\1\17\1\20\3\10\1\21\1\10\1\22\1\23"+
    "\1\10\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\14\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\14\1\62\1\10\3\14\2\0\1\10\1\0\13\63"+
    "\3\0\23\63\1\0\22\63\1\0\4\63\1\0\1\63"+
    "\22\64\1\65\1\66\1\64\1\67\46\64\3\70\1\71"+
    "\70\70\22\72\1\0\1\73\1\72\1\74\46\72\23\75"+
    "\1\76\50\75\1\0\3\11\16\0\1\77\1\0\1\100"+
    "\1\101\1\0\1\102\12\0\2\103\1\104\1\105\2\0"+
    "\1\106\2\0\1\107\1\0\1\110\1\111\2\0\1\112"+
    "\2\0\1\113\107\0\1\13\1\114\72\0\1\115\1\0"+
    "\1\14\1\116\33\0\22\14\1\0\3\14\13\0\1\14"+
    "\63\0\12\117\1\0\61\117\14\0\1\120\57\0\12\121"+
    "\1\0\61\121\22\0\1\122\1\123\76\0\1\124\73\0"+
    "\1\125\73\0\1\126\73\0\1\127\105\0\1\130\74\0"+
    "\1\131\76\0\1\132\3\0\1\133\27\0\1\115\1\0"+
    "\1\14\1\116\33\0\1\14\1\134\3\14\1\135\14\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\7\14\1\136\2\14\1\137\7\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\32\0\1\140\1\141\6\14"+
    "\1\142\2\14\1\143\7\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\7\14\1\144\12\14\1\0"+
    "\3\14\7\0\1\115\1\0\1\14\1\116\32\0\1\145"+
    "\1\146\6\14\1\147\12\14\1\0\1\14\1\150\1\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\12\14\1\151"+
    "\7\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\10\14\1\152\1\153\4\14\1\154\3\14\1\0"+
    "\1\14\1\155\1\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\156\15\14\1\0\1\14\1\157\1\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\4\14\1\160"+
    "\5\14\1\161\7\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\11\14\1\162\10\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\12\14\1\163"+
    "\7\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\7\14\1\164\12\14\1\0\1\14\1\165\1\14"+
    "\7\0\1\115\1\0\1\14\1\116\32\0\1\166\1\167"+
    "\21\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\170\15\14\1\0\3\14\25\0\1\171"+
    "\121\0\1\172\75\0\1\173\2\0\1\174\73\0\1\175"+
    "\105\0\1\176\53\0\1\177\100\0\1\200\74\0\1\201"+
    "\60\0\2\202\77\0\1\203\30\0\1\204\73\0\1\115"+
    "\1\205\1\14\1\116\33\0\22\14\1\0\3\14\3\0"+
    "\11\117\1\206\62\117\15\0\1\207\56\0\20\121\1\206"+
    "\53\121\2\122\1\210\1\211\70\122\12\212\1\213\10\212"+
    "\1\214\50\212\46\0\1\215\31\0\1\115\1\0\1\14"+
    "\1\116\33\0\3\14\1\216\16\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\2\14\1\217\17\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\15\14\1\220\4\14\1\0\3\14\51\0\1\221\31\0"+
    "\1\115\1\0\1\14\1\116\33\0\3\14\1\222\16\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\5\14\1\223\14\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\14\14\1\224\5\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\2\14\1\225"+
    "\17\14\1\0\3\14\57\0\1\226\23\0\1\115\1\0"+
    "\1\14\1\116\33\0\11\14\1\227\10\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\14\14\1\230"+
    "\5\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\16\14\1\231\3\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\15\14\1\232\4\14\1\0"+
    "\3\14\7\0\1\115\1\0\1\14\1\116\33\0\10\14"+
    "\1\233\11\14\1\0\3\14\7\0\1\115\1\0\1\14"+
    "\1\116\33\0\10\14\1\234\11\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\2\14\1\235\17\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\2\14\1\236\17\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\11\14\1\237\4\14\1\240\3\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\6\14\1\241\13\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\5\14\1\242\14\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\22\14\1\0"+
    "\2\14\1\243\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\13\14\1\244\6\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\6\14\1\245\2\14\1\246\10\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\16\14\1\247\3\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\12\14\1\250\7\14\1\0\3\14"+
    "\70\0\2\251\11\0\1\115\1\0\1\14\1\116\33\0"+
    "\22\14\1\251\1\252\2\14\7\0\1\115\1\0\1\14"+
    "\1\116\33\0\2\14\1\253\3\14\1\254\13\14\1\0"+
    "\3\14\51\0\1\255\72\0\1\256\106\0\1\257\72\0"+
    "\1\260\75\0\1\261\66\0\1\262\75\0\1\263\71\0"+
    "\1\264\104\0\2\265\52\0\1\266\32\0\1\14\67\0"+
    "\12\267\1\0\61\267\3\0\1\211\70\0\23\212\1\270"+
    "\62\212\1\213\11\212\1\0\71\212\1\271\1\270\50\212"+
    "\47\0\1\272\30\0\1\115\1\0\1\14\1\116\33\0"+
    "\4\14\1\273\15\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\4\14\1\274\15\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\12\14\1\275"+
    "\7\14\1\0\3\14\52\0\1\276\30\0\1\115\1\0"+
    "\1\14\1\116\33\0\4\14\1\277\15\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\2\14\1\300"+
    "\17\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\20\14\1\301\1\14\1\0\3\14\45\0\2\302"+
    "\34\0\1\115\1\0\1\14\1\116\32\0\1\302\1\303"+
    "\21\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\32\0\1\304\1\305\21\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\2\14\1\306\17\14\1\0"+
    "\3\14\7\0\1\115\1\0\1\14\1\116\33\0\12\14"+
    "\1\307\7\14\1\0\3\14\7\0\1\115\1\0\1\14"+
    "\1\116\32\0\1\310\1\311\21\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\20\14\1\312\1\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\4\14\1\313\15\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\4\14\1\314\15\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\2\14\1\315"+
    "\17\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\316\15\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\22\14\1\317\1\320\2\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\21\14\1\321"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\6\14\1\322\13\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\32\0\1\323\1\324\21\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\1\14\1\325"+
    "\20\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\2\14\1\326\17\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\22\14\1\327\1\330\2\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\11\14\1\331"+
    "\10\14\1\0\3\14\50\0\1\332\32\0\1\115\1\0"+
    "\1\14\1\116\33\0\2\14\1\333\17\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\4\14\1\334"+
    "\15\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\1\14\1\335\20\14\1\0\3\14\52\0\1\336"+
    "\73\0\1\337\101\0\1\340\63\0\1\341\73\0\1\342"+
    "\73\0\1\343\70\0\2\344\75\0\1\345\73\0\1\346"+
    "\75\0\1\347\24\0\13\267\1\350\60\267\22\212\1\211"+
    "\1\270\50\212\51\0\1\351\26\0\1\115\1\0\1\14"+
    "\1\116\33\0\6\14\1\352\13\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\10\14\1\353\11\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\4\14\1\354\15\14\1\0\3\14\53\0\1\355\27\0"+
    "\1\115\1\0\1\14\1\116\33\0\5\14\1\356\14\14"+
    "\1\0\3\14\53\0\1\357\27\0\1\115\1\0\1\14"+
    "\1\116\33\0\5\14\1\360\14\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\32\0\1\361\1\362\21\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\6\14\1\363\13\14\1\0\3\14\52\0\1\364\30\0"+
    "\1\115\1\0\1\14\1\116\33\0\4\14\1\365\15\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\4\14\1\366\15\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\26\0\1\367\4\0\22\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\6\14\1\370"+
    "\3\14\1\371\7\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\6\14\1\372\13\14\1\0\3\14"+
    "\45\0\2\373\34\0\1\115\1\0\1\14\1\116\32\0"+
    "\1\373\1\374\21\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\6\14\1\375\13\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\32\0\1\376\1\377"+
    "\21\14\1\0\3\14\55\0\1\u0100\25\0\1\115\1\0"+
    "\1\14\1\116\33\0\7\14\1\u0101\12\14\1\0\3\14"+
    "\7\0\1\115\1\0\1\14\1\116\33\0\7\14\1\u0102"+
    "\12\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\7\14\1\u0103\12\14\1\0\3\14\52\0\1\u0104"+
    "\30\0\1\115\1\0\1\14\1\116\33\0\4\14\1\u0105"+
    "\15\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\2\14\1\u0106\17\14\1\0\3\14\55\0\1\u0107"+
    "\25\0\1\115\1\0\1\14\1\116\33\0\7\14\1\u0108"+
    "\12\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\11\14\1\u0109\10\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\12\14\1\u010a\7\14\1\0"+
    "\3\14\54\0\1\u010b\75\0\1\u010c\67\0\1\u010d\66\0"+
    "\2\u010e\101\0\1\u010f\3\0\1\u0110\70\0\1\u0111\73\0"+
    "\1\u0112\73\0\1\u0113\75\0\1\u0114\17\0\13\267\1\350"+
    "\1\u0115\57\267\45\0\1\u0116\32\0\1\115\1\0\1\14"+
    "\1\116\33\0\2\14\1\u0117\17\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\2\14\1\u0118\17\14"+
    "\1\0\3\14\52\0\1\u0119\30\0\1\115\1\0\1\14"+
    "\1\116\33\0\4\14\1\u011a\15\14\1\0\3\14\52\0"+
    "\1\u011b\30\0\1\115\1\0\1\14\1\116\33\0\4\14"+
    "\1\u011c\15\14\1\0\3\14\53\0\1\u011d\27\0\1\115"+
    "\1\0\1\14\1\116\33\0\5\14\1\u011e\14\14\1\0"+
    "\3\14\7\0\1\115\1\0\1\14\1\116\33\0\12\14"+
    "\1\u011f\7\14\1\0\3\14\57\0\1\u0120\23\0\1\115"+
    "\1\0\1\14\1\116\33\0\11\14\1\u0121\10\14\1\0"+
    "\3\14\54\0\1\u0122\26\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\u0123\15\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\11\14\1\u0124\10\14\1\0"+
    "\3\14\61\0\1\u0125\21\0\1\115\1\0\1\14\1\116"+
    "\33\0\13\14\1\u0126\6\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\12\14\1\u0127\7\14\1\0"+
    "\3\14\50\0\1\u0128\32\0\1\115\1\0\1\14\1\116"+
    "\33\0\2\14\1\u0129\17\14\1\0\3\14\54\0\1\u012a"+
    "\26\0\1\115\1\0\1\14\1\116\33\0\6\14\1\u012b"+
    "\13\14\1\0\3\14\7\0\1\115\1\0\1\14\1\116"+
    "\33\0\1\14\1\u012c\20\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\11\14\1\u012d\10\14\1\0"+
    "\3\14\7\0\1\115\1\0\1\14\1\116\33\0\12\14"+
    "\1\u012e\7\14\1\0\3\14\47\0\1\u012f\33\0\1\115"+
    "\1\0\1\14\1\116\33\0\1\14\1\u0130\20\14\1\0"+
    "\3\14\50\0\1\u0131\73\0\1\u0132\76\0\1\u0133\72\0"+
    "\1\u0134\100\0\1\u0135\70\0\1\u0136\76\0\1\u0137\63\0"+
    "\1\u0138\27\0\13\267\1\350\2\267\1\206\55\267\52\0"+
    "\1\u0139\25\0\1\115\1\0\1\14\1\116\33\0\7\14"+
    "\1\u013a\12\14\1\0\3\14\7\0\1\115\1\0\1\14"+
    "\1\116\33\0\4\14\1\u013b\15\14\1\0\3\14\60\0"+
    "\1\u013c\22\0\1\115\1\0\1\14\1\116\33\0\12\14"+
    "\1\u013d\7\14\1\0\3\14\7\0\1\115\1\0\1\14"+
    "\1\116\33\0\11\14\1\u013e\10\14\1\0\3\14\45\0"+
    "\2\u013f\14\0\1\u0140\17\0\1\115\1\0\1\14\1\116"+
    "\32\0\1\u013f\1\u0141\14\14\1\u0142\4\14\1\0\3\14"+
    "\60\0\1\u0143\22\0\1\115\1\0\1\14\1\116\33\0"+
    "\16\14\1\u0144\3\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\12\14\1\u0145\7\14\1\0\3\14"+
    "\55\0\1\u0146\25\0\1\115\1\0\1\14\1\116\33\0"+
    "\7\14\1\u0147\12\14\1\0\3\14\55\0\1\u0148\25\0"+
    "\1\115\1\0\1\14\1\116\33\0\7\14\1\u0149\12\14"+
    "\1\0\3\14\7\0\1\115\1\0\1\14\1\116\33\0"+
    "\12\14\1\u014a\7\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\7\14\1\u014b\12\14\1\0\3\14"+
    "\55\0\1\u014c\25\0\1\115\1\0\1\14\1\116\33\0"+
    "\7\14\1\u014d\12\14\1\0\3\14\55\0\1\u014e\70\0"+
    "\1\u014f\101\0\1\u0150\77\0\1\u0151\67\0\1\u0152\70\0"+
    "\1\u0153\73\0\1\u0154\72\0\1\u0155\26\0\1\115\1\0"+
    "\1\14\1\116\33\0\6\14\1\u0156\13\14\1\0\3\14"+
    "\47\0\1\u0157\33\0\1\115\1\0\1\14\1\116\33\0"+
    "\1\14\1\u0158\20\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\10\14\1\u0159\11\14\1\0\3\14"+
    "\57\0\1\u015a\61\0\2\u015b\34\0\1\115\1\0\1\14"+
    "\1\116\33\0\11\14\1\u015c\10\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\32\0\1\u015b\1\u015d\21\14"+
    "\1\0\3\14\51\0\1\u015e\31\0\1\115\1\0\1\14"+
    "\1\116\33\0\1\14\1\u015f\20\14\1\0\3\14\7\0"+
    "\1\115\1\0\1\14\1\116\33\0\6\14\1\u0160\13\14"+
    "\1\0\3\14\50\0\1\u0161\32\0\1\115\1\0\1\14"+
    "\1\116\33\0\2\14\1\u0162\17\14\1\0\3\14\54\0"+
    "\1\u0163\66\0\1\u0164\73\0\1\u0165\74\0\1\u0166\70\0"+
    "\2\u0167\34\0\1\115\1\0\1\14\1\116\32\0\1\u0167"+
    "\1\u0168\21\14\1\0\3\14\7\0\1\115\1\0\1\14"+
    "\1\116\32\0\1\u0169\1\u016a\21\14\1\0\3\14\45\0"+
    "\2\u016b\104\0\1\u016c\23\0\1\115\1\0\1\14\1\116"+
    "\32\0\1\u016b\1\u016d\21\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\11\14\1\u016e\10\14\1\0"+
    "\3\14\54\0\1\u016f\26\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\u0170\15\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\4\14\1\u0171\15\14\1\0"+
    "\3\14\52\0\1\u0172\30\0\1\115\1\0\1\14\1\116"+
    "\33\0\4\14\1\u0173\15\14\1\0\3\14\45\0\2\u0174"+
    "\77\0\1\u0175\73\0\1\u0176\76\0\1\u0177\25\0\1\115"+
    "\1\0\1\14\1\116\33\0\7\14\1\u0178\12\14\1\0"+
    "\3\14\55\0\1\u0179\25\0\1\115\1\0\1\14\1\116"+
    "\33\0\7\14\1\u017a\12\14\1\0\3\14\56\0\1\u017b"+
    "\72\0\1\u017c\25\0\1\115\1\0\1\14\1\116\33\0"+
    "\10\14\1\u017d\11\14\1\0\3\14\7\0\1\115\1\0"+
    "\1\14\1\116\33\0\7\14\1\u017e\12\14\1\0\3\14"+
    "\52\0\1\u017f\30\0\1\115\1\0\1\14\1\116\33\0"+
    "\6\14\1\u0180\13\14\1\0\3\14\70\0\2\u0181\11\0"+
    "\1\115\1\0\1\14\1\116\33\0\22\14\1\u0181\1\u0182"+
    "\2\14\55\0\1\u0183\72\0\1\u0184\107\0\2\u0185\47\0"+
    "\2\u0186\111\0\1\u0187\16\0\1\115\1\0\1\14\1\116"+
    "\32\0\1\u0186\1\u0188\21\14\1\0\3\14\7\0\1\115"+
    "\1\0\1\14\1\116\33\0\16\14\1\u0189\3\14\1\0"+
    "\3\14\47\0\1\u018a\101\0\1\u018b\25\0\1\115\1\0"+
    "\1\14\1\116\33\0\7\14\1\u018c\12\14\1\0\3\14"+
    "\72\0\1\u018d\65\0\1\u018e\16\0\1\115\1\0\1\14"+
    "\1\116\33\0\16\14\1\u018f\3\14\1\0\3\14\56\0"+
    "\1\u0190\73\0\1\u0191\62\0\2\u0192\77\0\1\u0193\100\0"+
    "\1\u0194\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\4\1\1\11\4\1\1\11\4\1\7\11"+
    "\23\1\10\11\1\1\3\11\1\0\3\11\12\0\1\1"+
    "\4\0\1\1\1\0\7\11\1\0\4\1\1\0\4\1"+
    "\1\0\20\1\1\0\2\1\1\11\12\0\1\1\1\0"+
    "\1\11\1\0\1\1\1\11\4\0\3\1\1\0\4\1"+
    "\1\0\22\1\1\0\3\1\14\0\1\1\1\0\3\1"+
    "\1\11\3\1\1\0\1\1\1\0\3\1\1\0\6\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\11\12\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\11\2\1\1\0\3\1"+
    "\2\0\1\11\6\0\1\11\2\0\2\1\1\11\1\1"+
    "\1\11\1\1\1\0\4\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\4\1\1\0\1\1\5\0\1\11"+
    "\3\0\2\1\1\0\2\1\2\0\2\1\1\0\2\1"+
    "\1\11\1\1\1\11\3\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\4\0\1\1\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\3\0\1\11\1\1\1\11\1\1\2\0"+
    "\2\1\1\0\1\1\1\11\1\1\3\11\1\0\1\11"+
    "\2\1\2\0\1\1\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).
    public String cadena ="";
    public boolean flag = false;
    public boolean flagSalto= false;
    public int contadorEtiquetas = 0 ;  // 0 estado yyinitial, 1 estado 0, 2 estado 1;


    public void iniciarCadena()
    {  
        flag = true;
        cadena = "";
    }

    public void finalizarCadena()
    {   
        flagSalto = !flagSalto;     
        Imprimir("--------------------");
        Imprimir(cadena);
        Imprimir("--------------------");
        cadena = "";        
        flag = false;        
    }
    
    public void adderror(int linea, int columna, String valor)
    {        
        singlenton.addErrores(new error("Lexico",valor, linea, columna));
    }
    public void adderror(int linea, int columna, String valor, String desc)
    {        
        singlenton.addErrores(new error("Lexico",linea, columna, valor, desc));
    }    
    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 

    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   

    



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerxml(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
            adderror(yyline, yychar, yytext().toLowerCase());
            } 
            // fall through
          case 85: break;
          case 2: 
            { /*Imprimir("Salto de linea");*/
            } 
            // fall through
          case 86: break;
          case 3: 
            { yychar=0;
            } 
            // fall through
          case 87: break;
          case 4: 
            { addLexema("numerico",yytext(), yyline, yychar);
                return new Symbol(sym.numero,yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 88: break;
          case 5: 
            { addLexema("identificador",yytext(), yyline, yychar);
                return new Symbol(sym.id,yychar, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 6: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.multi, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 90: break;
          case 7: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.llavei, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 91: break;
          case 8: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            yybegin(YYINITIAL2);
            Imprimir("Saltando a YYINITIAL2");
            return  new Symbol(sym.slash, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 92: break;
          case 9: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            finalizarCadena();            
            return  new Symbol(sym.menorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 93: break;
          case 10: 
            { addLexema("simbolo", yytext(), yyline, yychar);            
            return  new Symbol(sym.igual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 94: break;
          case 11: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            if(flag)
            {
                yybegin(CADENA);
            }      
            return  new Symbol(sym.mayorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 95: break;
          case 12: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.pari, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 96: break;
          case 13: 
            { addLexema("simbolo", yytext(), yyline, yychar);        
            return  new Symbol(sym.pard, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 97: break;
          case 14: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.llaved, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 98: break;
          case 15: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.coma, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 99: break;
          case 16: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.mas, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 100: break;
          case 17: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.menos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 101: break;
          case 18: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.potencia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 102: break;
          case 19: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tx, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 103: break;
          case 20: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ty, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 104: break;
          case 21: 
            { switch(yytext())
        {
            case "#":
                yybegin(COMENTARIO);
                break;
            case "<":            
                yybegin(YYINITIAL2);
                yypushback(1);                
                addLexema("cadena",cadena, yyline, yychar);     
                Imprimir("Saliendo de estado cadena.");
                if(!cadena.trim().equals(""))
                {
                    Imprimir("Retornando cadena ------------" + cadena + "*******************");
                    return new Symbol(sym.cadena, yychar, yyline, cadena.trim());
                }   
                yybegin(YYINITIAL);
                Imprimir("No se retornó cadena.");
            default:
                if(yytext().equals("\n"))
                {
                    cadena  = cadena + "\n";  
                    yychar = 1;                  
                }
                else
                {
                    cadena  = cadena + yytext();            
                }  
                //Imprimir(cadena);
                break;
        }
            } 
            // fall through
          case 105: break;
          case 22: 
            { yybegin(CADENA);        
        cadena = cadena + "#";
            } 
            // fall through
          case 106: break;
          case 23: 
            { yybegin(COMENTARIO2);/*Comentario de una sola linea*/
        Imprimir("Inicia comentario uni linea.");
            } 
            // fall through
          case 107: break;
          case 24: 
            { yybegin(COMENTARIO3);/*Comentario multilinea*/
        Imprimir("Inicia comentario multi linea.");
            } 
            // fall through
          case 108: break;
          case 25: 
            { adderror(yyline, yychar, yytext(),"Falta simbolo para cierre de comentario.");
        yybegin(CADENA);
        yypushback(1);
            } 
            // fall through
          case 109: break;
          case 26: 
            { /*Ignorar que es comentario*/
            } 
            // fall through
          case 110: break;
          case 27: 
            { yybegin(CADENA);
        //yyline++;
        Imprimir("Regresando a estado cadena");
            } 
            // fall through
          case 111: break;
          case 28: 
            { //Imprimir(yytext().toLowerCase());
        /*Ignorar*/
            } 
            // fall through
          case 112: break;
          case 29: 
            { //cadena += "$";
        adderror(yyline, yychar, yytext(),"Falta simbolo para cierre de comentario.");
        yybegin(CADENA);/*Comentario de una sola linea*/        
        Imprimir("Fin del comentario multi linea.");
            } 
            // fall through
          case 113: break;
          case 30: 
            { yybegin(CADENA);
        yypushback(1);
            } 
            // fall through
          case 114: break;
          case 31: 
            { yybegin(COMENTARIO3);
        Imprimir("Saltar a comentario 3");
            } 
            // fall through
          case 115: break;
          case 32: 
            { yybegin(CADENA);/*Comentario de una sola linea*/
            } 
            // fall through
          case 116: break;
          case 33: 
            { addLexema("simbolo", yytext(), yyline, yychar);  
            return  new Symbol(sym.slash, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 117: break;
          case 34: 
            { addLexema("simbolo", yytext(), yyline, yychar);      
            yybegin(YYINITIAL);
            return  new Symbol(sym.mayorque, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 118: break;
          case 35: 
            { /*Imprimir(yytext().toLowerCase());*/
            } 
            // fall through
          case 119: break;
          case 36: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.menorigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 120: break;
          case 37: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.igualigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 121: break;
          case 38: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.mayorigual, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 122: break;
          case 39: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.diferente, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 123: break;
          case 40: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.or, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 124: break;
          case 41: 
            { addLexema("simbolo", yytext(), yyline, yychar);                        
            return  new Symbol(sym.and, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 125: break;
          case 42: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tid, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 126: break;
          case 43: 
            { yybegin(CADENA);/*Comentario de una sola linea*/        
        Imprimir("Fin del comentario multi linea.");
            } 
            // fall through
          case 127: break;
          case 44: 
            { addLexema("cadena",yytext(), yyline, yychar);
                return new Symbol(sym.cadena,yychar, yyline, yytext().substring(1,yytext().length()-1));
            } 
            // fall through
          case 128: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttamanio, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 129: break;
          case 46: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            iniciarCadena();          
            return  new Symbol(sym.dato, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 130: break;
          case 47: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.ttipo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 131: break;
          case 48: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tpath, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 132: break;
          case 49: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.talto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 133: break;
          case 50: 
            { addLexema("reservada", yytext(), yyline, yychar);      
            return  new Symbol(sym.dato, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 134: break;
          case 51: 
            { addLexema("reservada", yytext(), yyline, yychar);              
            iniciarCadena();
            return  new Symbol(sym.ttexto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 135: break;
          case 52: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tancho, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 136: break;
          case 53: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcolor, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 137: break;
          case 54: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.falso, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 138: break;
          case 55: 
            { addLexema("reservada", yytext(), yyline, yychar); 
            iniciarCadena();           
            return  new Symbol(sym.tboton, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 139: break;
          case 56: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tborde, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 140: break;
          case 57: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.ttexto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 141: break;
          case 58: 
            { addLexema("reservada", yytext(), yyline, yychar);                       
            return  new Symbol(sym.tboton, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 142: break;
          case 59: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tminimo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 143: break;
          case 60: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmaximo, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 144: break;
          case 61: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.taccion, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 145: break;
          case 62: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnombre, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 146: break;
          case 63: 
            { addLexema("reservada", yytext(), yyline, yychar);    
            iniciarCadena();
            return  new Symbol(sym.tenviar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 147: break;
          case 64: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfuente, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 148: break;
          case 65: 
            { addLexema("reservada", yytext(), yyline, yychar);                       
            return  new Symbol(sym.tenviar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 149: break;
          case 66: 
            { addLexema("reservada", yytext(), yyline, yychar);                        
            iniciarCadena();            
            return  new Symbol(sym.defecto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 150: break;
          case 67: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcontrol, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 151: break;
          case 68: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tcursiva, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 152: break;
          case 69: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tnegrita, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 153: break;
          case 70: 
            { addLexema("reservada", yytext(), yyline, yychar);
            finalizarCadena();                        
            return  new Symbol(sym.tventana, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 154: break;
          case 71: 
            { addLexema("reservada", yytext(), yyline, yychar);                         
            return  new Symbol(sym.defecto, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 155: break;
          case 72: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tventana, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 156: break;
          case 73: 
            { addLexema("reservada", yytext(), yyline, yychar); 
            iniciarCadena();       
            return  new Symbol(sym.timportar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 157: break;
          case 74: 
            { addLexema("reservada", yytext(), yyline, yychar);  
            return  new Symbol(sym.timportar, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 158: break;
          case 75: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.verdadero, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 159: break;
          case 76: 
            { addLexema("reservada", yytext(), yyline, yychar);
            finalizarCadena();            
            return  new Symbol(sym.tmultimedia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 160: break;
          case 77: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.treferencia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 161: break;
          case 78: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.contenedor, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 162: break;
          case 79: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.listadatos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 163: break;
          case 80: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tmultimedia, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 164: break;
          case 81: 
            { addLexema("reservada", yytext(), yyline, yychar);      
            return  new Symbol(sym.listadatos, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 165: break;
          case 82: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tfinal, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 166: break;
          case 83: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tinicial, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 167: break;
          case 84: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tautoreproduccion, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
