package Analisis.XML; // Paquete
import java_cup.runtime.*; 
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.XML.AST.*;

parser code
{:      
    public ArrayList<NodoXML> lista = new ArrayList<NodoXML>();
    public ArrayList<error> listaErrores = new ArrayList<error>();
    /*
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
        listaErrores.add(new error("Sintactico",s.value.toString(), s.right+1, s.left+1));
    }*/

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }*/

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        listaErrores.add(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }
    
:}


/*Terminales*/

terminal String menorque, mayorque, slash, igual, llaved, llavei,tid, ttipo,
timportar,  tcolor, tinicial, tventana, tx, ty, tancho, tborde, falso, verdadero,
contenedor, tnombre, tfuente, ttamanio, tnegrita, trecursiva, ttexto, tcontrol, tmaximo, 
tminimo, tmultimedia, tenviar, tboton, taccion, treferencia, defecto, dato, listadatos,talto,tcursiva , tfinal,
path, autoreproduccion, cadena, id;

/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal LEXP, EXP;
non terminal Contenedor CONTENEDOR;
non terminal ArrayList<NodoXML> CONTENIDO, LIMPORTAR;
non terminal Importar IMPORTAR;
non terminal Ventana VENTANA, EVENTANA;

/* Precedencia 
precedence left suma, resta;
precedence left multi, div;
precedence left potencia;
*/
/* ­­­­­­­­­­­­­­ Definición de la gramatica  ­­­­­­­­­­­ */
start with INICIO; // indicamos con qué producción debe empezar la gramatica.    

INICIO::= VENTANA:vent {:lista.add(vent);:} 
        | LIMPORTAR:l VENTANA:vent {: lista = l; lista.add(vent); :}
        | error VENTANA:vent {: ArrayList<NodoXML> lista = new ArrayList<NodoXML>();  lista.add(vent); :}
        | LIMPORTAR:l error {: lista = l; :};


LIMPORTAR ::= LIMPORTAR:l IMPORTAR:i{: l.add(i); RESULT = l;:}
            | IMPORTAR:imp {:ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(imp); RESULT = l;:}            
;

IMPORTAR::= menorque timportar mayorque cadena:cad 
            menorque slash timportar mayorque 
            {:RESULT = new Importar(cad, cadleft, cadright);:}
;

VENTANA::= menorque:i tventana EVENTANA:vent mayorque  CONTENIDO
           menorque slash tventana mayorque
           {: vent.setLinea(ileft); vent.setColumna(iright); RESULT= vent;:}  
          |menorque:i tventana /*EVENTANA:vent*/ mayorque  CONTENIDO
           menorque slash tventana mayorque
           {: RESULT= new Ventana(ileft,iright);:}                 
;

EVENTANA::= EVENTANA:v tid igual cadena:valor {:v.setId(valor); RESULT= v;:}
                   |EVENTANA:v ttipo igual cadena:valor {:v.setTipo(valor); RESULT= v;:}
                   |EVENTANA:v tcolor igual cadena:valor {:v.setColor(valor); RESULT= v;:}
                   |EVENTANA:v tinicial igual cadena:valor {:v.setAccioninicial(valor); RESULT= v;:}
                   |EVENTANA:v tfinal igual cadena:valor {:v.setAccionfinal(valor); RESULT= v;:}
                   |tid igual cadena :valor {:Ventana v = new Ventana(); v.setId(valor); RESULT= v;:}
                   |ttipo igual cadena:valor {:Ventana v = new Ventana(); v.setTipo(valor); RESULT= v;:}
                   |tcolor igual cadena:valor {:Ventana v = new Ventana(); v.setColor(valor); RESULT= v;:}
                   |tinicial igual cadena:valor {:Ventana v = new Ventana(); v.setAccioninicial(valor); RESULT= v;:}
                   |tfinal igual cadena:valor {:Ventana v = new Ventana(); v.setAccionfinal(valor); RESULT= v;:}
;

CONTENIDO::= CONTENIDO:l CONTENEDOR {:RESULT = l;:}
            | CONTENEDOR:c {: ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(c); RESULT = l;:}
            | error
;

CONTENEDOR::= menorque:i contenedor mayorque 
            menorque slash contenedor mayorque 
            {: RESULT = new Contenedor(ileft,iright);:}            
;





