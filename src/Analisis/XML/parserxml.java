
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.XML;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.XML.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\302\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\010\004" +
    "\000\002\010\003\000\002\012\012\000\002\011\004\000" +
    "\002\011\003\000\002\013\013\000\002\013\012\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\005\013\000\002\005\012\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\003\003\000\002\003\003\000\002\015\004\000" +
    "\002\015\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\016\013\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\024\012\000\002\024\013\000" +
    "\002\024\014\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\004\005\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\006\000\002\043\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\012\000\002\023\012\000\002\023\013\000\002\027\004" +
    "\000\002\027\003\000\002\026\012\000\002\031\012\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\032\013\000\002\033\006\000\002\033" +
    "\006\000\002\033\006\000\002\033\006\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\033\006\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\003\000\002\034\013" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\006\003\005\004\010\001\002\000\006\002" +
    "\ufff8\004\ufff8\001\002\000\004\004\017\001\002\000\006" +
    "\002\000\004\017\001\002\000\006\003\ufffb\004\ufffb\001" +
    "\002\000\006\014\u0220\017\020\001\002\000\004\002\u021f" +
    "\001\002\000\006\003\013\004\010\001\002\000\004\002" +
    "\ufffd\001\002\000\006\002\uffff\004\017\001\002\000\006" +
    "\003\ufffc\004\ufffc\001\002\000\006\002\ufff9\004\ufff9\001" +
    "\002\000\004\017\020\001\002\000\022\005\021\012\022" +
    "\013\024\015\027\016\023\022\031\047\030\051\025\001" +
    "\002\000\006\003\050\004\053\001\002\000\004\007\u0218" +
    "\001\002\000\004\007\u0216\001\002\000\004\007\u0214\001" +
    "\002\000\004\007\u0212\001\002\000\022\005\047\012\045" +
    "\013\044\015\046\016\040\022\041\047\043\051\042\001" +
    "\002\000\004\007\036\001\002\000\004\007\034\001\002" +
    "\000\004\007\032\001\002\000\004\056\033\001\002\000" +
    "\022\005\uffea\012\uffea\013\uffea\015\uffea\016\uffea\022\uffea" +
    "\047\uffea\051\uffea\001\002\000\004\056\035\001\002\000" +
    "\022\005\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\022\uffeb" +
    "\047\uffeb\051\uffeb\001\002\000\004\054\037\001\002\000" +
    "\022\005\uffec\012\uffec\013\uffec\015\uffec\016\uffec\022\uffec" +
    "\047\uffec\051\uffec\001\002\000\004\007\u0210\001\002\000" +
    "\004\007\u020e\001\002\000\004\007\u020c\001\002\000\004" +
    "\007\u020a\001\002\000\004\007\u0208\001\002\000\004\007" +
    "\u0206\001\002\000\004\007\u0204\001\002\000\006\003\050" +
    "\004\053\001\002\000\004\004\uffe5\001\002\000\004\004" +
    "\u0200\001\002\000\004\004\uffe6\001\002\000\004\026\054" +
    "\001\002\000\020\012\063\015\064\020\056\021\055\022" +
    "\060\023\057\047\061\001\002\000\004\007\u01fd\001\002" +
    "\000\004\007\u01fb\001\002\000\004\007\u01f9\001\002\000" +
    "\004\007\u01f7\001\002\000\004\007\u01f5\001\002\000\022" +
    "\005\077\012\076\015\100\020\072\021\071\022\073\023" +
    "\074\047\075\001\002\000\004\007\067\001\002\000\004" +
    "\007\065\001\002\000\004\054\066\001\002\000\022\005" +
    "\uffd6\012\uffd6\015\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\047\uffd6\001\002\000\004\054\070\001\002\000\022\005" +
    "\uffdb\012\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\047\uffdb\001\002\000\004\007\u01f3\001\002\000\004\007" +
    "\u01f1\001\002\000\004\007\u01ef\001\002\000\004\007\u01ed" +
    "\001\002\000\004\007\u01eb\001\002\000\004\007\u01e9\001" +
    "\002\000\006\003\111\004\113\001\002\000\004\007\101" +
    "\001\002\000\004\054\102\001\002\000\022\005\uffdd\012" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\047\uffdd" +
    "\001\002\000\006\003\uffcd\004\uffcd\001\002\000\006\003" +
    "\uffd0\004\uffd0\001\002\000\006\003\111\004\u01e5\001\002" +
    "\000\006\003\uffce\004\uffce\001\002\000\006\003\uffcc\004" +
    "\uffcc\001\002\000\006\003\uffd1\004\uffd1\001\002\000\006" +
    "\003\uffcb\004\uffcb\001\002\000\006\003\uffcf\004\uffcf\001" +
    "\002\000\016\006\115\033\116\034\120\037\114\040\117" +
    "\041\121\001\002\000\024\003\u01b2\013\u01b1\020\u01b0\021" +
    "\u01af\022\u01b6\027\u01b3\047\u01b5\052\u01b4\053\u01ad\001\002" +
    "\000\004\026\u01ab\001\002\000\022\015\u017c\020\u0178\021" +
    "\u0177\027\u017a\030\u017b\031\u0179\032\u0175\050\u0176\001\002" +
    "\000\024\003\u013f\020\u013e\021\u013d\022\u0145\027\u0141\030" +
    "\u0143\042\u0140\043\u0142\047\u0144\001\002\000\036\013\275" +
    "\015\302\020\271\021\270\022\304\027\300\030\303\031" +
    "\274\032\266\035\276\036\273\042\277\047\301\050\267" +
    "\001\002\000\024\003\125\020\124\021\123\022\133\027" +
    "\127\030\131\042\126\043\132\047\130\001\002\000\024" +
    "\005\225\020\227\021\226\022\235\027\231\030\233\042" +
    "\230\043\232\047\234\001\002\000\004\007\223\001\002" +
    "\000\004\007\221\001\002\000\024\005\uff54\020\uff54\021" +
    "\uff54\022\uff54\027\uff54\030\uff54\042\uff54\043\uff54\047\uff54" +
    "\001\002\000\004\007\146\001\002\000\004\007\144\001" +
    "\002\000\004\007\142\001\002\000\004\007\140\001\002" +
    "\000\004\007\136\001\002\000\004\007\134\001\002\000" +
    "\004\056\135\001\002\000\024\005\uff58\020\uff58\021\uff58" +
    "\022\uff58\027\uff58\030\uff58\042\uff58\043\uff58\047\uff58\001" +
    "\002\000\004\054\137\001\002\000\024\005\uff57\020\uff57" +
    "\021\uff57\022\uff57\027\uff57\030\uff57\042\uff57\043\uff57\047" +
    "\uff57\001\002\000\004\054\141\001\002\000\024\005\uff55" +
    "\020\uff55\021\uff55\022\uff55\027\uff55\030\uff55\042\uff55\043" +
    "\uff55\047\uff55\001\002\000\004\056\143\001\002\000\024" +
    "\005\uff59\020\uff59\021\uff59\022\uff59\027\uff59\030\uff59\042" +
    "\uff59\043\uff59\047\uff59\001\002\000\004\054\145\001\002" +
    "\000\024\005\uff5c\020\uff5c\021\uff5c\022\uff5c\027\uff5c\030" +
    "\uff5c\042\uff5c\043\uff5c\047\uff5c\001\002\000\004\011\150" +
    "\001\002\000\024\005\uff56\020\uff56\021\uff56\022\uff56\027" +
    "\uff56\030\uff56\042\uff56\043\uff56\047\uff56\001\002\000\014" +
    "\024\155\025\156\054\153\055\151\056\157\001\002\000" +
    "\044\004\uff86\005\uff86\006\uff86\010\uff86\057\uff86\060\uff86" +
    "\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\215\073\uff86\001\002\000\042" +
    "\004\uff83\005\uff83\006\uff83\010\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\073\uff83\001\002\000\042\004\uff85\005" +
    "\uff85\006\uff85\010\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\073\uff85\001\002\000\042\004\uff84\005\uff84\006\uff84" +
    "\010\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\073\uff84" +
    "\001\002\000\106\004\uffd3\005\uffd3\006\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\036\uffd3\042" +
    "\uffd3\047\uffd3\050\uffd3\052\uffd3\053\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\071\uffd3\073\uffd3\001\002\000\106\004\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\012\uffd4\013\uffd4\015\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\035\uffd4\036\uffd4\042\uffd4\047\uffd4\050\uffd4\052" +
    "\uffd4\053\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\073" +
    "\uffd4\001\002\000\042\004\uff87\005\uff87\006\uff87\010\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\070\uff87\071\uff87\073\uff87\001\002" +
    "\000\014\010\uff95\057\uff95\064\uff95\065\uff95\073\uff95\001" +
    "\002\000\042\004\206\005\175\006\176\010\uff93\057\uff93" +
    "\060\205\061\177\062\201\063\173\064\uff93\065\uff93\066" +
    "\174\067\204\070\202\071\200\073\uff93\001\002\000\006" +
    "\010\170\057\171\001\002\000\014\010\uff98\057\uff98\064" +
    "\165\065\164\073\uff98\001\002\000\014\024\155\025\156" +
    "\054\153\055\151\056\157\001\002\000\014\024\155\025" +
    "\156\054\153\055\151\056\157\001\002\000\014\010\uff97" +
    "\057\uff97\064\uff97\065\uff97\073\uff97\001\002\000\014\010" +
    "\uff96\057\uff96\064\165\065\uff96\073\uff96\001\002\000\050" +
    "\005\uff9a\012\uff9a\013\uff9a\015\uff9a\016\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\035\uff9a" +
    "\036\uff9a\042\uff9a\043\uff9a\047\uff9a\050\uff9a\051\uff9a\001" +
    "\002\000\014\024\155\025\156\054\153\055\151\056\157" +
    "\001\002\000\014\010\uff99\057\uff99\064\165\065\164\073" +
    "\uff99\001\002\000\014\024\155\025\156\054\153\055\151" +
    "\056\157\001\002\000\014\024\uff90\025\uff90\054\uff90\055" +
    "\uff90\056\uff90\001\002\000\014\024\uff91\025\uff91\054\uff91" +
    "\055\uff91\056\uff91\001\002\000\014\024\155\025\156\054" +
    "\153\055\151\056\157\001\002\000\014\024\155\025\156" +
    "\054\153\055\151\056\157\001\002\000\014\024\uff8e\025" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000\014\024\155" +
    "\025\156\054\153\055\151\056\157\001\002\000\014\024" +
    "\uff8d\025\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000\014" +
    "\024\155\025\156\054\153\055\151\056\157\001\002\000" +
    "\014\024\uff8f\025\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002" +
    "\000\014\024\155\025\156\054\153\055\151\056\157\001" +
    "\002\000\014\024\uff92\025\uff92\054\uff92\055\uff92\056\uff92" +
    "\001\002\000\042\004\uff8c\005\uff8c\006\176\010\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\062\201\063\173\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\073\uff8c\001\002\000" +
    "\026\006\176\010\uff94\057\uff94\060\205\061\177\062\201" +
    "\063\173\064\uff94\065\uff94\073\uff94\001\002\000\042\004" +
    "\uff8a\005\uff8a\006\uff8a\010\uff8a\057\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\071\uff8a\073\uff8a\001\002\000\042\004\uff8b\005\uff8b" +
    "\006\176\010\uff8b\057\uff8b\060\uff8b\061\uff8b\062\201\063" +
    "\173\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\073\uff8b\001\002\000\042\004\uff89\005\uff89\006\uff89\010" +
    "\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\073\uff89\001" +
    "\002\000\042\004\uff88\005\uff88\006\uff88\010\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\073\uff88\001\002\000\016" +
    "\024\155\025\156\054\153\055\151\056\157\073\216\001" +
    "\002\000\042\004\uff81\005\uff81\006\uff81\010\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\073\uff81\001\002\000\006" +
    "\057\171\073\220\001\002\000\042\004\uff82\005\uff82\006" +
    "\uff82\010\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\073" +
    "\uff82\001\002\000\004\056\222\001\002\000\024\005\uff5b" +
    "\020\uff5b\021\uff5b\022\uff5b\027\uff5b\030\uff5b\042\uff5b\043" +
    "\uff5b\047\uff5b\001\002\000\004\056\224\001\002\000\024" +
    "\005\uff5a\020\uff5a\021\uff5a\022\uff5a\027\uff5a\030\uff5a\042" +
    "\uff5a\043\uff5a\047\uff5a\001\002\000\006\004\261\054\257" +
    "\001\002\000\004\007\254\001\002\000\004\007\252\001" +
    "\002\000\004\007\250\001\002\000\004\007\246\001\002" +
    "\000\004\007\244\001\002\000\004\007\242\001\002\000" +
    "\004\007\240\001\002\000\004\007\236\001\002\000\004" +
    "\056\237\001\002\000\024\005\uff60\020\uff60\021\uff60\022" +
    "\uff60\027\uff60\030\uff60\042\uff60\043\uff60\047\uff60\001\002" +
    "\000\004\056\241\001\002\000\024\005\uff61\020\uff61\021" +
    "\uff61\022\uff61\027\uff61\030\uff61\042\uff61\043\uff61\047\uff61" +
    "\001\002\000\004\054\243\001\002\000\024\005\uff5d\020" +
    "\uff5d\021\uff5d\022\uff5d\027\uff5d\030\uff5d\042\uff5d\043\uff5d" +
    "\047\uff5d\001\002\000\004\054\245\001\002\000\024\005" +
    "\uff5f\020\uff5f\021\uff5f\022\uff5f\027\uff5f\030\uff5f\042\uff5f" +
    "\043\uff5f\047\uff5f\001\002\000\004\054\247\001\002\000" +
    "\024\005\uff64\020\uff64\021\uff64\022\uff64\027\uff64\030\uff64" +
    "\042\uff64\043\uff64\047\uff64\001\002\000\004\011\150\001" +
    "\002\000\024\005\uff5e\020\uff5e\021\uff5e\022\uff5e\027\uff5e" +
    "\030\uff5e\042\uff5e\043\uff5e\047\uff5e\001\002\000\004\056" +
    "\253\001\002\000\024\005\uff63\020\uff63\021\uff63\022\uff63" +
    "\027\uff63\030\uff63\042\uff63\043\uff63\047\uff63\001\002\000" +
    "\004\056\255\001\002\000\024\005\uff62\020\uff62\021\uff62" +
    "\022\uff62\027\uff62\030\uff62\042\uff62\043\uff62\047\uff62\001" +
    "\002\000\004\004\uff40\001\002\000\004\004\uff41\001\002" +
    "\000\004\004\262\001\002\000\004\033\116\001\002\000" +
    "\004\006\263\001\002\000\004\041\264\001\002\000\004" +
    "\005\265\001\002\000\006\003\uff65\004\uff65\001\002\000" +
    "\004\007\u013a\001\002\000\004\007\u0138\001\002\000\004" +
    "\007\u0136\001\002\000\004\007\u0134\001\002\000\040\005" +
    "\332\013\340\015\346\020\335\021\333\022\347\027\343" +
    "\030\344\031\337\032\331\035\341\036\336\042\342\047" +
    "\345\050\334\001\002\000\004\007\327\001\002\000\004" +
    "\007\325\001\002\000\004\007\323\001\002\000\004\007" +
    "\321\001\002\000\004\007\317\001\002\000\004\007\315" +
    "\001\002\000\004\007\313\001\002\000\004\007\311\001" +
    "\002\000\004\007\307\001\002\000\004\007\305\001\002" +
    "\000\004\056\306\001\002\000\040\005\uffa3\013\uffa3\015" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\035\uffa3\036\uffa3\042\uffa3\047\uffa3\050\uffa3\001" +
    "\002\000\004\054\310\001\002\000\040\005\uffa2\013\uffa2" +
    "\015\uffa2\020\uffa2\021\uffa2\022\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\035\uffa2\036\uffa2\042\uffa2\047\uffa2\050\uffa2" +
    "\001\002\000\004\054\312\001\002\000\040\005\uffa0\013" +
    "\uffa0\015\uffa0\020\uffa0\021\uffa0\022\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\035\uffa0\036\uffa0\042\uffa0\047\uffa0\050" +
    "\uffa0\001\002\000\004\056\314\001\002\000\040\005\uffa4" +
    "\013\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\035\uffa4\036\uffa4\042\uffa4\047\uffa4" +
    "\050\uffa4\001\002\000\004\054\316\001\002\000\040\005" +
    "\uffa7\013\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\035\uffa7\036\uffa7\042\uffa7\047" +
    "\uffa7\050\uffa7\001\002\000\004\011\150\001\002\000\040" +
    "\005\uff9b\013\uff9b\015\uff9b\020\uff9b\021\uff9b\022\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\035\uff9b\036\uff9b\042\uff9b" +
    "\047\uff9b\050\uff9b\001\002\000\004\056\322\001\002\000" +
    "\040\005\uff9d\013\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\035\uff9d\036\uff9d\042" +
    "\uff9d\047\uff9d\050\uff9d\001\002\000\004\054\324\001\002" +
    "\000\040\005\uffa8\013\uffa8\015\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8" +
    "\042\uffa8\047\uffa8\050\uffa8\001\002\000\004\056\326\001" +
    "\002\000\040\005\uffa1\013\uffa1\015\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\035\uffa1\036" +
    "\uffa1\042\uffa1\047\uffa1\050\uffa1\001\002\000\004\056\330" +
    "\001\002\000\040\005\uff9c\013\uff9c\015\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\035\uff9c" +
    "\036\uff9c\042\uff9c\047\uff9c\050\uff9c\001\002\000\004\007" +
    "\u0132\001\002\000\006\003\u0102\004\u0104\001\002\000\004" +
    "\007\u0100\001\002\000\004\007\376\001\002\000\004\007" +
    "\374\001\002\000\004\007\372\001\002\000\004\007\370" +
    "\001\002\000\004\007\366\001\002\000\004\007\364\001" +
    "\002\000\004\007\362\001\002\000\004\007\360\001\002" +
    "\000\004\007\356\001\002\000\004\007\354\001\002\000" +
    "\004\007\352\001\002\000\004\007\350\001\002\000\004" +
    "\056\351\001\002\000\040\005\uffb1\013\uffb1\015\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\035\uffb1\036\uffb1\042\uffb1\047\uffb1\050\uffb1\001\002\000" +
    "\004\054\353\001\002\000\040\005\uffae\013\uffae\015\uffae" +
    "\020\uffae\021\uffae\022\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\035\uffae\036\uffae\042\uffae\047\uffae\050\uffae\001\002" +
    "\000\004\056\355\001\002\000\040\005\uffb2\013\uffb2\015" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\035\uffb2\036\uffb2\042\uffb2\047\uffb2\050\uffb2\001" +
    "\002\000\004\054\357\001\002\000\040\005\uffb0\013\uffb0" +
    "\015\uffb0\020\uffb0\021\uffb0\022\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\035\uffb0\036\uffb0\042\uffb0\047\uffb0\050\uffb0" +
    "\001\002\000\004\054\361\001\002\000\040\005\uffb5\013" +
    "\uffb5\015\uffb5\020\uffb5\021\uffb5\022\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\035\uffb5\036\uffb5\042\uffb5\047\uffb5\050" +
    "\uffb5\001\002\000\004\011\150\001\002\000\040\005\uffa9" +
    "\013\uffa9\015\uffa9\020\uffa9\021\uffa9\022\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\035\uffa9\036\uffa9\042\uffa9\047\uffa9" +
    "\050\uffa9\001\002\000\004\056\365\001\002\000\040\005" +
    "\uffab\013\uffab\015\uffab\020\uffab\021\uffab\022\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\035\uffab\036\uffab\042\uffab\047" +
    "\uffab\050\uffab\001\002\000\004\054\367\001\002\000\040" +
    "\005\uffb6\013\uffb6\015\uffb6\020\uffb6\021\uffb6\022\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6\042\uffb6" +
    "\047\uffb6\050\uffb6\001\002\000\004\056\371\001\002\000" +
    "\040\005\uffaf\013\uffaf\015\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036\uffaf\042" +
    "\uffaf\047\uffaf\050\uffaf\001\002\000\004\056\373\001\002" +
    "\000\040\005\uffaa\013\uffaa\015\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\035\uffaa\036\uffaa" +
    "\042\uffaa\047\uffaa\050\uffaa\001\002\000\004\056\375\001" +
    "\002\000\040\005\uffb4\013\uffb4\015\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\035\uffb4\036" +
    "\uffb4\042\uffb4\047\uffb4\050\uffb4\001\002\000\006\024\155" +
    "\025\156\001\002\000\040\005\uffac\013\uffac\015\uffac\020" +
    "\uffac\021\uffac\022\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\035\uffac\036\uffac\042\uffac\047\uffac\050\uffac\001\002\000" +
    "\004\056\u0101\001\002\000\040\005\uffb3\013\uffb3\015\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\035\uffb3\036\uffb3\042\uffb3\047\uffb3\050\uffb3\001\002" +
    "\000\006\003\uff7e\004\uff7e\001\002\000\006\003\uff80\004" +
    "\uff80\001\002\000\010\006\u012f\044\u010f\046\u010d\001\002" +
    "\000\006\003\uff7f\004\uff7f\001\002\000\006\003\u0102\004" +
    "\u0107\001\002\000\010\006\u010e\044\u010f\046\u010d\001\002" +
    "\000\004\004\u0109\001\002\000\004\006\u010a\001\002\000" +
    "\004\034\u010b\001\002\000\004\005\u010c\001\002\000\006" +
    "\003\uffb7\004\uffb7\001\002\000\006\005\u0119\011\150\001" +
    "\002\000\004\034\u0116\001\002\000\004\005\u0110\001\002" +
    "\000\004\054\u0111\001\002\000\004\004\u0112\001\002\000" +
    "\004\006\u0113\001\002\000\004\044\u0114\001\002\000\004" +
    "\005\u0115\001\002\000\006\003\uff7d\004\uff7d\001\002\000" +
    "\004\005\u0117\001\002\000\006\003\uffb8\004\uffb8\001\002" +
    "\000\004\005\u0129\001\002\000\004\004\u011b\001\002\000" +
    "\004\004\u0124\001\002\000\004\045\u011d\001\002\000\004" +
    "\004\uff79\001\002\000\004\005\u011e\001\002\000\004\054" +
    "\u011f\001\002\000\004\004\u0120\001\002\000\004\006\u0121" +
    "\001\002\000\004\045\u0122\001\002\000\004\005\u0123\001" +
    "\002\000\004\004\uff78\001\002\000\006\006\u0126\045\u011d" +
    "\001\002\000\004\004\uff7a\001\002\000\004\046\u0127\001" +
    "\002\000\004\005\u0128\001\002\000\006\003\uff7c\004\uff7c" +
    "\001\002\000\004\004\u011b\001\002\000\004\004\u012b\001" +
    "\002\000\006\006\u012c\045\u011d\001\002\000\004\046\u012d" +
    "\001\002\000\004\005\u012e\001\002\000\006\003\uff7b\004" +
    "\uff7b\001\002\000\004\034\u0130\001\002\000\004\005\u0131" +
    "\001\002\000\006\003\uffb9\004\uffb9\001\002\000\006\024" +
    "\155\025\156\001\002\000\040\005\uffad\013\uffad\015\uffad" +
    "\020\uffad\021\uffad\022\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\035\uffad\036\uffad\042\uffad\047\uffad\050\uffad\001\002" +
    "\000\004\056\u0135\001\002\000\040\005\uffa6\013\uffa6\015" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\035\uffa6\036\uffa6\042\uffa6\047\uffa6\050\uffa6\001" +
    "\002\000\004\056\u0137\001\002\000\040\005\uffa5\013\uffa5" +
    "\015\uffa5\020\uffa5\021\uffa5\022\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\035\uffa5\036\uffa5\042\uffa5\047\uffa5\050\uffa5" +
    "\001\002\000\006\024\155\025\156\001\002\000\040\005" +
    "\uff9e\013\uff9e\015\uff9e\020\uff9e\021\uff9e\022\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\042\uff9e\047" +
    "\uff9e\050\uff9e\001\002\000\006\024\155\025\156\001\002" +
    "\000\040\005\uff9f\013\uff9f\015\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\035\uff9f\036\uff9f" +
    "\042\uff9f\047\uff9f\050\uff9f\001\002\000\024\005\u0156\020" +
    "\u0158\021\u0157\022\u015e\027\u015a\030\u015c\042\u0159\043\u015b" +
    "\047\u015d\001\002\000\004\007\u0154\001\002\000\004\007" +
    "\u0152\001\002\000\024\005\uff42\020\uff42\021\uff42\022\uff42" +
    "\027\uff42\030\uff42\042\uff42\043\uff42\047\uff42\001\002\000" +
    "\004\007\u0150\001\002\000\004\007\u014e\001\002\000\004" +
    "\007\u014c\001\002\000\004\007\u014a\001\002\000\004\007" +
    "\u0148\001\002\000\004\007\u0146\001\002\000\004\056\u0147" +
    "\001\002\000\024\005\uff46\020\uff46\021\uff46\022\uff46\027" +
    "\uff46\030\uff46\042\uff46\043\uff46\047\uff46\001\002\000\004" +
    "\056\u0149\001\002\000\024\005\uff47\020\uff47\021\uff47\022" +
    "\uff47\027\uff47\030\uff47\042\uff47\043\uff47\047\uff47\001\002" +
    "\000\004\054\u014b\001\002\000\024\005\uff43\020\uff43\021" +
    "\uff43\022\uff43\027\uff43\030\uff43\042\uff43\043\uff43\047\uff43" +
    "\001\002\000\004\054\u014d\001\002\000\024\005\uff45\020" +
    "\uff45\021\uff45\022\uff45\027\uff45\030\uff45\042\uff45\043\uff45" +
    "\047\uff45\001\002\000\004\054\u014f\001\002\000\024\005" +
    "\uff4a\020\uff4a\021\uff4a\022\uff4a\027\uff4a\030\uff4a\042\uff4a" +
    "\043\uff4a\047\uff4a\001\002\000\004\011\150\001\002\000" +
    "\024\005\uff44\020\uff44\021\uff44\022\uff44\027\uff44\030\uff44" +
    "\042\uff44\043\uff44\047\uff44\001\002\000\004\056\u0153\001" +
    "\002\000\024\005\uff49\020\uff49\021\uff49\022\uff49\027\uff49" +
    "\030\uff49\042\uff49\043\uff49\047\uff49\001\002\000\004\056" +
    "\u0155\001\002\000\024\005\uff48\020\uff48\021\uff48\022\uff48" +
    "\027\uff48\030\uff48\042\uff48\043\uff48\047\uff48\001\002\000" +
    "\006\004\261\054\257\001\002\000\004\007\u016d\001\002" +
    "\000\004\007\u016b\001\002\000\004\007\u0169\001\002\000" +
    "\004\007\u0167\001\002\000\004\007\u0165\001\002\000\004" +
    "\007\u0163\001\002\000\004\007\u0161\001\002\000\004\007" +
    "\u015f\001\002\000\004\056\u0160\001\002\000\024\005\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\027\uff4e\030\uff4e\042\uff4e\043" +
    "\uff4e\047\uff4e\001\002\000\004\056\u0162\001\002\000\024" +
    "\005\uff4f\020\uff4f\021\uff4f\022\uff4f\027\uff4f\030\uff4f\042" +
    "\uff4f\043\uff4f\047\uff4f\001\002\000\004\054\u0164\001\002" +
    "\000\024\005\uff4b\020\uff4b\021\uff4b\022\uff4b\027\uff4b\030" +
    "\uff4b\042\uff4b\043\uff4b\047\uff4b\001\002\000\004\054\u0166" +
    "\001\002\000\024\005\uff4d\020\uff4d\021\uff4d\022\uff4d\027" +
    "\uff4d\030\uff4d\042\uff4d\043\uff4d\047\uff4d\001\002\000\004" +
    "\054\u0168\001\002\000\024\005\uff52\020\uff52\021\uff52\022" +
    "\uff52\027\uff52\030\uff52\042\uff52\043\uff52\047\uff52\001\002" +
    "\000\004\011\150\001\002\000\024\005\uff4c\020\uff4c\021" +
    "\uff4c\022\uff4c\027\uff4c\030\uff4c\042\uff4c\043\uff4c\047\uff4c" +
    "\001\002\000\004\056\u016c\001\002\000\024\005\uff51\020" +
    "\uff51\021\uff51\022\uff51\027\uff51\030\uff51\042\uff51\043\uff51" +
    "\047\uff51\001\002\000\004\056\u016e\001\002\000\024\005" +
    "\uff50\020\uff50\021\uff50\022\uff50\027\uff50\030\uff50\042\uff50" +
    "\043\uff50\047\uff50\001\002\000\004\004\u0170\001\002\000" +
    "\004\006\u0171\001\002\000\004\040\u0172\001\002\000\004" +
    "\005\u0173\001\002\000\006\003\uff53\004\uff53\001\002\000" +
    "\024\005\u018e\015\u0195\020\u0191\021\u018f\027\u0193\030\u0194" +
    "\031\u0192\032\u018d\050\u0190\001\002\000\004\007\u018b\001" +
    "\002\000\004\007\u0189\001\002\000\004\007\u0187\001\002" +
    "\000\004\007\u0185\001\002\000\004\007\u0183\001\002\000" +
    "\004\007\u0181\001\002\000\004\007\u017f\001\002\000\004" +
    "\007\u017d\001\002\000\004\054\u017e\001\002\000\024\005" +
    "\uffbe\015\uffbe\020\uffbe\021\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\050\uffbe\001\002\000\004\054\u0180\001\002\000" +
    "\024\005\uffbd\015\uffbd\020\uffbd\021\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\050\uffbd\001\002\000\004\054\u0182\001" +
    "\002\000\024\005\uffc1\015\uffc1\020\uffc1\021\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\050\uffc1\001\002\000\004\056" +
    "\u0184\001\002\000\024\005\uffbc\015\uffbc\020\uffbc\021\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\050\uffbc\001\002\000" +
    "\004\056\u0186\001\002\000\024\005\uffc0\015\uffc0\020\uffc0" +
    "\021\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\050\uffc0\001" +
    "\002\000\004\056\u0188\001\002\000\024\005\uffbf\015\uffbf" +
    "\020\uffbf\021\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\050" +
    "\uffbf\001\002\000\006\024\155\025\156\001\002\000\024" +
    "\005\uffba\015\uffba\020\uffba\021\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\050\uffba\001\002\000\006\024\155\025\156" +
    "\001\002\000\024\005\uffbb\015\uffbb\020\uffbb\021\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\050\uffbb\001\002\000\004" +
    "\007\u01a9\001\002\000\004\054\u01a4\001\002\000\004\007" +
    "\u01a2\001\002\000\004\007\u01a0\001\002\000\004\007\u019e" +
    "\001\002\000\004\007\u019c\001\002\000\004\007\u019a\001" +
    "\002\000\004\007\u0198\001\002\000\004\007\u0196\001\002" +
    "\000\004\054\u0197\001\002\000\024\005\uffc6\015\uffc6\020" +
    "\uffc6\021\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\050\uffc6" +
    "\001\002\000\004\054\u0199\001\002\000\024\005\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\050\uffc5\001\002\000\004\054\u019b\001\002\000\024\005" +
    "\uffc9\015\uffc9\020\uffc9\021\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\050\uffc9\001\002\000\004\056\u019d\001\002\000" +
    "\024\005\uffc4\015\uffc4\020\uffc4\021\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\050\uffc4\001\002\000\004\056\u019f\001" +
    "\002\000\024\005\uffc8\015\uffc8\020\uffc8\021\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\050\uffc8\001\002\000\006\024" +
    "\155\025\156\001\002\000\024\005\uffc2\015\uffc2\020\uffc2" +
    "\021\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\050\uffc2\001" +
    "\002\000\004\056\u01a3\001\002\000\024\005\uffc7\015\uffc7" +
    "\020\uffc7\021\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\050" +
    "\uffc7\001\002\000\004\004\u01a5\001\002\000\004\006\u01a6" +
    "\001\002\000\004\033\u01a7\001\002\000\004\005\u01a8\001" +
    "\002\000\006\003\uffca\004\uffca\001\002\000\006\024\155" +
    "\025\156\001\002\000\024\005\uffc3\015\uffc3\020\uffc3\021" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\050\uffc3\001\002" +
    "\000\004\005\u01ac\001\002\000\004\004\uffe3\001\002\000" +
    "\004\007\u01e2\001\002\000\024\005\u01c6\013\u01c9\020\u01c8" +
    "\021\u01c7\022\u01cd\027\u01ca\047\u01cb\052\u01cc\053\u01c5\001" +
    "\002\000\004\007\u01c3\001\002\000\004\007\u01c1\001\002" +
    "\000\004\007\u01bf\001\002\000\024\005\uff66\013\uff66\020" +
    "\uff66\021\uff66\022\uff66\027\uff66\047\uff66\052\uff66\053\uff66" +
    "\001\002\000\004\007\u01bd\001\002\000\004\007\u01bb\001" +
    "\002\000\004\007\u01b9\001\002\000\004\007\u01b7\001\002" +
    "\000\004\056\u01b8\001\002\000\024\005\uff68\013\uff68\020" +
    "\uff68\021\uff68\022\uff68\027\uff68\047\uff68\052\uff68\053\uff68" +
    "\001\002\000\004\056\u01ba\001\002\000\024\005\uff69\013" +
    "\uff69\020\uff69\021\uff69\022\uff69\027\uff69\047\uff69\052\uff69" +
    "\053\uff69\001\002\000\004\054\u01bc\001\002\000\024\005" +
    "\uff6d\013\uff6d\020\uff6d\021\uff6d\022\uff6d\027\uff6d\047\uff6d" +
    "\052\uff6d\053\uff6d\001\002\000\004\054\u01be\001\002\000" +
    "\024\005\uff6c\013\uff6c\020\uff6c\021\uff6c\022\uff6c\027\uff6c" +
    "\047\uff6c\052\uff6c\053\uff6c\001\002\000\004\054\u01c0\001" +
    "\002\000\024\005\uff6e\013\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\027\uff6e\047\uff6e\052\uff6e\053\uff6e\001\002\000\004\056" +
    "\u01c2\001\002\000\024\005\uff6b\013\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\027\uff6b\047\uff6b\052\uff6b\053\uff6b\001\002\000" +
    "\004\056\u01c4\001\002\000\024\005\uff6a\013\uff6a\020\uff6a" +
    "\021\uff6a\022\uff6a\027\uff6a\047\uff6a\052\uff6a\053\uff6a\001" +
    "\002\000\004\007\u01e0\001\002\000\004\004\u01dc\001\002" +
    "\000\004\007\u01da\001\002\000\004\007\u01d8\001\002\000" +
    "\004\007\u01d6\001\002\000\004\007\u01d4\001\002\000\004" +
    "\007\u01d2\001\002\000\004\007\u01d0\001\002\000\004\007" +
    "\u01ce\001\002\000\004\056\u01cf\001\002\000\024\005\uff70" +
    "\013\uff70\020\uff70\021\uff70\022\uff70\027\uff70\047\uff70\052" +
    "\uff70\053\uff70\001\002\000\004\054\u01d1\001\002\000\024" +
    "\005\uff75\013\uff75\020\uff75\021\uff75\022\uff75\027\uff75\047" +
    "\uff75\052\uff75\053\uff75\001\002\000\004\056\u01d3\001\002" +
    "\000\024\005\uff71\013\uff71\020\uff71\021\uff71\022\uff71\027" +
    "\uff71\047\uff71\052\uff71\053\uff71\001\002\000\004\054\u01d5" +
    "\001\002\000\024\005\uff74\013\uff74\020\uff74\021\uff74\022" +
    "\uff74\027\uff74\047\uff74\052\uff74\053\uff74\001\002\000\004" +
    "\054\u01d7\001\002\000\024\005\uff76\013\uff76\020\uff76\021" +
    "\uff76\022\uff76\027\uff76\047\uff76\052\uff76\053\uff76\001\002" +
    "\000\004\056\u01d9\001\002\000\024\005\uff73\013\uff73\020" +
    "\uff73\021\uff73\022\uff73\027\uff73\047\uff73\052\uff73\053\uff73" +
    "\001\002\000\004\056\u01db\001\002\000\024\005\uff72\013" +
    "\uff72\020\uff72\021\uff72\022\uff72\027\uff72\047\uff72\052\uff72" +
    "\053\uff72\001\002\000\004\006\u01dd\001\002\000\004\037" +
    "\u01de\001\002\000\004\005\u01df\001\002\000\006\003\uff77" +
    "\004\uff77\001\002\000\006\024\155\025\156\001\002\000" +
    "\024\005\uff6f\013\uff6f\020\uff6f\021\uff6f\022\uff6f\027\uff6f" +
    "\047\uff6f\052\uff6f\053\uff6f\001\002\000\006\024\155\025" +
    "\156\001\002\000\024\005\uff67\013\uff67\020\uff67\021\uff67" +
    "\022\uff67\027\uff67\047\uff67\052\uff67\053\uff67\001\002\000" +
    "\006\003\uffd2\004\uffd2\001\002\000\016\006\u01e6\033\116" +
    "\034\120\037\114\040\117\041\121\001\002\000\004\026" +
    "\u01e7\001\002\000\004\005\u01e8\001\002\000\004\004\uffe4" +
    "\001\002\000\004\054\u01ea\001\002\000\022\005\uffe2\012" +
    "\uffe2\015\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\047\uffe2" +
    "\001\002\000\004\056\u01ec\001\002\000\022\005\uffdf\012" +
    "\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\047\uffdf" +
    "\001\002\000\006\024\155\025\156\001\002\000\022\005" +
    "\uffdc\012\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\047\uffdc\001\002\000\004\056\u01f0\001\002\000\022\005" +
    "\uffde\012\uffde\015\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\047\uffde\001\002\000\004\056\u01f2\001\002\000\022\005" +
    "\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\047\uffe1\001\002\000\004\056\u01f4\001\002\000\022\005" +
    "\uffe0\012\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\047\uffe0\001\002\000\004\056\u01f6\001\002\000\022\005" +
    "\uffd8\012\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\047\uffd8\001\002\000\004\056\u01f8\001\002\000\022\005" +
    "\uffd7\012\uffd7\015\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\047\uffd7\001\002\000\006\024\155\025\156\001\002\000" +
    "\022\005\uffd5\012\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\047\uffd5\001\002\000\004\056\u01fc\001\002\000" +
    "\022\005\uffda\012\uffda\015\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\047\uffda\001\002\000\004\056\u01fe\001\002\000" +
    "\022\005\uffd9\012\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\047\uffd9\001\002\000\004\004\uffe7\001\002\000" +
    "\006\006\u0201\026\054\001\002\000\004\017\u0202\001\002" +
    "\000\004\005\u0203\001\002\000\006\002\ufff7\004\ufff7\001" +
    "\002\000\004\054\u0205\001\002\000\022\005\ufff3\012\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\022\ufff3\047\ufff3\051\ufff3\001" +
    "\002\000\004\054\u0207\001\002\000\022\005\ufff5\012\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\022\ufff5\047\ufff5\051\ufff5\001" +
    "\002\000\004\054\u0209\001\002\000\022\005\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\022\ufff4\047\ufff4\051\ufff4\001" +
    "\002\000\004\056\u020b\001\002\000\022\005\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\022\ufff2\047\ufff2\051\ufff2\001" +
    "\002\000\004\011\150\001\002\000\022\005\uffef\012\uffef" +
    "\013\uffef\015\uffef\016\uffef\022\uffef\047\uffef\051\uffef\001" +
    "\002\000\004\056\u020f\001\002\000\022\005\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\022\ufff1\047\ufff1\051\ufff1\001" +
    "\002\000\004\011\150\001\002\000\022\005\ufff0\012\ufff0" +
    "\013\ufff0\015\ufff0\016\ufff0\022\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\004\011\150\001\002\000\022\005\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\022\uffe8\047\uffe8\051\uffe8\001" +
    "\002\000\004\054\u0215\001\002\000\022\005\uffed\012\uffed" +
    "\013\uffed\015\uffed\016\uffed\022\uffed\047\uffed\051\uffed\001" +
    "\002\000\004\011\150\001\002\000\022\005\uffe9\012\uffe9" +
    "\013\uffe9\015\uffe9\016\uffe9\022\uffe9\047\uffe9\051\uffe9\001" +
    "\002\000\004\054\u0219\001\002\000\022\005\uffee\012\uffee" +
    "\013\uffee\015\uffee\016\uffee\022\uffee\047\uffee\051\uffee\001" +
    "\002\000\004\004\u021b\001\002\000\006\006\u021c\026\054" +
    "\001\002\000\004\017\u021d\001\002\000\004\005\u021e\001" +
    "\002\000\006\002\ufff6\004\ufff6\001\002\000\004\002\001" +
    "\001\002\000\004\005\u0221\001\002\000\004\054\u0222\001" +
    "\002\000\004\004\u0223\001\002\000\004\006\u0224\001\002" +
    "\000\004\014\u0225\001\002\000\004\005\u0226\001\002\000" +
    "\006\003\ufffa\004\ufffa\001\002\000\006\002\ufffe\004\017" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\014\002\010\010\011\011\005\012\006\013" +
    "\003\001\001\000\002\001\001\000\006\011\u0226\013\003" +
    "\001\001\000\004\013\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\013\012\014" +
    "\013\003\001\001\000\002\001\001\000\004\013\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\025\001\001\000\006\005\051\007\u0219\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\051\007\050" +
    "\001\001\000\002\001\001\000\004\005\u01fe\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\104\016\103" +
    "\020\107\024\111\031\105\032\102\034\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\103\020\u01e3\024" +
    "\111\031\105\032\102\034\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u01ad\001\001" +
    "\000\002\001\001\000\004\017\u0173\001\001\000\004\035" +
    "\u013b\001\001\000\004\025\271\001\001\000\004\033\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\146\001\001\000\002\001" +
    "\001\000\016\003\151\036\161\037\162\040\157\042\160" +
    "\043\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\151\037\166\040\157\042\160\043\153\001\001\000" +
    "\014\003\151\037\165\040\157\042\160\043\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\151\037\171\040\157\042\160\043\153\001\001" +
    "\000\002\001\001\000\010\003\151\042\213\043\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\151" +
    "\042\212\043\153\001\001\000\010\003\151\042\211\043" +
    "\153\001\001\000\002\001\001\000\010\003\151\042\210" +
    "\043\153\001\001\000\002\001\001\000\010\003\151\042" +
    "\207\043\153\001\001\000\002\001\001\000\010\003\151" +
    "\042\206\043\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\151\036" +
    "\216\037\162\040\157\042\160\043\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\255\044\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\u0105\022\u0102\023\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\u0107\022\u0102\023\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\u011b\027" +
    "\u0119\001\001\000\004\026\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\u011b\027\u0129\001\001\000\004\026\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0138\001\001\000\002\001\001" +
    "\000\004\003\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\255\044\u016e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0189\001\001\000\002\001\001\000\004" +
    "\003\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u01a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u01a9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u01e0\001\001\000" +
    "\002\001\001\000\004\003\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u01ed\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u01f9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u020c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0210\001\001\000\002\001\001\000\004\004" +
    "\u0212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u01fe\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\015" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public ArrayList<NodoXML> lista = new ArrayList<NodoXML>();
    public ArrayList<error> listaErrores = new ArrayList<error>();
    /*
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
        listaErrores.add(new error("Sintactico",s.value.toString(), s.right+1, s.left+1));
    }*/

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }*/

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserxml$actions {
  private final parserxml parser;

  /** Constructor */
  CUP$parserxml$actions(parserxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserxml$do_action_part00000000(
    int                        CUP$parserxml$act_num,
    java_cup.runtime.lr_parser CUP$parserxml$parser,
    java.util.Stack            CUP$parserxml$stack,
    int                        CUP$parserxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserxml$result;

      /* select the action based on the action number */
      switch (CUP$parserxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		RESULT = start_val;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserxml$parser.done_parsing();
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LVENTANA 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> lv = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		lista = lv;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LIMPORTAR LVENTANA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> lv = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 lista = l; for(NodoXML v: lv){lista.add(v);} RESULT = lista;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LVENTANA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 RESULT = l; 
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= LIMPORTAR error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		 lista = l; 
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Importar i = (Importar)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(i); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMPORTAR ::= IMPORTAR 
            {
              ArrayList<NodoXML> RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Importar imp = (Importar)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(imp); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTAR ::= menorque timportar mayorque cadena menorque slash timportar mayorque 
            {
              Importar RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Importar(cad, cadleft, cadright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("IMPORTAR",8, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LVENTANA ::= LVENTANA VENTANA 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LVENTANA",7, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVENTANA ::= VENTANA 
            {
              ArrayList<NodoXML> RESULT =null;
		int ventleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int ventright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Ventana vent = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(vent); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LVENTANA",7, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VENTANA ::= menorque tventana EVENTANA mayorque LCONTENEDOR menorque slash tventana mayorque 
            {
              Ventana RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int ventleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int ventright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Ventana vent = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 vent.setLinea(ileft); vent.setColumna(iright); vent.setElementos(l); RESULT= vent;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("VENTANA",9, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VENTANA ::= menorque tventana mayorque LCONTENEDOR menorque slash tventana mayorque 
            {
              Ventana RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 Ventana v =  new Ventana(ileft, iright); v.setElementos(l); RESULT  = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("VENTANA",9, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EVENTANA ::= EVENTANA tid igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EVENTANA ::= EVENTANA ttipo igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setTipo(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EVENTANA ::= EVENTANA tcolor igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EVENTANA ::= EVENTANA talto igual numero 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EVENTANA ::= EVENTANA tancho igual numero 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EVENTANA ::= EVENTANA tinicial igual ACCION 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAccioninicial(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EVENTANA ::= EVENTANA tfinal igual ACCION 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAccionfinal(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EVENTANA ::= tid igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EVENTANA ::= ttipo igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setTipo(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EVENTANA ::= tcolor igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EVENTANA ::= talto igual numero 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EVENTANA ::= tancho igual numero 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EVENTANA ::= tinicial igual ACCION 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAccioninicial(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EVENTANA ::= tfinal igual ACCION 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAccionfinal(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCONTENEDOR ::= LCONTENEDOR CONTENEDOR 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		l.add(v);RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",5, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCONTENEDOR ::= CONTENEDOR 
            {
              ArrayList<NodoXML> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Contenedor c = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",5, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCONTENEDOR ::= error 
            {
              ArrayList<NodoXML> RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",5, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENEDOR ::= menorque contenedor ECONTENEDOR mayorque LCOMPONENTES menorque slash contenedor mayorque 
            {
              Contenedor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Contenedor cont = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> lista = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 cont.setLinea(ileft); cont.setColumna(iright); cont.setListaComponentes(lista); RESULT =cont;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",3, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENEDOR ::= menorque contenedor ECONTENEDOR mayorque menorque slash contenedor mayorque 
            {
              Contenedor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).right;
		Contenedor cont = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).value;
		 cont.setLinea(ileft); cont.setColumna(iright); RESULT =cont;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",3, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ECONTENEDOR ::= ECONTENEDOR tid igual cadena 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ECONTENEDOR ::= ECONTENEDOR tx igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ECONTENEDOR ::= ECONTENEDOR ty igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ECONTENEDOR ::= ECONTENEDOR talto igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ECONTENEDOR ::= ECONTENEDOR tancho igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ECONTENEDOR ::= ECONTENEDOR tcolor igual cadena 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ECONTENEDOR ::= ECONTENEDOR tborde igual BOOL 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setBorde(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ECONTENEDOR ::= tid igual cadena 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ECONTENEDOR ::= tx igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ECONTENEDOR ::= ty igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ECONTENEDOR ::= talto igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ECONTENEDOR ::= tancho igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ECONTENEDOR ::= tcolor igual cadena 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ECONTENEDOR ::= tborde igual BOOL 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setBorde(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BOOL ::= verdadero 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("BOOL",1, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BOOL ::= falso 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("BOOL",1, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCOMPONENTES ::= LCOMPONENTES COMPONENTE 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML c = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCOMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCOMPONENTES ::= COMPONENTE 
            {
              ArrayList<NodoXML> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML c = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCOMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPONENTE ::= TEXTO 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Texto valor = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPONENTE ::= CONTROL 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Controlador valor = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPONENTE ::= MULTIMEDIA 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Multimedia valor = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMPONENTE ::= BOTON 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Boton valor = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMPONENTE ::= ENVIAR 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Enviar valor = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMPONENTE ::= error 
            {
              NodoXML RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TEXTO ::= menorque ttexto ETEXTO mayorque cadena menorque slash ttexto mayorque 
            {
              Texto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Texto nodo = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 nodo.setTexto(cad); nodo.setLinea(ileft); nodo.setColumna(iright); RESULT = nodo;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETEXTO ::= ETEXTO tnombre igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setNombre(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETEXTO ::= ETEXTO tx igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETEXTO ::= ETEXTO ty igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETEXTO ::= ETEXTO tcolor igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETEXTO ::= ETEXTO tfuente igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setFuente(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETEXTO ::= ETEXTO ttamanio igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setTam(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETEXTO ::= ETEXTO tnegrita igual BOOL 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setNegrita(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETEXTO ::= ETEXTO tcursiva igual BOOL 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setCursiva(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETEXTO ::= tnombre igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setNombre(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETEXTO ::= tx igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETEXTO ::= ty igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETEXTO ::= tcolor igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETEXTO ::= tfuente igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setFuente(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETEXTO ::= ttamanio igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setTam(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETEXTO ::= tnegrita igual BOOL 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setNegrita(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETEXTO ::= tcursiva igual BOOL 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setCursiva(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTROL ::= menorque tcontrol ECONTROL mayorque menorque slash tcontrol mayorque 
            {
              Controlador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).right;
		Controlador cont = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).value;
		               
                    cont.setLinea(ileft); 
                    cont.setColumna(iright);  
                    RESULT = cont;
                
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTROL",18, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTROL ::= menorque tcontrol ECONTROL mayorque CONTCONTROL menorque slash tcontrol mayorque 
            {
              Controlador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Controlador cont = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		NodoXML tag = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		
                    if(tag instanceof Defecto)
                    {
                        cont.setDefecto_((Defecto)tag);
                    }
                    if(tag instanceof LDato)
                    {
                        cont.setLdatos_((LDato)tag);
                    }                    
                    cont.setLinea(ileft); 
                    cont.setColumna(iright);  
                    RESULT = cont;
                
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTROL",18, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTROL ::= menorque tcontrol ECONTROL mayorque CONTCONTROL CONTCONTROL menorque slash tcontrol mayorque 
            {
              Controlador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		Controlador cont = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int tag1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).left;
		int tag1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).right;
		NodoXML tag1 = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).value;
		int tag2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int tag2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		NodoXML tag2 = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		
                    if(tag1 instanceof Defecto)
                    {
                        cont.setDefecto_((Defecto)tag1);
                    }
                    if(tag1 instanceof LDato)
                    {
                        cont.setLdatos_((LDato)tag1);
                    }
                    if(tag2 instanceof Defecto)
                    {
                        cont.setDefecto_((Defecto)tag2);
                    }
                    if(tag2 instanceof LDato)
                    {
                        cont.setLdatos_((LDato)tag2);
                    }                                         
                    cont.setLinea(ileft); 
                    cont.setColumna(iright);  
                    RESULT = cont;
                
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTROL",18, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-9)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ECONTROL ::= ECONTROL ttipo igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ECONTROL ::= ECONTROL tnombre igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ECONTROL ::= ECONTROL tx igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ECONTROL ::= ECONTROL ty igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ECONTROL ::= ECONTROL talto igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ECONTROL ::= ECONTROL tancho igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ECONTROL ::= ECONTROL tfuente igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setFuente(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ECONTROL ::= ECONTROL ttamanio igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setTamanio(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ECONTROL ::= ECONTROL tcolor igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setColor(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ECONTROL ::= ECONTROL tnegrita igual BOOL 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setNegrita(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ECONTROL ::= ECONTROL tcursiva igual BOOL 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setCursiva(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ECONTROL ::= ECONTROL tmaximo igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setMaximo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ECONTROL ::= ECONTROL tminimo igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setMinimo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ECONTROL ::= ECONTROL taccion igual ACCION 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ECONTROL ::= ttipo igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ECONTROL ::= tnombre igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ECONTROL ::= tx igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ECONTROL ::= ty igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ECONTROL ::= talto igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ECONTROL ::= tancho igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ECONTROL ::= tfuente igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setFuente(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ECONTROL ::= ttamanio igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setTamanio(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ECONTROL ::= tcolor igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setColor(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ECONTROL ::= tnegrita igual BOOL 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setNegrita(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ECONTROL ::= tcursiva igual BOOL 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setCursiva(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ECONTROL ::= tmaximo igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setMaximo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ECONTROL ::= tminimo igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setMinimo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ECONTROL ::= taccion igual ACCION 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCION ::= llavei LPARAMETROS llaved 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		 RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LPARAMETROS ::= LPARAMETROS coma EXPL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = l+valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LPARAMETROS ::= EXPL 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPL ::= EXPL or EXPL 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor1 + "||" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXPL",29, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPL ::= EXPL and EXPL 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor1 + "&&" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXPL",29, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPL ::= EXPR 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXPL",29, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPR ::= EXP OPR EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor1 + op + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXPR",30, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPR ::= EXP 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXPR",30, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPR ::= menorque 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPR ::= mayorque 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPR ::= mayorigual 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPR ::= menorigual 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPR ::= igualigual 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPR ::= diferente 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("OPR",31, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP mas EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor1 +"+" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP menos EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor1 +"-" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP multi EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor1 +"*" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP slash EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor1 +"/" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP potencia EXP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT =valor1 +"^" + valor2;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= numero 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= id 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= cadena 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= LLAMADA 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= BOOL 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EXP",32, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LLAMADA ::= id pari LPARAMETROS pard 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		 RESULT = nombre +"(" + parametros +")";
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LLAMADA ::= id pari pard 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)).value;
		 RESULT = nombre +"("  +")";
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTCONTROL ::= DEFECTO 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML valor = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTCONTROL ::= LDATOS 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML valor = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTCONTROL ::= error 
            {
              NodoXML RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DEFECTO ::= menorque defecto mayorque cadena menorque slash defecto mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Defecto(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DEFECTO",16, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LDATOS ::= menorque listadatos mayorque DATOS menorque slash listadatos mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<Dato> valor = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new LDato(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LDATOS",17, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LDATOS ::= menorque listadatos ACCION mayorque DATOS menorque slash listadatos mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String accion = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<Dato> valor = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new LDato(valor,accion, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LDATOS",17, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DATOS ::= DATOS DATO 
            {
              ArrayList<Dato> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<Dato> l = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(dato); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATOS",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DATOS ::= DATO 
            {
              ArrayList<Dato> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<Dato> l = new ArrayList<Dato>(); l.add(dato); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATOS",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DATO ::= menorque dato mayorque cadena menorque slash dato mayorque 
            {
              Dato RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Dato(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MULTIMEDIA ::= menorque tmultimedia EMULTI mayorque menorque slash tmultimedia mayorque 
            {
              Multimedia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int multileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).left;
		int multiright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).right;
		Multimedia multi = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).value;
		multi.setLinea(ileft); multi.setColumna(iright); RESULT = multi;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",23, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EMULTI ::= EMULTI ttipo igual cadena 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EMULTI ::= EMULTI tpath igual cadena 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setPath(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EMULTI ::= EMULTI tnombre igual cadena 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EMULTI ::= EMULTI tx igual numero 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EMULTI ::= EMULTI ty igual numero 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EMULTI ::= EMULTI talto igual numero 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EMULTI ::= EMULTI tancho igual numero 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EMULTI ::= EMULTI tautoreproduccion igual BOOL 
            {
              Multimedia RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Multimedia control = (Multimedia)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAutoreproduccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EMULTI ::= ttipo igual cadena 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EMULTI ::= tpath igual cadena 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setPath(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EMULTI ::= tnombre igual cadena 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EMULTI ::= tx igual numero 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EMULTI ::= ty igual numero 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EMULTI ::= talto igual numero 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EMULTI ::= tancho igual numero 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EMULTI ::= tautoreproduccion igual BOOL 
            {
              Multimedia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Multimedia control = new Multimedia(); control.setAutoreproduccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EMULTI ::= error 
            {
              Multimedia RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EMULTI",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BOTON ::= menorque tboton EBOTON mayorque CONTENIDO menorque slash tboton mayorque 
            {
              Boton RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		
                if(valor instanceof String)
                {
                    boton.setTexto((String)valor);    
                }
                else
                {
                    boton.setTxt((Texto)valor);
                }                
                boton.setLinea(ileft); 
                boton.setColumna(iright); 
                RESULT = boton;
            
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("BOTON",24, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EBOTON ::= EBOTON tnombre igual cadena 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setNombre(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EBOTON ::= EBOTON tx igual numero 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setX(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EBOTON ::= EBOTON ty igual numero 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setY(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EBOTON ::= EBOTON talto igual numero 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setAlto(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EBOTON ::= EBOTON tancho igual numero 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setAncho(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EBOTON ::= EBOTON treferencia igual cadena 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 boton.setReferencia(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EBOTON ::= EBOTON taccion igual ACCION 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		boton.setAccion(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EBOTON ::= EBOTON tfuente igual cadena 
            {
              Boton RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Boton boton = (Boton)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		boton.setFuente(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EBOTON ::= tnombre igual cadena 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setNombre(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EBOTON ::= tx igual numero 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setX(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EBOTON ::= ty igual numero 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setY(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EBOTON ::= talto igual numero 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setAlto(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EBOTON ::= tancho igual numero 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setAncho(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EBOTON ::= treferencia igual cadena 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setReferencia(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EBOTON ::= taccion igual ACCION 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setAccion(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EBOTON ::= tfuente igual cadena 
            {
              Boton RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Boton boton = new Boton(); boton.setFuente(valor); RESULT = boton;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EBOTON ::= error 
            {
              Boton RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EBOTON",25, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ENVIAR ::= menorque tenviar EENVIAR mayorque CONTENIDO menorque slash tenviar mayorque 
            {
              Enviar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int botonleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Enviar boton = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		
            if(valor instanceof String)
            {
                boton.setTexto((String)valor);    
            }
            else
            {
                boton.setTxt((Texto)valor);
            }             
            boton.setLinea(ileft); 
            boton.setColumna(iright); 
            RESULT = boton;
        
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ENVIAR",26, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EENVIAR ::= EENVIAR tnombre igual cadena 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setNombre(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EENVIAR ::= EENVIAR tx igual numero 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setX(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EENVIAR ::= EENVIAR ty igual numero 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setY(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EENVIAR ::= EENVIAR talto igual numero 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setAlto(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EENVIAR ::= EENVIAR tancho igual numero 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setAncho(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EENVIAR ::= EENVIAR treferencia igual cadena 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 enviar.setReferencia(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EENVIAR ::= EENVIAR taccion igual ACCION 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		enviar.setAccion(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EENVIAR ::= EENVIAR tfuente igual cadena 
            {
              Enviar RESULT =null;
		int enviarleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int enviarright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Enviar enviar = (Enviar)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		enviar.setFuente(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EENVIAR ::= tnombre igual cadena 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setNombre(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EENVIAR ::= tx igual numero 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setX(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EENVIAR ::= ty igual numero 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setY(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EENVIAR ::= talto igual numero 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setAlto(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EENVIAR ::= tancho igual numero 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setAncho(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EENVIAR ::= treferencia igual cadena 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setReferencia(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EENVIAR ::= taccion igual ACCION 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setAccion(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EENVIAR ::= tfuente igual cadena 
            {
              Enviar RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Enviar enviar = new Enviar(); enviar.setFuente(valor); RESULT = enviar;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EENVIAR ::= error 
            {
              Enviar RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EENVIAR",27, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CONTENIDO ::= cadena 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENIDO",34, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONTENIDO ::= TEXTO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Texto valor = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENIDO",34, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserxml$do_action(
    int                        CUP$parserxml$act_num,
    java_cup.runtime.lr_parser CUP$parserxml$parser,
    java.util.Stack            CUP$parserxml$stack,
    int                        CUP$parserxml$top)
    throws java.lang.Exception
    {
              return CUP$parserxml$do_action_part00000000(
                               CUP$parserxml$act_num,
                               CUP$parserxml$parser,
                               CUP$parserxml$stack,
                               CUP$parserxml$top);
    }
}

}
