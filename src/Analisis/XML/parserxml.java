
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.XML;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.XML.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\012\004" +
    "\000\002\012\003\000\002\014\012\000\002\013\004\000" +
    "\002\013\003\000\002\015\013\000\002\015\012\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\007\013\000\002\007\012\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\005\003\000\002\005\003\000\002\017\004\000" +
    "\002\017\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\020\013\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\026\013\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\006\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\012\000\002" +
    "\025\012\000\002\025\013\000\002\031\004\000\002\031" +
    "\003\000\002\030\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\006\003\005\004\010\001\002\000\006\002" +
    "\ufff8\004\ufff8\001\002\000\004\004\017\001\002\000\006" +
    "\002\000\004\017\001\002\000\006\003\ufffb\004\ufffb\001" +
    "\002\000\006\014\u0144\017\020\001\002\000\004\002\u0143" +
    "\001\002\000\006\003\013\004\010\001\002\000\004\002" +
    "\ufffd\001\002\000\006\002\uffff\004\017\001\002\000\006" +
    "\003\ufffc\004\ufffc\001\002\000\006\002\ufff9\004\ufff9\001" +
    "\002\000\004\017\020\001\002\000\022\005\021\012\022" +
    "\013\024\015\027\016\023\022\031\050\030\052\025\001" +
    "\002\000\006\003\050\004\053\001\002\000\004\007\u013c" +
    "\001\002\000\004\007\u013a\001\002\000\004\007\u0138\001" +
    "\002\000\004\007\u0136\001\002\000\022\005\047\012\045" +
    "\013\044\015\046\016\040\022\041\050\043\052\042\001" +
    "\002\000\004\007\036\001\002\000\004\007\034\001\002" +
    "\000\004\007\032\001\002\000\004\057\033\001\002\000" +
    "\022\005\uffea\012\uffea\013\uffea\015\uffea\016\uffea\022\uffea" +
    "\050\uffea\052\uffea\001\002\000\004\057\035\001\002\000" +
    "\022\005\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\022\uffeb" +
    "\050\uffeb\052\uffeb\001\002\000\004\055\037\001\002\000" +
    "\022\005\uffec\012\uffec\013\uffec\015\uffec\016\uffec\022\uffec" +
    "\050\uffec\052\uffec\001\002\000\004\007\u0134\001\002\000" +
    "\004\007\u0132\001\002\000\004\007\u0130\001\002\000\004" +
    "\007\u012e\001\002\000\004\007\u012c\001\002\000\004\007" +
    "\u012a\001\002\000\004\007\u0128\001\002\000\006\003\050" +
    "\004\053\001\002\000\004\004\uffe5\001\002\000\004\004" +
    "\u0124\001\002\000\004\004\uffe6\001\002\000\004\026\054" +
    "\001\002\000\020\012\063\015\064\020\056\021\055\022" +
    "\060\023\057\050\061\001\002\000\004\007\u0121\001\002" +
    "\000\004\007\u011f\001\002\000\004\007\u011d\001\002\000" +
    "\004\007\u011b\001\002\000\004\007\u0119\001\002\000\022" +
    "\005\077\012\076\015\100\020\072\021\071\022\073\023" +
    "\074\050\075\001\002\000\004\007\067\001\002\000\004" +
    "\007\065\001\002\000\004\055\066\001\002\000\022\005" +
    "\uffd6\012\uffd6\015\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\050\uffd6\001\002\000\004\055\070\001\002\000\022\005" +
    "\uffdb\012\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\050\uffdb\001\002\000\004\007\u0117\001\002\000\004\007" +
    "\u0115\001\002\000\004\007\u0113\001\002\000\004\007\u0111" +
    "\001\002\000\004\007\u010f\001\002\000\004\007\u010d\001" +
    "\002\000\006\003\107\004\110\001\002\000\004\007\101" +
    "\001\002\000\004\055\102\001\002\000\022\005\uffdd\012" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\050\uffdd" +
    "\001\002\000\006\003\uffd0\004\uffd0\001\002\000\006\003" +
    "\107\004\u0109\001\002\000\006\003\uffcf\004\uffcf\001\002" +
    "\000\006\003\uffd1\004\uffd1\001\002\000\006\003\uffce\004" +
    "\uffce\001\002\000\010\006\111\034\112\035\113\001\002" +
    "\000\004\026\u0106\001\002\000\022\015\327\020\323\021" +
    "\322\027\325\030\326\031\324\032\320\051\321\001\002" +
    "\000\036\013\123\015\127\020\117\021\116\022\132\027" +
    "\126\030\130\031\122\032\114\036\124\037\121\043\125" +
    "\050\131\051\115\001\002\000\004\007\315\001\002\000" +
    "\004\007\313\001\002\000\004\007\311\001\002\000\004" +
    "\007\307\001\002\000\040\005\163\013\171\015\175\020" +
    "\166\021\164\022\200\027\174\030\176\031\170\032\162" +
    "\036\172\037\167\043\173\050\177\051\165\001\002\000" +
    "\004\007\160\001\002\000\004\007\156\001\002\000\004" +
    "\007\154\001\002\000\004\007\152\001\002\000\004\007" +
    "\145\001\002\000\004\007\143\001\002\000\004\007\141" +
    "\001\002\000\004\007\137\001\002\000\004\007\135\001" +
    "\002\000\004\007\133\001\002\000\004\057\134\001\002" +
    "\000\040\005\uffa8\013\uffa8\015\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\036\uffa8\037\uffa8" +
    "\043\uffa8\050\uffa8\051\uffa8\001\002\000\004\057\136\001" +
    "\002\000\040\005\uffa9\013\uffa9\015\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\036\uffa9\037" +
    "\uffa9\043\uffa9\050\uffa9\051\uffa9\001\002\000\004\055\140" +
    "\001\002\000\040\005\uffa7\013\uffa7\015\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\036\uffa7" +
    "\037\uffa7\043\uffa7\050\uffa7\051\uffa7\001\002\000\004\055" +
    "\142\001\002\000\040\005\uffa5\013\uffa5\015\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\036" +
    "\uffa5\037\uffa5\043\uffa5\050\uffa5\051\uffa5\001\002\000\004" +
    "\055\144\001\002\000\040\005\uffac\013\uffac\015\uffac\020" +
    "\uffac\021\uffac\022\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\036\uffac\037\uffac\043\uffac\050\uffac\051\uffac\001\002\000" +
    "\004\011\147\001\002\000\040\005\uffa0\013\uffa0\015\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\036\uffa0\037\uffa0\043\uffa0\050\uffa0\051\uffa0\001\002" +
    "\000\004\055\150\001\002\000\004\010\151\001\002\000" +
    "\046\005\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\036" +
    "\uff9f\037\uff9f\043\uff9f\050\uff9f\051\uff9f\052\uff9f\001\002" +
    "\000\004\057\153\001\002\000\040\005\uffa2\013\uffa2\015" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\036\uffa2\037\uffa2\043\uffa2\050\uffa2\051\uffa2\001" +
    "\002\000\004\055\155\001\002\000\040\005\uffad\013\uffad" +
    "\015\uffad\020\uffad\021\uffad\022\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\036\uffad\037\uffad\043\uffad\050\uffad\051\uffad" +
    "\001\002\000\004\057\157\001\002\000\040\005\uffa6\013" +
    "\uffa6\015\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\036\uffa6\037\uffa6\043\uffa6\050\uffa6\051" +
    "\uffa6\001\002\000\004\057\161\001\002\000\040\005\uffa1" +
    "\013\uffa1\015\uffa1\020\uffa1\021\uffa1\022\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\036\uffa1\037\uffa1\043\uffa1\050\uffa1" +
    "\051\uffa1\001\002\000\004\007\305\001\002\000\006\003" +
    "\235\004\237\001\002\000\004\007\233\001\002\000\004" +
    "\007\227\001\002\000\004\007\225\001\002\000\004\007" +
    "\223\001\002\000\004\007\221\001\002\000\004\007\217" +
    "\001\002\000\004\007\215\001\002\000\004\007\213\001" +
    "\002\000\004\007\211\001\002\000\004\007\207\001\002" +
    "\000\004\007\205\001\002\000\004\007\203\001\002\000" +
    "\004\007\201\001\002\000\004\057\202\001\002\000\040" +
    "\005\uffb6\013\uffb6\015\uffb6\020\uffb6\021\uffb6\022\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\036\uffb6\037\uffb6\043\uffb6" +
    "\050\uffb6\051\uffb6\001\002\000\004\057\204\001\002\000" +
    "\040\005\uffb7\013\uffb7\015\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\036\uffb7\037\uffb7\043" +
    "\uffb7\050\uffb7\051\uffb7\001\002\000\004\055\206\001\002" +
    "\000\040\005\uffb5\013\uffb5\015\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\036\uffb5\037\uffb5" +
    "\043\uffb5\050\uffb5\051\uffb5\001\002\000\004\055\210\001" +
    "\002\000\040\005\uffb3\013\uffb3\015\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\036\uffb3\037" +
    "\uffb3\043\uffb3\050\uffb3\051\uffb3\001\002\000\004\055\212" +
    "\001\002\000\040\005\uffba\013\uffba\015\uffba\020\uffba\021" +
    "\uffba\022\uffba\027\uffba\030\uffba\031\uffba\032\uffba\036\uffba" +
    "\037\uffba\043\uffba\050\uffba\051\uffba\001\002\000\004\011" +
    "\147\001\002\000\040\005\uffae\013\uffae\015\uffae\020\uffae" +
    "\021\uffae\022\uffae\027\uffae\030\uffae\031\uffae\032\uffae\036" +
    "\uffae\037\uffae\043\uffae\050\uffae\051\uffae\001\002\000\004" +
    "\057\216\001\002\000\040\005\uffb0\013\uffb0\015\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\036\uffb0\037\uffb0\043\uffb0\050\uffb0\051\uffb0\001\002\000" +
    "\004\055\220\001\002\000\040\005\uffbb\013\uffbb\015\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\036\uffbb\037\uffbb\043\uffbb\050\uffbb\051\uffbb\001\002" +
    "\000\004\057\222\001\002\000\040\005\uffb4\013\uffb4\015" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\036\uffb4\037\uffb4\043\uffb4\050\uffb4\051\uffb4\001" +
    "\002\000\004\057\224\001\002\000\040\005\uffaf\013\uffaf" +
    "\015\uffaf\020\uffaf\021\uffaf\022\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\036\uffaf\037\uffaf\043\uffaf\050\uffaf\051\uffaf" +
    "\001\002\000\004\057\226\001\002\000\040\005\uffb9\013" +
    "\uffb9\015\uffb9\020\uffb9\021\uffb9\022\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\036\uffb9\037\uffb9\043\uffb9\050\uffb9\051" +
    "\uffb9\001\002\000\006\024\232\025\230\001\002\000\044" +
    "\005\uffd4\012\uffd4\013\uffd4\015\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\036\uffd4" +
    "\037\uffd4\043\uffd4\050\uffd4\051\uffd4\001\002\000\040\005" +
    "\uffb1\013\uffb1\015\uffb1\020\uffb1\021\uffb1\022\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\036\uffb1\037\uffb1\043\uffb1\050" +
    "\uffb1\051\uffb1\001\002\000\044\005\uffd3\012\uffd3\013\uffd3" +
    "\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\036\uffd3\037\uffd3\043\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\004\057\234\001\002\000\040\005" +
    "\uffb8\013\uffb8\015\uffb8\020\uffb8\021\uffb8\022\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\036\uffb8\037\uffb8\043\uffb8\050" +
    "\uffb8\051\uffb8\001\002\000\004\004\uff9c\001\002\000\004" +
    "\004\uff9e\001\002\000\006\045\247\047\246\001\002\000" +
    "\004\004\uff9d\001\002\000\004\004\242\001\002\000\004" +
    "\006\243\001\002\000\004\035\244\001\002\000\004\005" +
    "\245\001\002\000\006\003\uffbc\004\uffbc\001\002\000\006" +
    "\005\257\011\147\001\002\000\004\005\250\001\002\000" +
    "\004\055\251\001\002\000\004\004\252\001\002\000\004" +
    "\006\253\001\002\000\004\045\254\001\002\000\004\005" +
    "\255\001\002\000\004\004\uff9b\001\002\000\004\005\277" +
    "\001\002\000\004\004\261\001\002\000\004\004\272\001" +
    "\002\000\004\046\263\001\002\000\004\004\uff97\001\002" +
    "\000\004\005\264\001\002\000\004\055\265\001\002\000" +
    "\004\004\266\001\002\000\004\006\267\001\002\000\004" +
    "\046\270\001\002\000\004\005\271\001\002\000\004\004" +
    "\uff96\001\002\000\006\006\274\046\263\001\002\000\004" +
    "\004\uff98\001\002\000\004\047\275\001\002\000\004\005" +
    "\276\001\002\000\004\004\uff9a\001\002\000\004\004\261" +
    "\001\002\000\004\004\301\001\002\000\006\006\302\046" +
    "\263\001\002\000\004\047\303\001\002\000\004\005\304" +
    "\001\002\000\004\004\uff99\001\002\000\006\024\232\025" +
    "\230\001\002\000\040\005\uffb2\013\uffb2\015\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\036" +
    "\uffb2\037\uffb2\043\uffb2\050\uffb2\051\uffb2\001\002\000\004" +
    "\057\310\001\002\000\040\005\uffab\013\uffab\015\uffab\020" +
    "\uffab\021\uffab\022\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\036\uffab\037\uffab\043\uffab\050\uffab\051\uffab\001\002\000" +
    "\004\057\312\001\002\000\040\005\uffaa\013\uffaa\015\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\036\uffaa\037\uffaa\043\uffaa\050\uffaa\051\uffaa\001\002" +
    "\000\006\024\232\025\230\001\002\000\040\005\uffa3\013" +
    "\uffa3\015\uffa3\020\uffa3\021\uffa3\022\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\036\uffa3\037\uffa3\043\uffa3\050\uffa3\051" +
    "\uffa3\001\002\000\006\024\232\025\230\001\002\000\040" +
    "\005\uffa4\013\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\036\uffa4\037\uffa4\043\uffa4" +
    "\050\uffa4\051\uffa4\001\002\000\024\005\351\015\360\020" +
    "\354\021\352\027\356\030\357\031\355\032\350\051\353" +
    "\001\002\000\004\007\346\001\002\000\004\007\344\001" +
    "\002\000\004\007\342\001\002\000\004\007\340\001\002" +
    "\000\004\007\336\001\002\000\004\007\334\001\002\000" +
    "\004\007\332\001\002\000\004\007\330\001\002\000\004" +
    "\055\331\001\002\000\024\005\uffc1\015\uffc1\020\uffc1\021" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\051\uffc1\001\002" +
    "\000\004\055\333\001\002\000\024\005\uffc0\015\uffc0\020" +
    "\uffc0\021\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\051\uffc0" +
    "\001\002\000\004\055\335\001\002\000\024\005\uffc4\015" +
    "\uffc4\020\uffc4\021\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\051\uffc4\001\002\000\004\057\337\001\002\000\024\005" +
    "\uffbf\015\uffbf\020\uffbf\021\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\051\uffbf\001\002\000\004\057\341\001\002\000" +
    "\024\005\uffc3\015\uffc3\020\uffc3\021\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\051\uffc3\001\002\000\004\057\343\001" +
    "\002\000\024\005\uffc2\015\uffc2\020\uffc2\021\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\051\uffc2\001\002\000\006\024" +
    "\232\025\230\001\002\000\024\005\uffbd\015\uffbd\020\uffbd" +
    "\021\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\051\uffbd\001" +
    "\002\000\006\024\232\025\230\001\002\000\024\005\uffbe" +
    "\015\uffbe\020\uffbe\021\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\051\uffbe\001\002\000\004\007\u0104\001\002\000\004" +
    "\055\377\001\002\000\004\007\375\001\002\000\004\007" +
    "\373\001\002\000\004\007\371\001\002\000\004\007\367" +
    "\001\002\000\004\007\365\001\002\000\004\007\363\001" +
    "\002\000\004\007\361\001\002\000\004\055\362\001\002" +
    "\000\024\005\uffc9\015\uffc9\020\uffc9\021\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\051\uffc9\001\002\000\004\055\364" +
    "\001\002\000\024\005\uffc8\015\uffc8\020\uffc8\021\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\051\uffc8\001\002\000\004" +
    "\055\366\001\002\000\024\005\uffcc\015\uffcc\020\uffcc\021" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\051\uffcc\001\002" +
    "\000\004\057\370\001\002\000\024\005\uffc7\015\uffc7\020" +
    "\uffc7\021\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\051\uffc7" +
    "\001\002\000\004\057\372\001\002\000\024\005\uffcb\015" +
    "\uffcb\020\uffcb\021\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\051\uffcb\001\002\000\006\024\232\025\230\001\002\000" +
    "\024\005\uffc5\015\uffc5\020\uffc5\021\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\051\uffc5\001\002\000\004\057\376\001" +
    "\002\000\024\005\uffca\015\uffca\020\uffca\021\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\051\uffca\001\002\000\004\004" +
    "\u0100\001\002\000\004\006\u0101\001\002\000\004\034\u0102" +
    "\001\002\000\004\005\u0103\001\002\000\006\003\uffcd\004" +
    "\uffcd\001\002\000\006\024\232\025\230\001\002\000\024" +
    "\005\uffc6\015\uffc6\020\uffc6\021\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\051\uffc6\001\002\000\004\005\u0107\001\002" +
    "\000\004\004\uffe3\001\002\000\006\003\uffd2\004\uffd2\001" +
    "\002\000\010\006\u010a\034\112\035\113\001\002\000\004" +
    "\026\u010b\001\002\000\004\005\u010c\001\002\000\004\004" +
    "\uffe4\001\002\000\004\055\u010e\001\002\000\022\005\uffe2" +
    "\012\uffe2\015\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\050" +
    "\uffe2\001\002\000\004\057\u0110\001\002\000\022\005\uffdf" +
    "\012\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\050" +
    "\uffdf\001\002\000\006\024\232\025\230\001\002\000\022" +
    "\005\uffdc\012\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\050\uffdc\001\002\000\004\057\u0114\001\002\000\022" +
    "\005\uffde\012\uffde\015\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\050\uffde\001\002\000\004\057\u0116\001\002\000\022" +
    "\005\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\050\uffe1\001\002\000\004\057\u0118\001\002\000\022" +
    "\005\uffe0\012\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\050\uffe0\001\002\000\004\057\u011a\001\002\000\022" +
    "\005\uffd8\012\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\050\uffd8\001\002\000\004\057\u011c\001\002\000\022" +
    "\005\uffd7\012\uffd7\015\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\050\uffd7\001\002\000\006\024\232\025\230\001\002" +
    "\000\022\005\uffd5\012\uffd5\015\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\050\uffd5\001\002\000\004\057\u0120\001\002" +
    "\000\022\005\uffda\012\uffda\015\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\050\uffda\001\002\000\004\057\u0122\001\002" +
    "\000\022\005\uffd9\012\uffd9\015\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\050\uffd9\001\002\000\004\004\uffe7\001\002" +
    "\000\006\006\u0125\026\054\001\002\000\004\017\u0126\001" +
    "\002\000\004\005\u0127\001\002\000\006\002\ufff7\004\ufff7" +
    "\001\002\000\004\055\u0129\001\002\000\022\005\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\022\ufff3\050\ufff3\052\ufff3" +
    "\001\002\000\004\055\u012b\001\002\000\022\005\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\022\ufff5\050\ufff5\052\ufff5" +
    "\001\002\000\004\055\u012d\001\002\000\022\005\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\022\ufff4\050\ufff4\052\ufff4" +
    "\001\002\000\004\057\u012f\001\002\000\022\005\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\016\ufff2\022\ufff2\050\ufff2\052\ufff2" +
    "\001\002\000\004\011\147\001\002\000\022\005\uffef\012" +
    "\uffef\013\uffef\015\uffef\016\uffef\022\uffef\050\uffef\052\uffef" +
    "\001\002\000\004\057\u0133\001\002\000\022\005\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\022\ufff1\050\ufff1\052\ufff1" +
    "\001\002\000\004\011\147\001\002\000\022\005\ufff0\012" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\022\ufff0\050\ufff0\052\ufff0" +
    "\001\002\000\004\011\147\001\002\000\022\005\uffe8\012" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\022\uffe8\050\uffe8\052\uffe8" +
    "\001\002\000\004\055\u0139\001\002\000\022\005\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\022\uffed\050\uffed\052\uffed" +
    "\001\002\000\004\011\147\001\002\000\022\005\uffe9\012" +
    "\uffe9\013\uffe9\015\uffe9\016\uffe9\022\uffe9\050\uffe9\052\uffe9" +
    "\001\002\000\004\055\u013d\001\002\000\022\005\uffee\012" +
    "\uffee\013\uffee\015\uffee\016\uffee\022\uffee\050\uffee\052\uffee" +
    "\001\002\000\004\004\u013f\001\002\000\006\006\u0140\026" +
    "\054\001\002\000\004\017\u0141\001\002\000\004\005\u0142" +
    "\001\002\000\006\002\ufff6\004\ufff6\001\002\000\004\002" +
    "\001\001\002\000\004\005\u0145\001\002\000\004\055\u0146" +
    "\001\002\000\004\004\u0147\001\002\000\004\006\u0148\001" +
    "\002\000\004\014\u0149\001\002\000\004\005\u014a\001\002" +
    "\000\006\003\ufffa\004\ufffa\001\002\000\006\002\ufffe\004" +
    "\017\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\014\002\010\012\011\013\005\014\006\015" +
    "\003\001\001\000\002\001\001\000\006\013\u014a\015\003" +
    "\001\001\000\004\015\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\013\014\014" +
    "\015\003\001\001\000\002\001\001\000\004\015\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\025\001\001\000\006\007\051\011\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\051\011\050" +
    "\001\001\000\002\001\001\000\004\007\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\103\020\102" +
    "\022\105\026\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\102" +
    "\022\u0107\026\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\316\001\001\000\004\027\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\240\024\235\025\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\261\031\257\001" +
    "\001\000\004\030\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\261\031\277\001\001\000\004\030\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\313\001\001\000\002\001\001\000" +
    "\004\005\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\344\001\001\000\002\001\001\000" +
    "\004\005\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0134\001\001\000\002\001\001\000\004\006\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\015\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public ArrayList<NodoXML> lista = new ArrayList<NodoXML>();
    public ArrayList<error> listaErrores = new ArrayList<error>();
    /*
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
        listaErrores.addErrores(new error("Sintactico",s.value.toString(), s.right+1, s.left+1));
    }*/

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }*/

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserxml$actions {
  private final parserxml parser;

  /** Constructor */
  CUP$parserxml$actions(parserxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserxml$do_action_part00000000(
    int                        CUP$parserxml$act_num,
    java_cup.runtime.lr_parser CUP$parserxml$parser,
    java.util.Stack            CUP$parserxml$stack,
    int                        CUP$parserxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserxml$result;

      /* select the action based on the action number */
      switch (CUP$parserxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		RESULT = start_val;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserxml$parser.done_parsing();
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LVENTANA 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> lv = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		lista = lv;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LIMPORTAR LVENTANA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> lv = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 lista = l; for(NodoXML v: lv){lista.add(v);} RESULT = lista;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LVENTANA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 RESULT = l; 
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= LIMPORTAR error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		 lista = l; 
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Importar i = (Importar)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(i); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMPORTAR ::= IMPORTAR 
            {
              ArrayList<NodoXML> RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Importar imp = (Importar)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(imp); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTAR ::= menorque timportar mayorque cadena menorque slash timportar mayorque 
            {
              Importar RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Importar(cad, cadleft, cadright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LVENTANA ::= LVENTANA VENTANA 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LVENTANA",9, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVENTANA ::= VENTANA 
            {
              ArrayList<NodoXML> RESULT =null;
		int ventleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int ventright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Ventana vent = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(vent); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LVENTANA",9, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VENTANA ::= menorque tventana EVENTANA mayorque LCONTENEDOR menorque slash tventana mayorque 
            {
              Ventana RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int ventleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int ventright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Ventana vent = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 vent.setLinea(ileft); vent.setColumna(iright); vent.setElementos(l); RESULT= vent;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("VENTANA",11, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VENTANA ::= menorque tventana mayorque LCONTENEDOR menorque slash tventana mayorque 
            {
              Ventana RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 Ventana v =  new Ventana(ileft, iright); v.setElementos(l); RESULT  = v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("VENTANA",11, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EVENTANA ::= EVENTANA tid igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EVENTANA ::= EVENTANA ttipo igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setTipo(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EVENTANA ::= EVENTANA tcolor igual cadena 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EVENTANA ::= EVENTANA talto igual numero 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EVENTANA ::= EVENTANA tancho igual numero 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EVENTANA ::= EVENTANA tinicial igual ACCION 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAccioninicial(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EVENTANA ::= EVENTANA tfinal igual ACCION 
            {
              Ventana RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Ventana v = (Ventana)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAccionfinal(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EVENTANA ::= tid igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EVENTANA ::= ttipo igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setTipo(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EVENTANA ::= tcolor igual cadena 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EVENTANA ::= talto igual numero 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EVENTANA ::= tancho igual numero 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EVENTANA ::= tinicial igual ACCION 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAccioninicial(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EVENTANA ::= tfinal igual ACCION 
            {
              Ventana RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Ventana v = new Ventana(); v.setAccionfinal(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("EVENTANA",12, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCONTENEDOR ::= LCONTENEDOR CONTENEDOR 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		l.add(v);RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",7, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCONTENEDOR ::= CONTENEDOR 
            {
              ArrayList<NodoXML> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Contenedor c = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",7, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCONTENEDOR ::= error 
            {
              ArrayList<NodoXML> RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCONTENEDOR",7, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENEDOR ::= menorque contenedor ECONTENEDOR mayorque LCOMPONENTES menorque slash contenedor mayorque 
            {
              Contenedor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Contenedor cont = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<NodoXML> lista = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 cont.setLinea(ileft); cont.setColumna(iright); cont.setListaComponentes(lista); RESULT =cont;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",5, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENEDOR ::= menorque contenedor ECONTENEDOR mayorque menorque slash contenedor mayorque 
            {
              Contenedor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).right;
		Contenedor cont = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-5)).value;
		 cont.setLinea(ileft); cont.setColumna(iright); RESULT =cont;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",5, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ECONTENEDOR ::= ECONTENEDOR tid igual cadena 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ECONTENEDOR ::= ECONTENEDOR tx igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ECONTENEDOR ::= ECONTENEDOR ty igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ECONTENEDOR ::= ECONTENEDOR talto igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ECONTENEDOR ::= ECONTENEDOR tancho igual numero 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ECONTENEDOR ::= ECONTENEDOR tcolor igual cadena 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ECONTENEDOR ::= ECONTENEDOR tborde igual BOOL 
            {
              Contenedor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Contenedor v = (Contenedor)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setBorde(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ECONTENEDOR ::= tid igual cadena 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setId(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ECONTENEDOR ::= tx igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ECONTENEDOR ::= ty igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ECONTENEDOR ::= talto igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setAlto(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ECONTENEDOR ::= tancho igual numero 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setAncho(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ECONTENEDOR ::= tcolor igual cadena 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ECONTENEDOR ::= tborde igual BOOL 
            {
              Contenedor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Contenedor v = new Contenedor(); v.setBorde(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BOOL ::= verdadero 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("BOOL",3, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BOOL ::= falso 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("BOOL",3, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCOMPONENTES ::= LCOMPONENTES COMPONENTE 
            {
              ArrayList<NodoXML> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<NodoXML> l = (ArrayList<NodoXML>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML c = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCOMPONENTES",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCOMPONENTES ::= COMPONENTE 
            {
              ArrayList<NodoXML> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML c = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<NodoXML> l = new ArrayList<NodoXML>(); l.add(c); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LCOMPONENTES",13, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPONENTE ::= TEXTO 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Texto valor = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",16, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPONENTE ::= CONTROL 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Controlador valor = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",16, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPONENTE ::= error 
            {
              NodoXML RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("COMPONENTE",16, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TEXTO ::= menorque ttexto ETEXTO mayorque cadena menorque slash ttexto mayorque 
            {
              Texto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Texto nodo = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		 nodo.setTexto(cad); nodo.setLinea(ileft); nodo.setColumna(iright); RESULT = nodo;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("TEXTO",14, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ETEXTO ::= ETEXTO tnombre igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setNombre(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ETEXTO ::= ETEXTO tx igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETEXTO ::= ETEXTO ty igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETEXTO ::= ETEXTO tcolor igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETEXTO ::= ETEXTO tfuente igual cadena 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setFuente(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETEXTO ::= ETEXTO ttamanio igual numero 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setTam(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETEXTO ::= ETEXTO tnegrita igual BOOL 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setNegrita(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETEXTO ::= ETEXTO tcursiva igual BOOL 
            {
              Texto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Texto v = (Texto)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		v.setCursiva(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETEXTO ::= tnombre igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setNombre(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETEXTO ::= tx igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setX(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETEXTO ::= ty igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setY(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETEXTO ::= tcolor igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setColor(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETEXTO ::= tfuente igual cadena 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setFuente(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETEXTO ::= ttamanio igual numero 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setTam(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETEXTO ::= tnegrita igual BOOL 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setNegrita(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETEXTO ::= tcursiva igual BOOL 
            {
              Texto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		Texto v = new Texto(); v.setCursiva(valor); RESULT= v;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ETEXTO",15, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTROL ::= menorque tcontrol ECONTROL mayorque CONTCONTROL menorque slash tcontrol mayorque 
            {
              Controlador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		Controlador cont = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		NodoXML tag = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		cont.setLinea(ileft); cont.setColumna(iright); cont.setTag(tag); RESULT = cont;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTROL",20, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ECONTROL ::= ECONTROL ttipo igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ECONTROL ::= ECONTROL tnombre igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ECONTROL ::= ECONTROL tx igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ECONTROL ::= ECONTROL ty igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ECONTROL ::= ECONTROL talto igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ECONTROL ::= ECONTROL tancho igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ECONTROL ::= ECONTROL tfuente igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setFuente(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ECONTROL ::= ECONTROL ttamanio igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setTamanio(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ECONTROL ::= ECONTROL tcolor igual cadena 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setColor(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ECONTROL ::= ECONTROL tnegrita igual BOOL 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setNegrita(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ECONTROL ::= ECONTROL tcursiva igual BOOL 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setCursiva(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ECONTROL ::= ECONTROL tmaximo igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setMaximo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ECONTROL ::= ECONTROL tminimo igual numero 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setMinimo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ECONTROL ::= ECONTROL taccion igual ACCION 
            {
              Controlador RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).right;
		Controlador control = (Controlador)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 control.setAccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-3)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ECONTROL ::= ttipo igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setTipo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ECONTROL ::= tnombre igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setNombre(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ECONTROL ::= tx igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setX(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ECONTROL ::= ty igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setY(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ECONTROL ::= talto igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAlto(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ECONTROL ::= tancho igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAncho(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ECONTROL ::= tfuente igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setFuente(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ECONTROL ::= ttamanio igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setTamanio(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ECONTROL ::= tcolor igual cadena 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setColor(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ECONTROL ::= tnegrita igual BOOL 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setNegrita(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ECONTROL ::= tcursiva igual BOOL 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setCursiva(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ECONTROL ::= tmaximo igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setMaximo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ECONTROL ::= tminimo igual numero 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setMinimo(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ECONTROL ::= taccion igual ACCION 
            {
              Controlador RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 Controlador control = new Controlador(); control.setAccion(valor); RESULT = control;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ECONTROL",21, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCION ::= llavei cadena llaved 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		 RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("ACCION",4, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-2)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTCONTROL ::= DEFECTO 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML valor = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",17, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTCONTROL ::= LDATOS 
            {
              NodoXML RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		NodoXML valor = (NodoXML)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		RESULT = valor;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",17, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTCONTROL ::= error 
            {
              NodoXML RESULT =null;

              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("CONTCONTROL",17, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEFECTO ::= menorque defecto mayorque cadena menorque slash defecto mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Defecto(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DEFECTO",18, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LDATOS ::= menorque listadatos mayorque DATOS menorque slash listadatos mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<Dato> valor = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new LDato(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LDATOS",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LDATOS ::= menorque listadatos ACCION mayorque DATOS menorque slash listadatos mayorque 
            {
              NodoXML RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String accion = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		ArrayList<Dato> valor = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new LDato(valor,accion, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("LDATOS",19, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-8)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATOS ::= DATOS DATO 
            {
              ArrayList<Dato> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).right;
		ArrayList<Dato> l = (ArrayList<Dato>)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		 l.add(dato); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATOS",23, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-1)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATOS ::= DATO 
            {
              ArrayList<Dato> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$parserxml$stack.peek()).value;
		ArrayList<Dato> l = new ArrayList<Dato>(); l.add(dato); RESULT = l;
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATOS",23, ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DATO ::= menorque dato mayorque cadena menorque slash dato mayorque 
            {
              Dato RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserxml$stack.elementAt(CUP$parserxml$top-4)).value;
		RESULT = new Dato(valor, ileft, iright);
              CUP$parserxml$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$parserxml$stack.elementAt(CUP$parserxml$top-7)), ((java_cup.runtime.Symbol)CUP$parserxml$stack.peek()), RESULT);
            }
          return CUP$parserxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserxml$do_action(
    int                        CUP$parserxml$act_num,
    java_cup.runtime.lr_parser CUP$parserxml$parser,
    java.util.Stack            CUP$parserxml$stack,
    int                        CUP$parserxml$top)
    throws java.lang.Exception
    {
              return CUP$parserxml$do_action_part00000000(
                               CUP$parserxml$act_num,
                               CUP$parserxml$parser,
                               CUP$parserxml$stack,
                               CUP$parserxml$top);
    }
}

}
