/* The following code was generated by JFlex 1.7.0 */

package Analisis.Fs;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Recursos.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scannerfs.flex</tt>
 */
public class scannerfs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentarioSimple = 2;
  public static final int comentarioMulti = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    10, 10, 10, 10, 10, 10, 10, 10, 10,  1,  8, 59,  1,  2, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
     1, 29,  9, 10, 10, 10, 28, 15, 33, 34, 17, 24, 37, 25,  4, 16, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 58, 49, 32, 30, 31, 10, 
    10, 39, 43, 47, 51, 44, 50,  5, 55, 21,  5, 46, 42, 52, 22, 23, 
    53,  5, 40, 19, 48, 41, 38, 54,  5,  5,  5, 35, 10, 36, 26,  5, 
    10, 39, 43, 47, 51, 44, 50,  5, 55, 21,  5, 46, 42, 52, 22, 23, 
    53,  5, 40, 19, 48, 41, 38, 54,  5,  5,  5, 56, 27, 57, 10, 10, 
    10, 10, 10, 10, 10, 59, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10,  7, 10, 10, 10, 10, 10, 10, 10,  7, 10, 10, 10,  7, 10, 10, 
    10,  7, 10,  7, 10, 10, 10, 10, 10, 10,  7, 10, 10, 10, 10, 10, 
    10, 10, 11,  6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 11,  6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\3\1"+
    "\1\6\1\7\1\1\1\4\1\1\2\4\1\10\1\11"+
    "\1\12\2\1\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\4\1\24\2\4\1\25\1\26"+
    "\1\27\5\0\1\30\1\0\1\31\1\32\1\33\1\0"+
    "\1\33\1\4\1\0\2\4\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\10\4\1\46"+
    "\1\47\1\0\1\50\2\30\3\0\2\4\1\0\2\4"+
    "\1\51\3\4\1\0\1\4\1\52\1\4\1\0\1\4"+
    "\1\0\1\53\1\0\1\53\1\4\1\0\1\4\1\54"+
    "\3\4\2\55\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\1\0\2\4\2\56\1\0\1\4\2\57\2\60\1\0"+
    "\2\61\1\0\2\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\2\62\1\4\2\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\75\0\172\0\267\0\364\0\75"+
    "\0\u0131\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\75\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\75\0\75\0\75\0\75\0\75"+
    "\0\u057b\0\u05b8\0\u05f5\0\75\0\u0632\0\u066f\0\75\0\75"+
    "\0\75\0\u06ac\0\364\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\75\0\75\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u06ac\0\75\0\u0bad\0\75\0\u0bea"+
    "\0\75\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\267\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\267"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\75\0\u1034\0\267\0\u1071"+
    "\0\u10ae\0\u10eb\0\267\0\u1128\0\u1165\0\u11a2\0\75\0\267"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\75\0\267\0\u1441\0\u147e\0\75\0\267"+
    "\0\75\0\267\0\u14bb\0\75\0\267\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\75"+
    "\0\267\0\u175a\0\75\0\267\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\3\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\3\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\4\6\1\42\1\6\1\3"+
    "\1\6\1\43\1\6\1\44\1\45\3\6\1\46\1\6"+
    "\1\47\1\50\1\51\102\0\1\5\1\52\73\0\1\6"+
    "\1\0\1\6\1\53\14\0\1\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\1\0\6\6\14\0\1\6\66\0"+
    "\13\54\3\0\3\54\1\0\1\54\1\0\30\54\1\0"+
    "\16\54\15\0\1\55\61\0\13\56\3\0\3\56\1\0"+
    "\1\56\1\0\30\56\1\0\16\56\21\0\1\57\1\60"+
    "\14\0\1\61\74\0\1\62\62\0\2\63\40\0\1\64"+
    "\11\0\1\6\1\0\1\6\1\53\14\0\1\6\1\63"+
    "\1\65\2\6\16\0\7\6\1\0\3\6\1\0\4\6"+
    "\1\66\1\6\71\0\1\67\13\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\1\0\2\6\1\70\3\6\10\0\1\6\1\0"+
    "\1\6\1\53\14\0\1\6\1\0\3\6\16\0\3\6"+
    "\1\71\3\6\1\0\3\6\1\0\6\6\35\0\1\72"+
    "\5\0\1\73\67\0\1\74\4\0\1\75\71\0\1\76"+
    "\75\0\1\77\76\0\1\100\74\0\1\101\74\0\1\102"+
    "\74\0\1\103\41\0\1\6\1\0\1\6\1\53\14\0"+
    "\1\6\1\0\3\6\16\0\1\6\1\104\4\6\1\105"+
    "\1\0\3\6\1\0\6\6\10\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\2\6\1\106"+
    "\4\6\1\0\3\6\1\0\6\6\10\0\1\6\1\0"+
    "\1\6\1\53\14\0\1\6\1\0\2\6\1\107\16\0"+
    "\1\6\1\110\5\6\1\0\3\6\1\0\6\6\10\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\2\6"+
    "\1\111\16\0\1\6\1\112\5\6\1\0\3\6\1\0"+
    "\6\6\10\0\1\6\1\0\1\6\1\53\14\0\1\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\1\0\5\6"+
    "\1\113\10\0\1\114\71\0\11\54\1\115\63\54\15\0"+
    "\1\116\57\0\17\56\1\117\55\56\2\57\1\120\5\57"+
    "\1\121\64\57\21\60\1\122\53\60\26\0\1\123\72\0"+
    "\2\124\52\0\1\6\1\0\1\6\1\53\14\0\1\6"+
    "\1\0\1\6\1\125\1\6\16\0\7\6\1\0\3\6"+
    "\1\0\6\6\10\0\1\6\1\0\1\6\1\53\14\0"+
    "\1\6\1\124\1\126\2\6\16\0\7\6\1\0\3\6"+
    "\1\0\6\6\72\0\1\127\12\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\1\0\3\6\1\130\2\6\10\0\1\6\1\0"+
    "\1\6\1\53\14\0\1\6\1\0\3\6\16\0\4\6"+
    "\1\131\2\6\1\0\3\6\1\0\6\6\10\0\1\6"+
    "\1\0\1\6\1\53\14\0\1\6\1\0\3\6\16\0"+
    "\2\6\1\132\4\6\1\0\3\6\1\0\6\6\10\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\3\6"+
    "\16\0\2\6\1\133\4\6\1\0\3\6\1\0\6\6"+
    "\10\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\3\6\16\0\6\6\1\134\1\0\3\6\1\0\6\6"+
    "\10\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\1\6\1\135\1\6\16\0\7\6\1\0\3\6\1\0"+
    "\6\6\10\0\1\6\1\0\1\6\1\53\13\0\1\136"+
    "\1\137\1\0\3\6\16\0\7\6\1\0\3\6\1\0"+
    "\6\6\10\0\1\6\1\0\1\6\1\53\14\0\1\6"+
    "\1\0\3\6\16\0\2\6\1\140\4\6\1\0\3\6"+
    "\1\0\6\6\10\0\1\6\1\0\1\6\1\53\14\0"+
    "\1\6\1\0\3\6\16\0\4\6\1\141\2\6\1\0"+
    "\3\6\1\0\6\6\10\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\142\1\143\2\6\16\0\7\6\1\0"+
    "\3\6\1\0\6\6\6\0\13\144\3\0\3\144\1\0"+
    "\1\144\1\0\30\144\1\0\16\144\11\0\1\121\64\0"+
    "\20\60\1\121\1\122\53\60\27\0\1\145\125\0\1\146"+
    "\17\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\2\6\1\147\16\0\7\6\1\0\3\6\1\0\6\6"+
    "\10\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\3\6\16\0\7\6\1\0\2\6\1\150\1\0\6\6"+
    "\55\0\1\151\27\0\1\6\1\0\1\6\1\53\14\0"+
    "\1\6\1\0\3\6\16\0\2\6\1\152\4\6\1\0"+
    "\3\6\1\0\6\6\10\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\0\2\6\1\153\16\0\7\6\1\0"+
    "\3\6\1\0\6\6\10\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\154\4\6\10\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\1\6\1\155"+
    "\5\6\1\0\3\6\1\0\6\6\10\0\1\6\1\0"+
    "\1\6\1\53\14\0\1\6\1\0\3\6\16\0\7\6"+
    "\1\0\2\6\1\156\1\0\6\6\61\0\1\157\23\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\3\6"+
    "\16\0\6\6\1\160\1\0\3\6\1\0\6\6\10\0"+
    "\1\6\1\0\1\6\1\53\13\0\1\161\1\162\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\1\0\6\6\57\0"+
    "\1\163\25\0\1\6\1\0\1\6\1\53\14\0\1\6"+
    "\1\0\3\6\16\0\4\6\1\164\2\6\1\0\3\6"+
    "\1\0\6\6\5\0\13\144\1\165\61\144\57\0\1\166"+
    "\20\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\3\6\16\0\7\6\1\0\1\6\1\167\1\6\1\0"+
    "\6\6\31\0\2\170\52\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\170\1\171\2\6\16\0\7\6\1\0"+
    "\3\6\1\0\6\6\10\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\0\3\6\16\0\1\6\1\172\5\6"+
    "\1\0\3\6\1\0\6\6\10\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\7\6\1\173"+
    "\1\174\2\6\1\0\6\6\10\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\175\1\176\2\6\16\0\7\6"+
    "\1\0\3\6\1\0\6\6\34\0\1\177\50\0\1\6"+
    "\1\0\1\6\1\53\14\0\1\6\1\0\2\6\1\200"+
    "\16\0\7\6\1\0\3\6\1\0\6\6\61\0\1\201"+
    "\23\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\3\6\16\0\6\6\1\202\1\0\3\6\1\0\6\6"+
    "\5\0\13\144\1\165\1\203\60\144\67\0\1\204\10\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\1\0\5\6\1\205\71\0"+
    "\1\206\13\0\1\6\1\0\1\6\1\53\14\0\1\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\1\0\2\6"+
    "\1\207\3\6\10\0\1\6\1\0\1\6\1\53\14\0"+
    "\1\6\1\0\3\6\16\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\210\4\6\33\0\1\211\51\0\1\6\1\0"+
    "\1\6\1\53\14\0\1\6\1\0\1\6\1\212\1\6"+
    "\16\0\7\6\1\0\3\6\1\0\6\6\5\0\13\144"+
    "\1\165\2\144\1\115\56\144\24\0\2\213\52\0\1\6"+
    "\1\0\1\6\1\53\14\0\1\6\1\213\1\214\2\6"+
    "\16\0\7\6\1\0\3\6\1\0\6\6\10\0\1\6"+
    "\1\0\1\6\1\53\14\0\1\6\1\0\3\6\16\0"+
    "\6\6\1\215\1\0\3\6\1\0\6\6\56\0\1\216"+
    "\26\0\1\6\1\0\1\6\1\53\14\0\1\6\1\0"+
    "\3\6\16\0\3\6\1\217\3\6\1\0\3\6\1\0"+
    "\6\6\55\0\1\220\27\0\1\6\1\0\1\6\1\53"+
    "\14\0\1\6\1\0\3\6\16\0\2\6\1\221\4\6"+
    "\1\0\3\6\1\0\6\6\10\0\1\6\1\0\1\6"+
    "\1\53\14\0\1\6\1\0\3\6\16\0\2\6\1\222"+
    "\4\6\1\0\3\6\1\0\6\6\61\0\1\223\23\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\3\6"+
    "\16\0\6\6\1\224\1\0\3\6\1\0\6\6\10\0"+
    "\1\6\1\0\1\6\1\53\14\0\1\6\1\0\2\6"+
    "\1\225\16\0\7\6\1\0\3\6\1\0\6\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6039];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\2\11\3\1\1\11\14\1\1\11\6\1"+
    "\5\11\3\1\1\11\2\1\3\11\5\0\1\1\1\0"+
    "\2\11\1\1\1\0\2\1\1\0\2\1\12\11\11\1"+
    "\1\11\1\0\1\11\1\1\1\11\3\0\2\1\1\0"+
    "\6\1\1\0\3\1\1\0\1\1\1\0\1\11\1\0"+
    "\2\1\1\0\5\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).
    public String cadena ="";
    public boolean flag = false;
    public boolean flagSalto= false;
    public int contadorEtiquetas = 0 ;  // 0 estado yyinitial, 1 estado 0, 2 estado 1;


    public void iniciarCadena()
    {  
        flag = true;
        cadena = "";
    }

    public void finalizarCadena()
    {   
        flagSalto = !flagSalto;     
        Imprimir("--------------------");
        Imprimir(cadena);
        Imprimir("--------------------");
        cadena = "";        
        flag = false;        
    }
    
    public void adderror(int linea, int columna, String valor)
    {        
        singlenton.addErrores(new error("Lexico",valor, linea, columna));
    }
    public void adderror(int linea, int columna, String valor, String desc)
    {        
        singlenton.addErrores(new error("Lexico",linea, columna, valor, desc));
    }    
    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 

    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }    
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerfs(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
                    adderror(yyline, yychar, yytext());
            } 
            // fall through
          case 53: break;
          case 2: 
            { //Imprimir("Salto de linea");
            } 
            // fall through
          case 54: break;
          case 3: 
            { addLexema("Entero", yytext(), yyline, yychar);  	        
                return new Symbol(sym.entero, yychar, yyline, Integer.parseInt(yytext()));
            } 
            // fall through
          case 55: break;
          case 4: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
                return new Symbol(sym.identificador, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 56: break;
          case 5: 
            { yychar=0;
            } 
            // fall through
          case 57: break;
          case 6: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.div, yychar, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 7: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.multi, yychar, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 8: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.suma, yychar, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 9: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.resta, yychar, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 10: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.potencia, yychar, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 11: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.exclam, yychar, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 12: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.igual, yychar, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 13: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.mayor, yychar, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 14: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.menor, yychar, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 15: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.pari, yychar, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 16: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.pard, yychar, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 17: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.corchetei, yychar, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 18: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.corcheted, yychar, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 19: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.coma, yychar, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 20: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
                return new Symbol(sym.puntocoma, yychar, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 21: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
                return new Symbol(sym.llaveI, yychar, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 22: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
                return new Symbol(sym.llaveD, yychar, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 23: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
                return new Symbol(sym.dospuntos, yychar, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 24: 
            { Imprimir(yytext());
            } 
            // fall through
          case 76: break;
          case 25: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.divigual, yychar, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 26: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.multiigual, yychar, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 27: 
            { addLexema("reservada", yytext(), yyline, yychar);
                return  new Symbol(sym.si, yychar, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 28: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.aumento, yychar, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 29: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.masigual, yychar, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 30: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.decremento, yychar, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 31: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.menosigual, yychar, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 32: 
            { addLexema("|reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.or, yychar, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 33: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.and, yychar, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 34: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.desigual, yychar, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 35: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.igualigual, yychar, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 36: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.mayorigual, yychar, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 37: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.menorigual, yychar, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 38: 
            { addLexema("Decimal", yytext(), yyline, yychar);  	        
                return new Symbol(sym.decimal, yychar, yyline, Double.parseDouble(yytext()));
            } 
            // fall through
          case 90: break;
          case 39: 
            { addLexema("Cadena", yytext(), yyline, yychar);  	        
                return new Symbol(sym.cadena, yychar, yyline, yytext().substring(1, yytext().length()-1));
            } 
            // fall through
          case 91: break;
          case 40: 
            { addLexema("caracter", yytext(), yyline, yychar);  	        
                return new Symbol(sym.cadena, yychar, yyline, yytext().substring(1, yytext().length()-1));
            } 
            // fall through
          case 92: break;
          case 41: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.var, yychar, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 42: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
                return new Symbol(sym.para, yychar, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 43: 
            { addLexema("reservada", yytext(), yyline, yychar);
                return  new Symbol(sym.sino, yychar, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 44: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.nulo, yychar, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
                return new Symbol(sym.caso, yychar, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 46: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.tbreak, yychar, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 47: 
            { addLexema("false", yytext(), yyline, yychar);  	        
                return new Symbol(sym.falso, yychar, yyline, false);
            } 
            // fall through
          case 99: break;
          case 48: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
                return new Symbol(sym.mientras, yychar, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 49: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
                return new Symbol(sym.seleccion, yychar, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 50: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
                return new Symbol(sym.imprimir, yychar, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 51: 
            { addLexema("reservada", yytext(), yyline, yychar);            
                return  new Symbol(sym.tcontinuar, yychar, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 52: 
            { addLexema("true", yytext(), yyline, yychar);  	        
                return new Symbol(sym.verdadero, yychar, yyline, true);
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
