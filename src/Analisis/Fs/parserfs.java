
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Fs;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserfs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserfs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserfs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserfs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\031" +
    "\005\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\005\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\004\000\002\030\010\000\002" +
    "\030\007\000\002\035\006\000\002\035\004\000\002\025" +
    "\004\000\002\027\004\000\002\024\015\000\002\024\015" +
    "\000\002\010\003\000\002\010\003\000\002\023\011\000" +
    "\002\021\011\000\002\021\013\000\002\022\003\000\002" +
    "\022\005\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\004\000\002\020\006\000\002\017\005\000\002\017" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\007\000\002\016\006\000\002" +
    "\016\007\000\002\033\005\000\002\033\003\000\002\036" +
    "\005\000\002\036\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\012\007\000" +
    "\002\006\004\000\002\006\004\000\002\007\004\000\002" +
    "\007\004\000\002\011\006\000\002\011\006\000\002\011" +
    "\005\000\002\037\007\000\002\037\005\000\002\040\011" +
    "\000\002\040\012\000\002\043\004\000\002\043\003\000" +
    "\002\041\006\000\002\042\005\000\002\044\004\000\002" +
    "\045\006\000\002\034\005\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\032\012\040\020\011\022\031\033\015\036" +
    "\007\037\041\045\014\056\024\062\044\063\035\064\010" +
    "\070\036\001\002\000\036\002\ufffa\012\ufffa\020\ufffa\022" +
    "\ufffa\033\ufffa\036\ufffa\037\ufffa\045\ufffa\056\ufffa\057\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\070\ufffa\001\002\000\004\055" +
    "\345\001\002\000\036\002\uffdd\012\uffdd\020\uffdd\022\uffdd" +
    "\033\uffdd\036\uffdd\037\uffdd\045\uffdd\056\uffdd\057\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\070\uffdd\001\002\000\004\061\314" +
    "\001\002\000\004\055\313\001\002\000\004\061\272\001" +
    "\002\000\036\002\uffe3\012\uffe3\020\uffe3\022\uffe3\033\uffe3" +
    "\036\uffe3\037\uffe3\045\uffe3\056\uffe3\057\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\070\uffe3\001\002\000\004\055\271\001\002" +
    "\000\004\061\266\001\002\000\004\061\260\001\002\000" +
    "\034\002\000\012\040\020\011\022\031\033\015\036\007" +
    "\037\041\045\014\056\024\062\044\063\035\064\010\070" +
    "\036\001\002\000\004\055\257\001\002\000\036\002\uffdf" +
    "\012\uffdf\020\uffdf\022\uffdf\033\uffdf\036\uffdf\037\uffdf\045" +
    "\uffdf\056\uffdf\057\uffdf\062\uffdf\063\uffdf\064\uffdf\070\uffdf" +
    "\001\002\000\036\002\ufff9\012\ufff9\020\ufff9\022\ufff9\033" +
    "\ufff9\036\ufff9\037\ufff9\045\ufff9\056\ufff9\057\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\070\ufff9\001\002\000\036\002\uffe4\012" +
    "\uffe4\020\uffe4\022\uffe4\033\uffe4\036\uffe4\037\uffe4\045\uffe4" +
    "\056\uffe4\057\uffe4\062\uffe4\063\uffe4\064\uffe4\070\uffe4\001" +
    "\002\000\022\015\145\025\057\034\144\035\146\050\052" +
    "\051\046\052\045\053\047\001\002\000\032\012\040\020" +
    "\011\022\031\033\015\036\007\037\041\045\014\056\024" +
    "\062\044\063\035\064\010\070\036\001\002\000\004\055" +
    "\252\001\002\000\010\025\225\054\226\055\uffd2\001\002" +
    "\000\036\002\ufff8\012\ufff8\020\ufff8\022\ufff8\033\ufff8\036" +
    "\ufff8\037\ufff8\045\ufff8\056\ufff8\057\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\070\ufff8\001\002\000\004\055\224\001\002\000" +
    "\026\006\067\032\071\046\061\061\077\062\101\072\100" +
    "\073\073\074\075\075\062\076\066\001\002\000\036\002" +
    "\uffde\012\uffde\020\uffde\022\uffde\033\uffde\036\uffde\037\uffde" +
    "\045\uffde\056\uffde\057\uffde\062\uffde\063\uffde\064\uffde\070" +
    "\uffde\001\002\000\004\055\222\001\002\000\004\055\221" +
    "\001\002\000\004\055\220\001\002\000\004\062\217\001" +
    "\002\000\036\002\uffe0\012\uffe0\020\uffe0\022\uffe0\033\uffe0" +
    "\036\uffe0\037\uffe0\045\uffe0\056\uffe0\057\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\070\uffe0\001\002\000\004\061\176\001\002" +
    "\000\004\062\162\001\002\000\036\002\uffdc\012\uffdc\020" +
    "\uffdc\022\uffdc\033\uffdc\036\uffdc\037\uffdc\045\uffdc\056\uffdc" +
    "\057\uffdc\062\uffdc\063\uffdc\064\uffdc\070\uffdc\001\002\000" +
    "\004\002\161\001\002\000\026\015\050\016\053\025\057" +
    "\034\051\035\055\050\052\051\046\052\045\053\047\061" +
    "\054\001\002\000\026\006\uffd4\032\uffd4\046\uffd4\061\uffd4" +
    "\062\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\001" +
    "\002\000\026\006\uffd5\032\uffd5\046\uffd5\061\uffd5\062\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\001\002\000" +
    "\026\006\uffd3\032\uffd3\046\uffd3\061\uffd3\062\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\001\002\000\026\006" +
    "\067\032\071\046\061\061\077\062\101\072\100\073\073" +
    "\074\075\075\062\076\066\001\002\000\052\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\014\uffaa\017\uffaa" +
    "\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\054" +
    "\uffaa\055\uffaa\057\uffaa\060\uffaa\065\uffaa\071\uffaa\001\002" +
    "\000\026\006\uffd6\032\uffd6\046\uffd6\061\uffd6\062\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\001\002\000\004" +
    "\062\156\001\002\000\026\006\067\032\071\046\061\061" +
    "\077\062\101\072\100\073\073\074\075\075\062\076\066" +
    "\001\002\000\052\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\014\uffa8\017\uffa8\023\uffa8\024\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\054\uffa8\055\uffa8\057\uffa8\060" +
    "\uffa8\065\uffa8\071\uffa8\001\002\000\026\006\067\032\071" +
    "\046\061\061\077\062\101\072\100\073\073\074\075\075" +
    "\062\076\066\001\002\000\026\006\uffd7\032\uffd7\046\uffd7" +
    "\061\uffd7\062\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076" +
    "\uffd7\001\002\000\052\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\014\uffac\017\uffac\023\uffac\024\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\054\uffac\055\uffac\057\uffac" +
    "\060\uffac\065\uffac\071\uffac\001\002\000\052\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014\uffb3\017\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\054" +
    "\uffb3\055\uffb3\057\uffb3\060\uffb3\065\uffb3\071\uffb3\001\002" +
    "\000\052\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\014\uffb6\017\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\065" +
    "\uffb6\071\uffb6\001\002\000\024\010\uffc7\011\uffc7\014\uffc7" +
    "\017\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\065\uffc7\001" +
    "\002\000\060\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\014\uffad\015\145\017\uffad\023\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\034\144\035\146\054\uffad" +
    "\055\uffad\057\uffad\060\uffad\065\uffad\071\uffad\001\002\000" +
    "\052\004\115\005\120\006\116\007\121\010\uffbf\011\uffbf" +
    "\014\uffbf\017\uffbf\023\130\024\133\026\135\027\132\030" +
    "\131\031\134\054\uffbf\055\uffbf\057\uffbf\060\uffbf\065\uffbf" +
    "\071\117\001\002\000\052\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\014\uffb0\017\uffb0\023\uffb0\024\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\054\uffb0\055\uffb0\057" +
    "\uffb0\060\uffb0\065\uffb0\071\uffb0\001\002\000\026\006\067" +
    "\032\071\046\061\061\077\062\101\072\100\073\073\074" +
    "\075\075\062\076\066\001\002\000\052\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\014\uffaf\017\uffaf\023" +
    "\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\054\uffaf" +
    "\055\uffaf\057\uffaf\060\uffaf\065\uffaf\071\uffaf\001\002\000" +
    "\026\006\067\032\071\046\061\061\077\062\101\072\100" +
    "\073\073\074\075\075\062\076\066\001\002\000\012\010" +
    "\106\011\104\017\103\055\uffd9\001\002\000\052\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1\017" +
    "\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\065\uffb1\071\uffb1\001" +
    "\002\000\024\010\uffc6\011\uffc6\014\uffc6\017\uffc6\054\uffc6" +
    "\055\uffc6\057\uffc6\060\uffc6\065\uffc6\001\002\000\052\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5" +
    "\017\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5\065\uffb5\071\uffb5" +
    "\001\002\000\052\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\011\uffae\014\uffae\017\uffae\023\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\054\uffae\055\uffae\057\uffae\060" +
    "\uffae\065\uffae\071\uffae\001\002\000\026\006\067\032\071" +
    "\046\061\061\077\062\101\072\100\073\073\074\075\075" +
    "\062\076\066\001\002\000\052\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\014\uffb2\017\uffb2\023\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\054\uffb2\055\uffb2" +
    "\057\uffb2\060\uffb2\065\uffb2\071\uffb2\001\002\000\064\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\014\uffb4" +
    "\015\050\016\053\017\uffb4\023\uffb4\024\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\034\051\035\055\054\uffb4\055\uffb4" +
    "\057\uffb4\060\uffb4\061\054\065\uffb4\071\uffb4\001\002\000" +
    "\012\010\106\011\104\017\103\060\105\001\002\000\026" +
    "\006\067\032\071\046\061\061\077\062\101\072\100\073" +
    "\073\074\075\075\062\076\066\001\002\000\026\006\067" +
    "\032\071\046\061\061\077\062\101\072\100\073\073\074" +
    "\075\075\062\076\066\001\002\000\052\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\014\uffb8\017\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\054\uffb8" +
    "\055\uffb8\057\uffb8\060\uffb8\065\uffb8\071\uffb8\001\002\000" +
    "\026\006\067\032\071\046\061\061\077\062\101\072\100" +
    "\073\073\074\075\075\062\076\066\001\002\000\024\010" +
    "\uffc8\011\uffc8\014\uffc8\017\103\054\uffc8\055\uffc8\057\uffc8" +
    "\060\uffc8\065\uffc8\001\002\000\024\010\106\011\uffc9\014" +
    "\uffc9\017\103\054\uffc9\055\uffc9\057\uffc9\060\uffc9\065\uffc9" +
    "\001\002\000\012\010\106\011\104\017\103\065\112\001" +
    "\002\000\026\006\067\032\071\046\061\061\077\062\101" +
    "\072\100\073\073\074\075\075\062\076\066\001\002\000" +
    "\024\010\106\011\104\014\uffab\017\103\054\uffab\055\uffab" +
    "\057\uffab\060\uffab\065\uffab\001\002\000\052\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\014\uffb9\017\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\054" +
    "\uffb9\055\uffb9\057\uffb9\060\uffb9\065\uffb9\071\uffb9\001\002" +
    "\000\026\006\067\032\071\046\061\061\077\062\101\072" +
    "\100\073\073\074\075\075\062\076\066\001\002\000\026" +
    "\006\067\032\071\046\061\061\077\062\101\072\100\073" +
    "\073\074\075\075\062\076\066\001\002\000\026\006\067" +
    "\032\071\046\061\061\077\062\101\072\100\073\073\074" +
    "\075\075\062\076\066\001\002\000\026\006\067\032\071" +
    "\046\061\061\077\062\101\072\100\073\073\074\075\075" +
    "\062\076\066\001\002\000\026\006\067\032\071\046\061" +
    "\061\077\062\101\072\100\073\073\074\075\075\062\076" +
    "\066\001\002\000\052\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\014\uffbc\017\uffbc\023\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\054\uffbc\055\uffbc\057\uffbc" +
    "\060\uffbc\065\uffbc\071\117\001\002\000\052\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd\017\uffbd" +
    "\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\065\uffbd\071\117\001\002" +
    "\000\052\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\014\uffba\017\uffba\023\uffba\024\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\054\uffba\055\uffba\057\uffba\060\uffba\065" +
    "\uffba\071\uffba\001\002\000\052\004\uffbb\005\120\006\uffbb" +
    "\007\121\010\uffbb\011\uffbb\014\uffbb\017\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\054\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\065\uffbb\071\117\001\002\000\052\004" +
    "\uffbe\005\120\006\uffbe\007\121\010\uffbe\011\uffbe\014\uffbe" +
    "\017\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\065\uffbe\071\117" +
    "\001\002\000\052\004\uffb7\005\120\006\uffb7\007\121\010" +
    "\uffb7\011\uffb7\014\uffb7\017\uffb7\023\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\054\uffb7\055\uffb7\057\uffb7\060" +
    "\uffb7\065\uffb7\071\117\001\002\000\026\006\067\032\071" +
    "\046\061\061\077\062\101\072\100\073\073\074\075\075" +
    "\062\076\066\001\002\000\026\006\067\032\071\046\061" +
    "\061\077\062\101\072\100\073\073\074\075\075\062\076" +
    "\066\001\002\000\026\006\067\032\071\046\061\061\077" +
    "\062\101\072\100\073\073\074\075\075\062\076\066\001" +
    "\002\000\026\006\067\032\071\046\061\061\077\062\101" +
    "\072\100\073\073\074\075\075\062\076\066\001\002\000" +
    "\026\006\067\032\071\046\061\061\077\062\101\072\100" +
    "\073\073\074\075\075\062\076\066\001\002\000\026\006" +
    "\067\032\071\046\061\061\077\062\101\072\100\073\073" +
    "\074\075\075\062\076\066\001\002\000\036\004\115\005" +
    "\120\006\116\007\121\010\uffc5\011\uffc5\014\uffc5\017\uffc5" +
    "\054\uffc5\055\uffc5\057\uffc5\060\uffc5\065\uffc5\071\117\001" +
    "\002\000\036\004\115\005\120\006\116\007\121\010\uffc3" +
    "\011\uffc3\014\uffc3\017\uffc3\054\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\065\uffc3\071\117\001\002\000\036\004\115\005\120" +
    "\006\116\007\121\010\uffc1\011\uffc1\014\uffc1\017\uffc1\054" +
    "\uffc1\055\uffc1\057\uffc1\060\uffc1\065\uffc1\071\117\001\002" +
    "\000\036\004\115\005\120\006\116\007\121\010\uffc4\011" +
    "\uffc4\014\uffc4\017\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4" +
    "\065\uffc4\071\117\001\002\000\036\004\115\005\120\006" +
    "\116\007\121\010\uffc2\011\uffc2\014\uffc2\017\uffc2\054\uffc2" +
    "\055\uffc2\057\uffc2\060\uffc2\065\uffc2\071\117\001\002\000" +
    "\036\004\115\005\120\006\116\007\121\010\uffc0\011\uffc0" +
    "\014\uffc0\017\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0\065" +
    "\uffc0\071\117\001\002\000\052\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\014\uffa9\017\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\054\uffa9\055\uffa9" +
    "\057\uffa9\060\uffa9\065\uffa9\071\uffa9\001\002\000\026\006" +
    "\067\032\071\046\061\061\077\062\101\072\100\073\073" +
    "\074\075\075\062\076\066\001\002\000\052\004\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\014\uffa7\017\uffa7" +
    "\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\065\uffa7\071\uffa7\001\002" +
    "\000\012\010\106\011\104\014\150\017\103\001\002\000" +
    "\072\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\014\uffa6\015\uffa6\017\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\034\uffa6\035\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057\uffa6\060" +
    "\uffa6\065\uffa6\071\uffa6\001\002\000\006\054\153\060\154" +
    "\001\002\000\014\010\106\011\104\017\103\054\uff98\060" +
    "\uff98\001\002\000\026\006\067\032\071\046\061\061\077" +
    "\062\101\072\100\073\073\074\075\075\062\076\066\001" +
    "\002\000\052\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\014\uff9a\017\uff9a\023\uff9a\024\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\054\uff9a\055\uff9a\057\uff9a\060\uff9a" +
    "\065\uff9a\071\uff9a\001\002\000\014\010\106\011\104\017" +
    "\103\054\uff99\060\uff99\001\002\000\072\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\014\uffa4\015\uffa4\017" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\034\uffa4\035\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\065\uffa4\071\uffa4" +
    "\001\002\000\012\010\106\011\104\014\160\017\103\001" +
    "\002\000\072\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\014\uffa5\015\uffa5\017\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\034\uffa5\035\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\057" +
    "\uffa5\060\uffa5\065\uffa5\071\uffa5\001\002\000\004\002\001" +
    "\001\002\000\004\061\163\001\002\000\006\060\166\070" +
    "\164\001\002\000\004\062\175\001\002\000\006\054\170" +
    "\060\171\001\002\000\004\056\024\001\002\000\036\002" +
    "\ufff5\012\ufff5\020\ufff5\022\ufff5\033\ufff5\036\ufff5\037\ufff5" +
    "\045\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\064\ufff5\070" +
    "\ufff5\001\002\000\004\070\173\001\002\000\004\056\024" +
    "\001\002\000\036\002\ufff6\012\ufff6\020\ufff6\022\ufff6\033" +
    "\ufff6\036\ufff6\037\ufff6\045\ufff6\056\ufff6\057\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\070\ufff6\001\002\000\004\062\174\001" +
    "\002\000\006\054\ufff4\060\ufff4\001\002\000\006\054\ufff3" +
    "\060\ufff3\001\002\000\026\006\067\032\071\046\061\061" +
    "\077\062\101\072\100\073\073\074\075\075\062\076\066" +
    "\001\002\000\012\010\106\011\104\017\103\060\200\001" +
    "\002\000\004\056\201\001\002\000\032\012\040\020\011" +
    "\022\031\033\015\036\007\037\041\045\014\056\024\062" +
    "\044\063\035\064\010\070\036\001\002\000\034\012\040" +
    "\020\011\022\031\033\015\036\007\037\041\045\014\056" +
    "\024\057\206\062\044\063\035\064\010\070\036\001\002" +
    "\000\036\002\ufffe\012\ufffe\020\ufffe\022\ufffe\033\ufffe\036" +
    "\ufffe\037\ufffe\045\ufffe\056\ufffe\057\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\070\ufffe\001\002\000\004\055\216\001\002\000" +
    "\036\002\ufffd\012\ufffd\020\ufffd\022\ufffd\033\ufffd\036\ufffd" +
    "\037\ufffd\045\ufffd\056\ufffd\057\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\070\ufffd\001\002\000\040\002\uffeb\012\uffeb\013\210" +
    "\020\uffeb\022\uffeb\033\uffeb\036\uffeb\037\uffeb\045\uffeb\056" +
    "\uffeb\057\uffeb\062\uffeb\063\uffeb\064\uffeb\070\uffeb\001\002" +
    "\000\036\002\ufffc\012\ufffc\020\ufffc\022\ufffc\033\ufffc\036" +
    "\ufffc\037\ufffc\045\ufffc\056\ufffc\057\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\070\ufffc\001\002\000\006\012\040\056\212\001" +
    "\002\000\036\002\uffea\012\uffea\020\uffea\022\uffea\033\uffea" +
    "\036\uffea\037\uffea\045\uffea\056\uffea\057\uffea\062\uffea\063" +
    "\uffea\064\uffea\070\uffea\001\002\000\032\012\040\020\011" +
    "\022\031\033\015\036\007\037\041\045\014\056\024\062" +
    "\044\063\035\064\010\070\036\001\002\000\036\002\uffe9" +
    "\012\uffe9\020\uffe9\022\uffe9\033\uffe9\036\uffe9\037\uffe9\045" +
    "\uffe9\056\uffe9\057\uffe9\062\uffe9\063\uffe9\064\uffe9\070\uffe9" +
    "\001\002\000\034\012\040\020\011\022\031\033\015\036" +
    "\007\037\041\045\014\056\024\057\215\062\044\063\035" +
    "\064\010\070\036\001\002\000\036\002\uffe8\012\uffe8\020" +
    "\uffe8\022\uffe8\033\uffe8\036\uffe8\037\uffe8\045\uffe8\056\uffe8" +
    "\057\uffe8\062\uffe8\063\uffe8\064\uffe8\070\uffe8\001\002\000" +
    "\036\002\ufffb\012\ufffb\020\ufffb\022\ufffb\033\ufffb\036\ufffb" +
    "\037\ufffb\045\ufffb\056\ufffb\057\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\070\ufffb\001\002\000\010\025\uffca\054\uffca\055\uffca" +
    "\001\002\000\036\002\ufff2\012\ufff2\020\ufff2\022\ufff2\033" +
    "\ufff2\036\ufff2\037\ufff2\045\ufff2\056\ufff2\057\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\070\ufff2\001\002\000\036\002\uffe1\012" +
    "\uffe1\020\uffe1\022\uffe1\033\uffe1\036\uffe1\037\uffe1\045\uffe1" +
    "\056\uffe1\057\uffe1\062\uffe1\063\uffe1\064\uffe1\070\uffe1\001" +
    "\002\000\036\002\uffdb\012\uffdb\020\uffdb\022\uffdb\033\uffdb" +
    "\036\uffdb\037\uffdb\045\uffdb\056\uffdb\057\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\070\uffdb\001\002\000\012\010\106\011\104" +
    "\017\103\055\uff9b\001\002\000\036\002\uffe6\012\uffe6\020" +
    "\uffe6\022\uffe6\033\uffe6\036\uffe6\037\uffe6\045\uffe6\056\uffe6" +
    "\057\uffe6\062\uffe6\063\uffe6\064\uffe6\070\uffe6\001\002\000" +
    "\032\006\067\015\230\032\071\046\061\056\231\061\077" +
    "\062\101\072\100\073\073\074\075\075\062\076\066\001" +
    "\002\000\004\062\227\001\002\000\010\025\uffcb\054\uffcb" +
    "\055\uffcb\001\002\000\030\006\067\014\245\032\071\046" +
    "\061\061\077\062\101\072\100\073\073\074\075\075\062" +
    "\076\066\001\002\000\004\062\234\001\002\000\012\010" +
    "\106\011\104\017\103\055\uffd1\001\002\000\006\054\240" +
    "\057\237\001\002\000\004\065\235\001\002\000\026\006" +
    "\067\032\071\046\061\061\077\062\101\072\100\073\073" +
    "\074\075\075\062\076\066\001\002\000\014\010\106\011" +
    "\104\017\103\054\uffa2\057\uffa2\001\002\000\004\055\uffce" +
    "\001\002\000\004\062\241\001\002\000\004\065\242\001" +
    "\002\000\026\006\067\032\071\046\061\061\077\062\101" +
    "\072\100\073\073\074\075\075\062\076\066\001\002\000" +
    "\014\010\106\011\104\017\103\054\uffa3\057\uffa3\001\002" +
    "\000\006\014\250\054\247\001\002\000\004\055\uffcf\001" +
    "\002\000\014\010\106\011\104\014\uffcc\017\103\054\uffcc" +
    "\001\002\000\026\006\067\032\071\046\061\061\077\062" +
    "\101\072\100\073\073\074\075\075\062\076\066\001\002" +
    "\000\004\055\uffd0\001\002\000\014\010\106\011\104\014" +
    "\uffcd\017\103\054\uffcd\001\002\000\036\002\uffe2\012\uffe2" +
    "\020\uffe2\022\uffe2\033\uffe2\036\uffe2\037\uffe2\045\uffe2\056" +
    "\uffe2\057\uffe2\062\uffe2\063\uffe2\064\uffe2\070\uffe2\001\002" +
    "\000\034\012\040\020\011\022\031\033\015\036\007\037" +
    "\041\045\014\056\024\057\254\062\044\063\035\064\010" +
    "\070\036\001\002\000\042\002\uffff\012\uffff\020\uffff\021" +
    "\uffff\022\uffff\033\uffff\036\uffff\037\uffff\045\uffff\056\uffff" +
    "\057\uffff\062\uffff\063\uffff\064\uffff\066\uffff\070\uffff\001" +
    "\002\000\026\006\067\032\071\046\061\061\077\062\101" +
    "\072\100\073\073\074\075\075\062\076\066\001\002\000" +
    "\012\010\106\011\104\017\103\055\uffd8\001\002\000\036" +
    "\002\uffe5\012\uffe5\020\uffe5\022\uffe5\033\uffe5\036\uffe5\037" +
    "\uffe5\045\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\070\uffe5\001\002\000\026\006\067\032\071\046\061\061" +
    "\077\062\101\072\100\073\073\074\075\075\062\076\066" +
    "\001\002\000\012\010\106\011\104\017\103\060\262\001" +
    "\002\000\004\056\263\001\002\000\032\012\040\020\011" +
    "\022\031\033\015\036\007\037\041\045\014\056\024\062" +
    "\044\063\035\064\010\070\036\001\002\000\034\012\040" +
    "\020\011\022\031\033\015\036\007\037\041\045\014\056" +
    "\024\057\265\062\044\063\035\064\010\070\036\001\002" +
    "\000\036\002\uffec\012\uffec\020\uffec\022\uffec\033\uffec\036" +
    "\uffec\037\uffec\045\uffec\056\uffec\057\uffec\062\uffec\063\uffec" +
    "\064\uffec\070\uffec\001\002\000\026\006\067\032\071\046" +
    "\061\061\077\062\101\072\100\073\073\074\075\075\062" +
    "\076\066\001\002\000\012\010\106\011\104\017\103\060" +
    "\270\001\002\000\004\055\uffda\001\002\000\036\002\uffe7" +
    "\012\uffe7\020\uffe7\022\uffe7\033\uffe7\036\uffe7\037\uffe7\045" +
    "\uffe7\056\uffe7\057\uffe7\062\uffe7\063\uffe7\064\uffe7\070\uffe7" +
    "\001\002\000\026\006\067\032\071\046\061\061\077\062" +
    "\101\072\100\073\073\074\075\075\062\076\066\001\002" +
    "\000\012\010\106\011\104\017\103\060\274\001\002\000" +
    "\004\056\275\001\002\000\004\066\277\001\002\000\010" +
    "\021\306\057\304\066\277\001\002\000\026\006\067\032" +
    "\071\046\061\061\077\062\101\072\100\073\073\074\075" +
    "\075\062\076\066\001\002\000\010\021\uff9e\057\uff9e\066" +
    "\uff9e\001\002\000\012\010\106\011\104\017\103\065\302" +
    "\001\002\000\004\056\024\001\002\000\010\021\uff9d\057" +
    "\uff9d\066\uff9d\001\002\000\036\002\uffa1\012\uffa1\020\uffa1" +
    "\022\uffa1\033\uffa1\036\uffa1\037\uffa1\045\uffa1\056\uffa1\057" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\070\uffa1\001\002\000\004" +
    "\057\312\001\002\000\004\065\310\001\002\000\010\021" +
    "\uff9f\057\uff9f\066\uff9f\001\002\000\004\056\024\001\002" +
    "\000\004\057\uff9c\001\002\000\036\002\uffa0\012\uffa0\020" +
    "\uffa0\022\uffa0\033\uffa0\036\uffa0\037\uffa0\045\uffa0\056\uffa0" +
    "\057\uffa0\062\uffa0\063\uffa0\064\uffa0\070\uffa0\001\002\000" +
    "\036\002\ufff1\012\ufff1\020\ufff1\022\ufff1\033\ufff1\036\ufff1" +
    "\037\ufff1\045\ufff1\056\ufff1\057\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\070\ufff1\001\002\000\006\062\320\070\036\001\002" +
    "\000\016\015\145\025\057\050\052\051\046\052\045\053" +
    "\047\001\002\000\004\055\335\001\002\000\004\055\321" +
    "\001\002\000\020\015\050\016\053\025\057\050\052\051" +
    "\046\052\045\053\047\001\002\000\026\006\067\032\071" +
    "\046\061\061\077\062\101\072\100\073\073\074\075\075" +
    "\062\076\066\001\002\000\012\010\106\011\104\017\103" +
    "\055\323\001\002\000\004\062\327\001\002\000\004\060" +
    "\uffed\001\002\000\004\060\uffee\001\002\000\010\015\145" +
    "\034\144\035\146\001\002\000\012\015\050\016\053\034" +
    "\051\035\055\001\002\000\004\060\331\001\002\000\004" +
    "\056\332\001\002\000\032\012\040\020\011\022\031\033" +
    "\015\036\007\037\041\045\014\056\024\062\044\063\035" +
    "\064\010\070\036\001\002\000\034\012\040\020\011\022" +
    "\031\033\015\036\007\037\041\045\014\056\024\057\334" +
    "\062\044\063\035\064\010\070\036\001\002\000\036\002" +
    "\uffef\012\uffef\020\uffef\022\uffef\033\uffef\036\uffef\037\uffef" +
    "\045\uffef\056\uffef\057\uffef\062\uffef\063\uffef\064\uffef\070" +
    "\uffef\001\002\000\026\006\067\032\071\046\061\061\077" +
    "\062\101\072\100\073\073\074\075\075\062\076\066\001" +
    "\002\000\012\010\106\011\104\017\103\055\337\001\002" +
    "\000\004\062\327\001\002\000\004\060\341\001\002\000" +
    "\004\056\342\001\002\000\032\012\040\020\011\022\031" +
    "\033\015\036\007\037\041\045\014\056\024\062\044\063" +
    "\035\064\010\070\036\001\002\000\034\012\040\020\011" +
    "\022\031\033\015\036\007\037\041\045\014\056\024\057" +
    "\344\062\044\063\035\064\010\070\036\001\002\000\036" +
    "\002\ufff0\012\ufff0\020\ufff0\022\ufff0\033\ufff0\036\ufff0\037" +
    "\ufff0\045\ufff0\056\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\070\ufff0\001\002\000\036\002\ufff7\012\ufff7\020\ufff7\022" +
    "\ufff7\033\ufff7\036\ufff7\037\ufff7\045\ufff7\056\ufff7\057\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\070\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\054\002\042\006\024\007\033\011\022\015" +
    "\003\016\012\017\027\020\016\021\021\023\011\024\036" +
    "\025\031\026\017\027\005\030\026\031\020\032\015\036" +
    "\025\040\041\044\032\045\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\024\007\033\011\022\015\202\016\012\017\027\020\016" +
    "\021\021\023\011\024\036\025\031\026\017\027\005\030" +
    "\206\031\204\036\025\040\041\044\032\045\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\254\001\001\000\052\006\024" +
    "\007\033\011\022\015\003\016\012\017\027\020\016\021" +
    "\021\023\011\024\036\025\031\026\017\027\005\030\026" +
    "\031\020\032\252\036\025\040\041\044\032\045\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\064\004\222\005\073\006" +
    "\067\007\075\011\063\012\062\045\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\064\004\156\005\073\006" +
    "\067\007\075\011\063\012\062\045\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\064\004\151\005\073\006\067\007\075\011\063\012\062" +
    "\034\150\045\057\001\001\000\002\001\001\000\022\003" +
    "\064\004\071\005\073\006\067\007\075\011\063\012\062" +
    "\045\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\126\006\067\007\075\011\063\045\057\001\001\000\002" +
    "\001\001\000\014\003\113\006\067\007\075\011\063\045" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\064\004\101\005\073\006\067\007\075\011\063\012\062" +
    "\045\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\064\004\110\005\073\006\067" +
    "\007\075\011\063\012\062\045\057\001\001\000\022\003" +
    "\064\004\107\005\073\006\067\007\075\011\063\012\062" +
    "\045\057\001\001\000\002\001\001\000\022\003\064\004" +
    "\106\005\073\006\067\007\075\011\063\012\062\045\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\064\004\112\005\073\006\067\007\075" +
    "\011\063\012\062\045\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\125\006\067\007\075\011\063" +
    "\045\057\001\001\000\014\003\124\006\067\007\075\011" +
    "\063\045\057\001\001\000\014\003\123\006\067\007\075" +
    "\011\063\045\057\001\001\000\014\003\122\006\067\007" +
    "\075\011\063\045\057\001\001\000\014\003\121\006\067" +
    "\007\075\011\063\045\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\142\006\067\007" +
    "\075\011\063\045\057\001\001\000\014\003\141\006\067" +
    "\007\075\011\063\045\057\001\001\000\014\003\140\006" +
    "\067\007\075\011\063\045\057\001\001\000\014\003\137" +
    "\006\067\007\075\011\063\045\057\001\001\000\014\003" +
    "\136\006\067\007\075\011\063\045\057\001\001\000\014" +
    "\003\135\006\067\007\075\011\063\045\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\064\004\146\005\073\006\067\007\075" +
    "\011\063\012\062\045\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\064\004\154\005\073\006\067\007" +
    "\075\011\063\012\062\045\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\064" +
    "\004\176\005\073\006\067\007\075\011\063\012\062\045" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\006\024\007\033\011\022\015\003\016\012\017\027\020" +
    "\016\021\021\023\011\024\036\025\031\026\017\027\005" +
    "\030\026\031\020\032\201\036\025\040\041\044\032\045" +
    "\004\001\001\000\050\006\024\007\033\011\022\015\202" +
    "\016\012\017\027\020\016\021\021\023\011\024\036\025" +
    "\031\026\017\027\005\030\206\031\204\036\025\040\041" +
    "\044\032\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\212\022\210\001\001\000\002\001\001\000" +
    "\052\006\024\007\033\011\022\015\003\016\012\017\027" +
    "\020\016\021\021\023\011\024\036\025\031\026\017\027" +
    "\005\030\026\031\020\032\213\036\025\040\041\044\032" +
    "\045\004\001\001\000\002\001\001\000\050\006\024\007" +
    "\033\011\022\015\202\016\012\017\027\020\016\021\021" +
    "\023\011\024\036\025\031\026\017\027\005\030\206\031" +
    "\204\036\025\040\041\044\032\045\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\064\004\231\005\073\006" +
    "\067\007\075\011\063\012\062\045\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\064\004\245\005" +
    "\073\006\067\007\075\011\063\012\062\033\243\045\057" +
    "\001\001\000\004\037\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\064\004\235" +
    "\005\073\006\067\007\075\011\063\012\062\045\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\064\004\242\005\073\006" +
    "\067\007\075\011\063\012\062\045\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\064\004\250\005\073\006\067\007\075" +
    "\011\063\012\062\045\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\024\007\033" +
    "\011\022\015\202\016\012\017\027\020\016\021\021\023" +
    "\011\024\036\025\031\026\017\027\005\030\206\031\204" +
    "\036\025\040\041\044\032\045\203\001\001\000\002\001" +
    "\001\000\022\003\064\004\255\005\073\006\067\007\075" +
    "\011\063\012\062\045\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\064\004\260\005\073\006\067" +
    "\007\075\011\063\012\062\045\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\006\024\007\033\011\022" +
    "\015\003\016\012\017\027\020\016\021\021\023\011\024" +
    "\036\025\031\026\017\027\005\030\026\031\020\032\263" +
    "\036\025\040\041\044\032\045\004\001\001\000\050\006" +
    "\024\007\033\011\022\015\202\016\012\017\027\020\016" +
    "\021\021\023\011\024\036\025\031\026\017\027\005\030" +
    "\206\031\204\036\025\040\041\044\032\045\203\001\001" +
    "\000\002\001\001\000\022\003\064\004\266\005\073\006" +
    "\067\007\075\011\063\012\062\045\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\064\004\272\005\073\006\067\007\075\011\063\012\062" +
    "\045\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\277\043\275\001\001\000\006\041\306\042\304" +
    "\001\001\000\022\003\064\004\300\005\073\006\067\007" +
    "\075\011\063\012\062\045\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\314" +
    "\016\316\017\315\036\025\001\001\000\004\014\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\055" +
    "\001\001\000\022\003\064\004\321\005\073\006\067\007" +
    "\075\011\063\012\062\045\057\001\001\000\002\001\001" +
    "\000\012\006\323\007\324\010\327\011\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\006" +
    "\024\007\033\011\022\015\003\016\012\017\027\020\016" +
    "\021\021\023\011\024\036\025\031\026\017\027\005\030" +
    "\026\031\020\032\332\036\025\040\041\044\032\045\004" +
    "\001\001\000\050\006\024\007\033\011\022\015\202\016" +
    "\012\017\027\020\016\021\021\023\011\024\036\025\031" +
    "\026\017\027\005\030\206\031\204\036\025\040\041\044" +
    "\032\045\203\001\001\000\002\001\001\000\022\003\064" +
    "\004\335\005\073\006\067\007\075\011\063\012\062\045" +
    "\057\001\001\000\002\001\001\000\012\006\323\007\324" +
    "\010\337\011\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\024\007\033\011\022\015\003\016\012" +
    "\017\027\020\016\021\021\023\011\024\036\025\031\026" +
    "\017\027\005\030\026\031\020\032\342\036\025\040\041" +
    "\044\032\045\004\001\001\000\050\006\024\007\033\011" +
    "\022\015\202\016\012\017\027\020\016\021\021\023\011" +
    "\024\036\025\031\026\017\027\005\030\206\031\204\036" +
    "\025\040\041\044\032\045\203\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserfs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserfs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserfs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserfs$actions {
  private final parserfs parser;

  /** Constructor */
  CUP$parserfs$actions(parserfs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action_part00000000(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserfs$result;

      /* select the action based on the action number */
      switch (CUP$parserfs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = start_val;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserfs$parser.done_parsing();
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 setInstrucciones(valor); 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveI INSTRUCCIONES llaveD 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BLOQUE",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES BLOQUE 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCIONES METODO 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 Bloque met = new Bloque(); met.add(valor); RESULT = met; 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= BLOQUE 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= METODO 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODO ::= funcion identificador pari PARAMETROS pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Nodo> parametros = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre, parametros, instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODO ::= funcion identificador pari pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre,  instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMETROS ::= PARAMETROS coma var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;       
        
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETROS ::= var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 
            ArrayList<Nodo> l = new ArrayList<Nodo>(); 
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BREAK ::= detener puntocoma 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT  = new Romper(ileft, iright);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BREAK",19, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTINUE ::= tcontinuar puntocoma 
            {
              Sentencia RESULT =null;
		 RESULT = new Continuar();
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CONTINUE",21, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FOR ::= para pari ASIGNACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FOR ::= para pari DECLARACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ACTUALIZACION ::= DECREMENTO 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = d;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ACTUALIZACION ::= AUMENTO 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = a;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHILE ::= mientras pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new While(cond, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(cond,met);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD sino ELSE 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new IfElse(cond,met,inst2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSE ::= IF 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sent;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(new BoolExp(true),met );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= IMPRIMIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;
		int wileleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int wileright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo wile = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = wile;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int aumentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int aumentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp aument = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = aument;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo fr = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = fr;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sw;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= BREAK 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= CONTINUE 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= SELECCIONAR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= RETORNAR puntocoma 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPRIMIR ::= imprimir pari EXPL pard 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Imprimir(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= identificador TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(new idExp(nombreleft, nombreright, nombre), valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= ACCESO TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(acceso, valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TASIGNACION ::= igual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TASIGNACION ::= masigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TASIGNACION ::= menosigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TASIGNACION ::= multiigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TASIGNACION ::= divigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= LID 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT  = new Declaracion(lleft, lright, l);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= LID igual EXPL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Declaracion(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= LID igual corchetei LARREGLO corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valor = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= LID igual corchetei corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= LID igual llaveI LATRIBUTO llaveD 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Atributo atributos = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Declaracion(lleft, lright, l, atributos);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LARREGLO ::= LARREGLO coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LARREGLO ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LID ::= LID coma identificador 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 lista.add(valor); RESULT = lista;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LID ::= var identificador 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPL ::= EXPL and EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new And(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPL ::= EXPL or EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Or(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPL ::= SSELECCION 
            {
              Exp RESULT =null;
		int seleccionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int seleccionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp seleccion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = seleccion;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPL ::= EXPC 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPC ::= EXP mayor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPC ::= EXP menor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPC ::= EXP menorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPC ::= EXP mayorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPC ::= EXP igualigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Igual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPC ::= EXP desigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Diferente(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPC ::= EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor1;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP suma EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Suma(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP multi EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Multi(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP div EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Div(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP resta EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Resta(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP potencia EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Potencia(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= exclam EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Negacion(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= pari EXPL pard 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= resta EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Menos(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= decimal 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new DoubleExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= entero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new IntExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= identificador 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new idExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= cadena 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new StringExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= falso 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= verdadero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= caracter 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new CharExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= AUMENTO 
            {
              Exp RESULT =null;
		int aumleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aumright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp aum = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = aum;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= DECREMENTO 
            {
              Exp RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= ACCESO 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = acceso;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= LLAMADA 
            {
              Exp RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = llamada;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SSELECCION ::= EXPL interrogacion EXPL dospuntos EXPL 
            {
              Exp RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valorv = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valorf = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new SSeleccion(condicionleft, condicionright, condicion, valorv, valorf);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SSELECCION",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AUMENTO ::= identificador aumento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AUMENTO ::= ACCESO aumento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECREMENTO ::= identificador decremento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECREMENTO ::= ACCESO decremento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ACCESO ::= ACCESO corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new  AccesoArray(expresionright,expresionleft ,acceso, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCESO ::= identificador corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new  AccesoArray(nombreright,nombreleft ,new idExp(nombre), expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCESO ::= identificador punto identificador 
            {
              Exp RESULT =null;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre1 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int nombre2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nombre2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nombre2 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Acceso(nombre1right,nombre1left ,new idExp(nombre1), new idExp(nombre2));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LATRIBUTO ::= LATRIBUTO coma identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Atributo t = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                t.addAtributo(nombre,valor);
                RESULT = t;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LATRIBUTO ::= identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Atributo(nombreleft, nombreright, nombre, valor);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO DEFECTO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",33, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",33, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASO ::= caso EXPL dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, condicion, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CASO",31, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEFECTO ::= defecto dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, null, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DEFECTO",32, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RETORNAR ::= retornar EXPL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Retorno(ileft, iright, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("RETORNAR",34, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADA ::= identificador pari LVALORES pard 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valores = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Llamada(ileft, iright, i, valores);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LLAMADA",35, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LVALORES ::= LVALORES coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LVALORES ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserfs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
              return CUP$parserfs$do_action_part00000000(
                               CUP$parserfs$act_num,
                               CUP$parserfs$parser,
                               CUP$parserfs$stack,
                               CUP$parserfs$top);
    }
}

}
