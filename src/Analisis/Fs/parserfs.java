
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Fs;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserfs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserfs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserfs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserfs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\030" +
    "\005\000\002\031\004\000\002\031\004\000\002\031\003" +
    "\000\002\031\003\000\002\027\010\000\002\024\004\000" +
    "\002\026\004\000\002\023\015\000\002\023\015\000\002" +
    "\010\003\000\002\010\003\000\002\022\011\000\002\020" +
    "\011\000\002\020\013\000\002\021\003\000\002\021\005" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\017" +
    "\006\000\002\016\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\007\000\002" +
    "\015\006\000\002\033\005\000\002\033\003\000\002\034" +
    "\005\000\002\034\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\006\004\000\002\007\004\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\024\012\030\026\014\031\006\037\011\050" +
    "\022\054\032\055\015\056\007\062\026\001\002\000\030" +
    "\002\ufffc\012\ufffc\026\ufffc\031\ufffc\037\ufffc\050\ufffc\051" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\062\ufffc\001\002\000\030" +
    "\002\uffe6\012\uffe6\026\uffe6\031\uffe6\037\uffe6\050\uffe6\051" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\062\uffe6\001\002\000\004" +
    "\053\177\001\002\000\004\047\176\001\002\000\030\002" +
    "\uffea\012\uffea\026\uffea\031\uffea\037\uffea\050\uffea\051\uffea" +
    "\054\uffea\055\uffea\056\uffea\062\uffea\001\002\000\004\053" +
    "\173\001\002\000\004\047\172\001\002\000\026\002\000" +
    "\012\030\026\014\031\006\037\011\050\022\054\032\055" +
    "\015\056\007\062\026\001\002\000\004\053\164\001\002" +
    "\000\004\047\163\001\002\000\004\047\162\001\002\000" +
    "\030\002\uffe8\012\uffe8\026\uffe8\031\uffe8\037\uffe8\050\uffe8" +
    "\051\uffe8\054\uffe8\055\uffe8\056\uffe8\062\uffe8\001\002\000" +
    "\030\002\uffeb\012\uffeb\026\uffeb\031\uffeb\037\uffeb\050\uffeb" +
    "\051\uffeb\054\uffeb\055\uffeb\056\uffeb\062\uffeb\001\002\000" +
    "\030\002\ufffb\012\ufffb\026\ufffb\031\ufffb\037\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\056\ufffb\062\ufffb\001\002\000" +
    "\024\012\030\026\014\031\006\037\011\050\022\054\032" +
    "\055\015\056\007\062\026\001\002\000\010\020\145\046" +
    "\146\047\uffde\001\002\000\004\047\144\001\002\000\030" +
    "\002\uffe7\012\uffe7\026\uffe7\031\uffe7\037\uffe7\050\uffe7\051" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\062\uffe7\001\002\000\004" +
    "\054\143\001\002\000\030\002\uffe9\012\uffe9\026\uffe9\031" +
    "\uffe9\037\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\062\uffe9\001\002\000\004\053\125\001\002\000\004\002" +
    "\124\001\002\000\014\020\034\042\033\043\037\044\040" +
    "\045\035\001\002\000\026\006\uffe2\025\uffe2\040\uffe2\053" +
    "\uffe2\054\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\001\002\000\026\006\uffe3\025\uffe3\040\uffe3\053\uffe3\054" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002" +
    "\000\026\006\uffdf\025\uffdf\040\uffdf\053\uffdf\054\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000\026" +
    "\006\043\025\054\040\044\053\052\054\057\064\050\065" +
    "\047\066\053\067\046\070\051\001\002\000\026\006\uffe1" +
    "\025\uffe1\040\uffe1\053\uffe1\054\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\001\002\000\026\006\uffe0\025\uffe0" +
    "\040\uffe0\053\uffe0\054\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\070\uffe0\001\002\000\044\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\014\uffbd\016\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\046\uffbd\047\uffbd\052\uffbd" +
    "\063\uffbd\001\002\000\044\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\014\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\046\uffbb\047\uffbb\052\uffbb\063" +
    "\uffbb\001\002\000\026\006\043\025\054\040\044\053\052" +
    "\054\057\064\050\065\047\066\053\067\046\070\051\001" +
    "\002\000\044\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\014\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\046\uffc1\047\uffc1\052\uffc1\063\uffc1\001\002" +
    "\000\016\010\uffd4\011\uffd4\014\uffd4\046\uffd4\047\uffd4\052" +
    "\uffd4\001\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\046\uffc4\047\uffc4\052\uffc4\063\uffc4" +
    "\001\002\000\044\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\014\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\046\uffbf\047\uffbf\052\uffbf\063\uffbf\001" +
    "\002\000\044\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\046\uffc0\047\uffc0\052\uffc0\063\uffc0\001\002" +
    "\000\044\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\014\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\046\uffbe\047\uffbe\052\uffbe\063\uffbe\001\002\000" +
    "\026\006\043\025\054\040\044\053\052\054\057\064\050" +
    "\065\047\066\053\067\046\070\051\001\002\000\044\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\046" +
    "\uffc3\047\uffc3\052\uffc3\063\uffc3\001\002\000\026\006\043" +
    "\025\054\040\044\053\052\054\057\064\050\065\047\066" +
    "\053\067\046\070\051\001\002\000\044\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\014\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\046\uffbc\047\uffbc" +
    "\052\uffbc\063\uffbc\001\002\000\044\004\076\005\102\006" +
    "\075\007\073\010\uffcd\011\uffcd\014\uffcd\016\074\017\101" +
    "\021\104\022\100\023\077\024\103\046\uffcd\047\uffcd\052" +
    "\uffcd\063\072\001\002\000\052\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\014\uffc2\015\065\016\uffc2\017" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\027\066\030\067" +
    "\046\uffc2\047\uffc2\052\uffc2\063\uffc2\001\002\000\010\010" +
    "\062\011\061\047\uffe4\001\002\000\026\006\043\025\054" +
    "\040\044\053\052\054\057\064\050\065\047\066\053\067" +
    "\046\070\051\001\002\000\026\006\043\025\054\040\044" +
    "\053\052\054\057\064\050\065\047\066\053\067\046\070" +
    "\051\001\002\000\016\010\uffd5\011\uffd5\014\uffd5\046\uffd5" +
    "\047\uffd5\052\uffd5\001\002\000\016\010\062\011\uffd6\014" +
    "\uffd6\046\uffd6\047\uffd6\052\uffd6\001\002\000\026\006\043" +
    "\025\054\040\044\053\052\054\057\064\050\065\047\066" +
    "\053\067\046\070\051\001\002\000\044\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\014\uffba\016\uffba\017" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\046\uffba\047\uffba" +
    "\052\uffba\063\uffba\001\002\000\044\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\014\uffb9\016\uffb9\017\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\046\uffb9\047\uffb9\052" +
    "\uffb9\063\uffb9\001\002\000\010\010\062\011\061\014\071" +
    "\001\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\014\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\046\uffb8\047\uffb8\052\uffb8\063\uffb8\001" +
    "\002\000\026\006\043\025\054\040\044\053\052\054\057" +
    "\064\050\065\047\066\053\067\046\070\051\001\002\000" +
    "\026\006\043\025\054\040\044\053\052\054\057\064\050" +
    "\065\047\066\053\067\046\070\051\001\002\000\026\006" +
    "\043\025\054\040\044\053\052\054\057\064\050\065\047" +
    "\066\053\067\046\070\051\001\002\000\026\006\043\025" +
    "\054\040\044\053\052\054\057\064\050\065\047\066\053" +
    "\067\046\070\051\001\002\000\026\006\043\025\054\040" +
    "\044\053\052\054\057\064\050\065\047\066\053\067\046" +
    "\070\051\001\002\000\026\006\043\025\054\040\044\053" +
    "\052\054\057\064\050\065\047\066\053\067\046\070\051" +
    "\001\002\000\026\006\043\025\054\040\044\053\052\054" +
    "\057\064\050\065\047\066\053\067\046\070\051\001\002" +
    "\000\026\006\043\025\054\040\044\053\052\054\057\064" +
    "\050\065\047\066\053\067\046\070\051\001\002\000\026" +
    "\006\043\025\054\040\044\053\052\054\057\064\050\065" +
    "\047\066\053\067\046\070\051\001\002\000\026\006\043" +
    "\025\054\040\044\053\052\054\057\064\050\065\047\066" +
    "\053\067\046\070\051\001\002\000\026\006\043\025\054" +
    "\040\044\053\052\054\057\064\050\065\047\066\053\067" +
    "\046\070\051\001\002\000\030\004\076\005\102\006\075" +
    "\007\073\010\uffd3\011\uffd3\014\uffd3\046\uffd3\047\uffd3\052" +
    "\uffd3\063\072\001\002\000\030\004\076\005\102\006\075" +
    "\007\073\010\uffd1\011\uffd1\014\uffd1\046\uffd1\047\uffd1\052" +
    "\uffd1\063\072\001\002\000\044\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\014\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\046\uffcb\047\uffcb\052\uffcb" +
    "\063\072\001\002\000\030\004\076\005\102\006\075\007" +
    "\073\010\uffcf\011\uffcf\014\uffcf\046\uffcf\047\uffcf\052\uffcf" +
    "\063\072\001\002\000\030\004\076\005\102\006\075\007" +
    "\073\010\uffd2\011\uffd2\014\uffd2\046\uffd2\047\uffd2\052\uffd2" +
    "\063\072\001\002\000\030\004\076\005\102\006\075\007" +
    "\073\010\uffd0\011\uffd0\014\uffd0\046\uffd0\047\uffd0\052\uffd0" +
    "\063\072\001\002\000\044\004\uffcc\005\102\006\uffcc\007" +
    "\073\010\uffcc\011\uffcc\014\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\046\uffcc\047\uffcc\052\uffcc\063" +
    "\072\001\002\000\044\004\uffc9\005\102\006\uffc9\007\073" +
    "\010\uffc9\011\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\046\uffc9\047\uffc9\052\uffc9\063\072" +
    "\001\002\000\030\004\076\005\102\006\075\007\073\010" +
    "\uffce\011\uffce\014\uffce\046\uffce\047\uffce\052\uffce\063\072" +
    "\001\002\000\044\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\014\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\046\uffca\047\uffca\052\uffca\063\072\001" +
    "\002\000\044\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\046\uffc8\047\uffc8\052\uffc8\063\uffc8\001\002" +
    "\000\044\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\014\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\046\uffc7\047\uffc7\052\uffc7\063\uffc7\001\002\000" +
    "\010\010\062\011\061\052\122\001\002\000\044\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\046\uffc6" +
    "\047\uffc6\052\uffc6\063\uffc6\001\002\000\044\004\uffc5\005" +
    "\102\006\uffc5\007\073\010\uffc5\011\uffc5\014\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\046\uffc5\047" +
    "\uffc5\052\uffc5\063\072\001\002\000\004\002\001\001\002" +
    "\000\026\006\043\025\054\040\044\053\052\054\057\064" +
    "\050\065\047\066\053\067\046\070\051\001\002\000\010" +
    "\010\062\011\061\052\127\001\002\000\004\050\130\001" +
    "\002\000\024\012\030\026\014\031\006\037\011\050\022" +
    "\054\032\055\015\056\007\062\026\001\002\000\026\012" +
    "\030\026\014\031\006\037\011\050\022\051\134\054\032" +
    "\055\015\056\007\062\026\001\002\000\030\002\ufffe\012" +
    "\ufffe\026\ufffe\031\ufffe\037\ufffe\050\ufffe\051\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\062\ufffe\001\002\000\030\002\ufffd\012" +
    "\ufffd\026\ufffd\031\ufffd\037\ufffd\050\ufffd\051\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\062\ufffd\001\002\000\032\002\ufff2\012" +
    "\ufff2\013\135\026\ufff2\031\ufff2\037\ufff2\050\ufff2\051\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\062\ufff2\001\002\000\006\012" +
    "\030\050\137\001\002\000\030\002\ufff1\012\ufff1\026\ufff1" +
    "\031\ufff1\037\ufff1\050\ufff1\051\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\062\ufff1\001\002\000\024\012\030\026\014\031\006" +
    "\037\011\050\022\054\032\055\015\056\007\062\026\001" +
    "\002\000\030\002\ufff0\012\ufff0\026\ufff0\031\ufff0\037\ufff0" +
    "\050\ufff0\051\ufff0\054\ufff0\055\ufff0\056\ufff0\062\ufff0\001" +
    "\002\000\026\012\030\026\014\031\006\037\011\050\022" +
    "\051\142\054\032\055\015\056\007\062\026\001\002\000" +
    "\030\002\uffef\012\uffef\026\uffef\031\uffef\037\uffef\050\uffef" +
    "\051\uffef\054\uffef\055\uffef\056\uffef\062\uffef\001\002\000" +
    "\010\020\uffd7\046\uffd7\047\uffd7\001\002\000\030\002\uffed" +
    "\012\uffed\026\uffed\031\uffed\037\uffed\050\uffed\051\uffed\054" +
    "\uffed\055\uffed\056\uffed\062\uffed\001\002\000\030\006\043" +
    "\015\150\025\054\040\044\053\052\054\057\064\050\065" +
    "\047\066\053\067\046\070\051\001\002\000\004\054\147" +
    "\001\002\000\010\020\uffd8\046\uffd8\047\uffd8\001\002\000" +
    "\030\006\043\014\153\025\054\040\044\053\052\054\057" +
    "\064\050\065\047\066\053\067\046\070\051\001\002\000" +
    "\010\010\062\011\061\047\uffdd\001\002\000\006\014\156" +
    "\046\155\001\002\000\004\047\uffdb\001\002\000\012\010" +
    "\062\011\061\014\uffd9\046\uffd9\001\002\000\026\006\043" +
    "\025\054\040\044\053\052\054\057\064\050\065\047\066" +
    "\053\067\046\070\051\001\002\000\004\047\uffdc\001\002" +
    "\000\012\010\062\011\061\014\uffda\046\uffda\001\002\000" +
    "\026\012\030\026\014\031\006\037\011\050\022\051\161" +
    "\054\032\055\015\056\007\062\026\001\002\000\030\002" +
    "\uffff\012\uffff\026\uffff\031\uffff\037\uffff\050\uffff\051\uffff" +
    "\054\uffff\055\uffff\056\uffff\062\uffff\001\002\000\030\002" +
    "\uffec\012\uffec\026\uffec\031\uffec\037\uffec\050\uffec\051\uffec" +
    "\054\uffec\055\uffec\056\uffec\062\uffec\001\002\000\030\002" +
    "\ufff9\012\ufff9\026\ufff9\031\ufff9\037\ufff9\050\ufff9\051\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\062\ufff9\001\002\000\026\006" +
    "\043\025\054\040\044\053\052\054\057\064\050\065\047" +
    "\066\053\067\046\070\051\001\002\000\010\010\062\011" +
    "\061\052\166\001\002\000\004\050\167\001\002\000\024" +
    "\012\030\026\014\031\006\037\011\050\022\054\032\055" +
    "\015\056\007\062\026\001\002\000\026\012\030\026\014" +
    "\031\006\037\011\050\022\051\171\054\032\055\015\056" +
    "\007\062\026\001\002\000\030\002\ufff3\012\ufff3\026\ufff3" +
    "\031\ufff3\037\ufff3\050\ufff3\051\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\062\ufff3\001\002\000\030\002\uffee\012\uffee\026\uffee" +
    "\031\uffee\037\uffee\050\uffee\051\uffee\054\uffee\055\uffee\056" +
    "\uffee\062\uffee\001\002\000\026\006\043\025\054\040\044" +
    "\053\052\054\057\064\050\065\047\066\053\067\046\070" +
    "\051\001\002\000\010\010\062\011\061\052\175\001\002" +
    "\000\004\047\uffe5\001\002\000\030\002\ufff8\012\ufff8\026" +
    "\ufff8\031\ufff8\037\ufff8\050\ufff8\051\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\062\ufff8\001\002\000\006\054\032\062\026\001" +
    "\002\000\004\047\215\001\002\000\004\047\202\001\002" +
    "\000\026\006\043\025\054\040\044\053\052\054\057\064" +
    "\050\065\047\066\053\067\046\070\051\001\002\000\010" +
    "\010\062\011\061\047\204\001\002\000\004\054\207\001" +
    "\002\000\004\052\ufff4\001\002\000\004\052\ufff5\001\002" +
    "\000\006\027\066\030\067\001\002\000\004\052\211\001" +
    "\002\000\004\050\212\001\002\000\024\012\030\026\014" +
    "\031\006\037\011\050\022\054\032\055\015\056\007\062" +
    "\026\001\002\000\026\012\030\026\014\031\006\037\011" +
    "\050\022\051\214\054\032\055\015\056\007\062\026\001" +
    "\002\000\030\002\ufff6\012\ufff6\026\ufff6\031\ufff6\037\ufff6" +
    "\050\ufff6\051\ufff6\054\ufff6\055\ufff6\056\ufff6\062\ufff6\001" +
    "\002\000\026\006\043\025\054\040\044\053\052\054\057" +
    "\064\050\065\047\066\053\067\046\070\051\001\002\000" +
    "\010\010\062\011\061\047\217\001\002\000\004\054\207" +
    "\001\002\000\004\052\221\001\002\000\004\050\222\001" +
    "\002\000\024\012\030\026\014\031\006\037\011\050\022" +
    "\054\032\055\015\056\007\062\026\001\002\000\026\012" +
    "\030\026\014\031\006\037\011\050\022\051\224\054\032" +
    "\055\015\056\007\062\026\001\002\000\030\002\ufff7\012" +
    "\ufff7\026\ufff7\031\ufff7\037\ufff7\050\ufff7\051\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\062\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\036\002\030\014\003\015\011\016\023\017" +
    "\015\020\017\022\007\023\026\024\024\025\016\026\004" +
    "\030\020\031\012\034\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\131\015\011\016\023\017\015\020\017\022\007\023\026" +
    "\024\024\025\016\026\004\030\132\034\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\003\015\011\016\023\017\015\020\017\022\007\023\026" +
    "\024\024\025\016\026\004\030\020\031\157\034\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\055\004" +
    "\057\005\044\006\040\007\054\011\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\122\006\040\007\054\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\055\004\120\005\044\006\040\007\054\011\041\001" +
    "\001\000\002\001\001\000\012\003\117\006\040\007\054" +
    "\011\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\055\004\063" +
    "\005\044\006\040\007\054\011\041\001\001\000\016\003" +
    "\055\004\062\005\044\006\040\007\054\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\055\004" +
    "\067\005\044\006\040\007\054\011\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\116\006\040\007\054\011\041\001\001" +
    "\000\012\003\115\006\040\007\054\011\041\001\001\000" +
    "\012\003\114\006\040\007\054\011\041\001\001\000\012" +
    "\003\113\006\040\007\054\011\041\001\001\000\012\003" +
    "\112\006\040\007\054\011\041\001\001\000\012\003\111" +
    "\006\040\007\054\011\041\001\001\000\012\003\110\006" +
    "\040\007\054\011\041\001\001\000\012\003\107\006\040" +
    "\007\054\011\041\001\001\000\012\003\106\006\040\007" +
    "\054\011\041\001\001\000\012\003\105\006\040\007\054" +
    "\011\041\001\001\000\012\003\104\006\040\007\054\011" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\055\004\125\005\044\006\040\007" +
    "\054\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\003\015\011\016\023\017\015\020\017\022" +
    "\007\023\026\024\024\025\016\026\004\030\020\031\130" +
    "\034\022\001\001\000\032\014\131\015\011\016\023\017" +
    "\015\020\017\022\007\023\026\024\024\025\016\026\004" +
    "\030\132\034\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\137\021\135\001\001" +
    "\000\002\001\001\000\034\014\003\015\011\016\023\017" +
    "\015\020\017\022\007\023\026\024\024\025\016\026\004" +
    "\030\020\031\140\034\022\001\001\000\002\001\001\000" +
    "\032\014\131\015\011\016\023\017\015\020\017\022\007" +
    "\023\026\024\024\025\016\026\004\030\132\034\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\055\004\150\005\044\006\040\007\054\011" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\055\004\153\005\044\006\040\007\054\011\041\033" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\055\004\156\005" +
    "\044\006\040\007\054\011\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\014\131\015\011\016\023\017" +
    "\015\020\017\022\007\023\026\024\024\025\016\026\004" +
    "\030\132\034\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\055\004\164\005\044" +
    "\006\040\007\054\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\003\015\011\016\023\017\015" +
    "\020\017\022\007\023\026\024\024\025\016\026\004\030" +
    "\020\031\167\034\022\001\001\000\032\014\131\015\011" +
    "\016\023\017\015\020\017\022\007\023\026\024\024\025" +
    "\016\026\004\030\132\034\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\055\004\173\005\044\006" +
    "\040\007\054\011\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\200\016\177\034" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\055\004\202\005\044\006\040\007\054\011\041\001" +
    "\001\000\002\001\001\000\010\006\204\007\205\010\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\014\003" +
    "\015\011\016\023\017\015\020\017\022\007\023\026\024" +
    "\024\025\016\026\004\030\020\031\212\034\022\001\001" +
    "\000\032\014\131\015\011\016\023\017\015\020\017\022" +
    "\007\023\026\024\024\025\016\026\004\030\132\034\022" +
    "\001\001\000\002\001\001\000\016\003\055\004\215\005" +
    "\044\006\040\007\054\011\041\001\001\000\002\001\001" +
    "\000\010\006\204\007\205\010\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\003\015\011\016\023" +
    "\017\015\020\017\022\007\023\026\024\024\025\016\026" +
    "\004\030\020\031\222\034\022\001\001\000\032\014\131" +
    "\015\011\016\023\017\015\020\017\022\007\023\026\024" +
    "\024\025\016\026\004\030\132\034\022\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserfs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserfs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserfs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserfs$actions {
  private final parserfs parser;

  /** Constructor */
  CUP$parserfs$actions(parserfs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action_part00000000(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserfs$result;

      /* select the action based on the action number */
      switch (CUP$parserfs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = start_val;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserfs$parser.done_parsing();
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 setInstrucciones(valor); 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveI INSTRUCCIONES llaveD 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BLOQUE",22, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES BLOQUE 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 Bloque met = new Bloque(); met.add(valor); RESULT = met; 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= BLOQUE 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= TIPO identificador pari PARAMETROS pard BLOQUE 
            {
              Sentencia RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> parametros = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = null;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",21, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BREAK ::= tbreak puntocoma 
            {
              Sentencia RESULT =null;
		RESULT  = new Romper();
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BREAK",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTINUE ::= tcontinuar puntocoma 
            {
              Sentencia RESULT =null;
		 RESULT = new Continuar();
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CONTINUE",20, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FOR ::= para pari ASIGNACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FOR ::= para pari DECLARACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ACTUALIZACION ::= DECREMENTO 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = d;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ACTUALIZACION ::= AUMENTO 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = a;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // WHILE ::= mientras pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Sentencia RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new While(cond, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Sentencia RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(cond,met);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD sino ELSE 
            {
              Sentencia RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia inst2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new IfElse(cond,met,inst2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSE ::= IF 
            {
              Sentencia RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sent;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSE ::= llaveI INSTRUCCIONES llaveD 
            {
              Sentencia RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(new BoolExp(true),met );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECLARACION puntocoma 
            {
              Sentencia RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Sentencia inst = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Sentencia RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Sentencia inst = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= IMPRIMIR puntocoma 
            {
              Sentencia RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Sentencia inst = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= IF 
            {
              Sentencia RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia inst = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= WHILE 
            {
              Sentencia RESULT =null;
		int wileleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int wileright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia wile = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = wile;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FOR 
            {
              Sentencia RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia fr = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = fr;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= SWITCH 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sw;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= BREAK 
            {
              Sentencia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CONTINUE 
            {
              Sentencia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRIMIR ::= imprimir pari EXPL pard 
            {
              Sentencia RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Imprimir(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= identificador TASIGNACION EXPL 
            {
              Sentencia RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(nombre, valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TASIGNACION ::= igual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TASIGNACION ::= masigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TASIGNACION ::= menosigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TASIGNACION ::= multiigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TASIGNACION ::= divigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= LID 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT  = new Declaracion(lleft, lright, l);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= LID igual EXPL 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Declaracion(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= LID igual corchetei LARREGLO corcheted 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valor = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= LID igual corchetei corcheted 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LARREGLO ::= LARREGLO coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LARREGLO ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LID ::= LID coma identificador 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 lista.add(valor); RESULT = lista;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LID ::= var identificador 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPL ::= EXPL and EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new And(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPL ::= EXPL or EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Or(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPL ::= EXPC 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPC ::= EXP mayor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPC ::= EXP menor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPC ::= EXP menorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPC ::= EXP mayorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPC ::= EXP igualigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Igual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPC ::= EXP desigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Diferente(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPC ::= EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor1;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP suma EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Suma(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP multi EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Multi(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP div EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Div(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP resta EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Resta(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP potencia EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Potencia(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= exclam EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Negacion(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= pari EXPL pard 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= resta EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Menos(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= decimal 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new DoubleExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= entero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new IntExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= identificador 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new idExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= cadena 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new StringExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= falso 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= verdadero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= caracter 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new CharExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= AUMENTO 
            {
              Exp RESULT =null;
		int aumleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aumright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp aum = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = aum;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= DECREMENTO 
            {
              Exp RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= ACCESO 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = acceso;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AUMENTO ::= identificador aumento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECREMENTO ::= identificador decremento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= identificador corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new  AccesoArray(nombreright,nombreleft ,nombre, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserfs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
              return CUP$parserfs$do_action_part00000000(
                               CUP$parserfs$act_num,
                               CUP$parserfs$parser,
                               CUP$parserfs$stack,
                               CUP$parserfs$top);
    }
}

}
