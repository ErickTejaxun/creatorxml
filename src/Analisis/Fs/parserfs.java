
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Fs;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserfs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserfs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserfs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserfs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\034" +
    "\005\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\005\000\002\035\005\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\004\000\002" +
    "\035\004\000\002\052\006\000\002\051\007\000\002\051" +
    "\010\000\002\051\007\000\002\051\007\000\002\051\010" +
    "\000\002\033\010\000\002\033\007\000\002\040\006\000" +
    "\002\040\004\000\002\030\004\000\002\032\004\000\002" +
    "\027\015\000\002\027\015\000\002\011\003\000\002\011" +
    "\003\000\002\026\011\000\002\024\011\000\002\024\013" +
    "\000\002\025\003\000\002\025\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\004\000\002\020\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\004\000\002\020\004\000" +
    "\002\023\006\000\002\022\005\000\002\022\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\003\000\002\021\005" +
    "\000\002\021\007\000\002\021\006\000\002\021\007\000" +
    "\002\036\005\000\002\036\003\000\002\041\005\000\002" +
    "\041\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\015\014\000\002\014\006\000\002\013\007\000\002" +
    "\007\004\000\002\007\004\000\002\010\004\000\002\010" +
    "\004\000\002\012\006\000\002\012\005\000\002\012\006" +
    "\000\002\012\005\000\002\042\007\000\002\042\005\000" +
    "\002\043\011\000\002\043\012\000\002\046\004\000\002" +
    "\046\003\000\002\044\006\000\002\045\005\000\002\047" +
    "\004\000\002\003\006\000\002\050\006\000\002\050\005" +
    "\000\002\037\005\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\034\012\017\020\047\022\044\033\020\036" +
    "\026\037\032\050\005\060\021\062\031\066\014\067\011" +
    "\070\007\074\025\001\002\000\004\061\u0118\001\002\000" +
    "\004\065\u0115\001\002\000\004\061\u0114\001\002\000\004" +
    "\061\u0113\001\002\000\040\002\ufff7\012\ufff7\020\ufff7\022" +
    "\ufff7\033\ufff7\036\ufff7\037\ufff7\050\ufff7\060\ufff7\062\ufff7" +
    "\063\ufff7\066\ufff7\067\ufff7\070\ufff7\074\ufff7\001\002\000" +
    "\004\061\u0112\001\002\000\040\002\uffd5\012\uffd5\020\uffd5" +
    "\022\uffd5\033\uffd5\036\uffd5\037\uffd5\050\uffd5\060\uffd5\062" +
    "\uffd5\063\uffd5\066\uffd5\067\uffd5\070\uffd5\074\uffd5\001\002" +
    "\000\040\002\ufff9\012\ufff9\020\ufff9\022\ufff9\033\ufff9\036" +
    "\ufff9\037\ufff9\050\ufff9\060\ufff9\062\ufff9\063\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\074\ufff9\001\002\000\026\015\106\016" +
    "\103\025\256\034\105\035\107\053\254\054\252\055\251" +
    "\056\253\065\104\001\002\000\040\002\uffd8\012\uffd8\020" +
    "\uffd8\022\uffd8\033\uffd8\036\uffd8\037\uffd8\050\uffd8\060\uffd8" +
    "\062\uffd8\063\uffd8\066\uffd8\067\uffd8\070\uffd8\074\uffd8\001" +
    "\002\000\036\002\000\012\017\020\047\022\044\033\020" +
    "\036\026\037\032\050\005\060\021\062\031\066\014\067" +
    "\011\070\007\074\025\001\002\000\004\065\u0106\001\002" +
    "\000\004\065\u0100\001\002\000\004\065\375\001\002\000" +
    "\040\002\uffd4\012\uffd4\020\uffd4\022\uffd4\033\uffd4\036\uffd4" +
    "\037\uffd4\050\uffd4\060\uffd4\062\uffd4\063\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\074\uffd4\001\002\000\004\061\374\001\002" +
    "\000\040\002\uffdc\012\uffdc\020\uffdc\022\uffdc\033\uffdc\036" +
    "\uffdc\037\uffdc\050\uffdc\060\uffdc\062\uffdc\063\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\074\uffdc\001\002\000\004\066\373\001" +
    "\002\000\004\065\336\001\002\000\004\061\335\001\002" +
    "\000\040\002\uffd6\012\uffd6\020\uffd6\022\uffd6\033\uffd6\036" +
    "\uffd6\037\uffd6\050\uffd6\060\uffd6\062\uffd6\063\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\074\uffd6\001\002\000\034\012\017\020" +
    "\047\022\044\033\020\036\026\037\032\050\005\060\021" +
    "\062\031\066\014\067\011\070\007\074\025\001\002\000" +
    "\004\066\310\001\002\000\004\061\307\001\002\000\040" +
    "\002\uffd7\012\uffd7\020\uffd7\022\uffd7\033\uffd7\036\uffd7\037" +
    "\uffd7\050\uffd7\060\uffd7\062\uffd7\063\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\074\uffd7\001\002\000\010\025\262\057\263\061" +
    "\uffc9\001\002\000\004\061\261\001\002\000\006\016\223" +
    "\061\260\001\002\000\040\002\uffdb\012\uffdb\020\uffdb\022" +
    "\uffdb\033\uffdb\036\uffdb\037\uffdb\050\uffdb\060\uffdb\062\uffdb" +
    "\063\uffdb\066\uffdb\067\uffdb\070\uffdb\074\uffdb\001\002\000" +
    "\024\015\215\016\214\025\256\034\216\035\217\053\254" +
    "\054\252\055\251\056\253\001\002\000\040\002\ufff8\012" +
    "\ufff8\020\ufff8\022\ufff8\033\ufff8\036\ufff8\037\ufff8\050\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\066\ufff8\067\ufff8\070\ufff8\074" +
    "\ufff8\001\002\000\004\061\250\001\002\000\036\006\064" +
    "\032\070\040\065\041\056\042\053\051\052\052\067\065" +
    "\077\066\102\076\100\077\072\100\074\101\054\102\062" +
    "\001\002\000\004\061\246\001\002\000\004\002\245\001" +
    "\002\000\004\065\050\001\002\000\036\006\064\032\070" +
    "\040\065\041\056\042\053\051\052\052\067\065\077\066" +
    "\102\076\100\077\072\100\074\101\054\102\062\001\002" +
    "\000\052\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\014\uffa3\017\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\057\uffa3\061\uffa3\063\uffa3\064\uffa3\071" +
    "\uffa3\075\uffa3\001\002\000\052\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\014\uffaa\017\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\057\uffaa\061\uffaa" +
    "\063\uffaa\064\uffaa\071\uffaa\075\uffaa\001\002\000\004\065" +
    "\242\001\002\000\052\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\014\uffad\017\uffad\023\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\057\uffad\061\uffad\063\uffad" +
    "\064\uffad\071\uffad\075\uffad\001\002\000\024\010\uffbe\011" +
    "\uffbe\014\uffbe\017\uffbe\057\uffbe\061\uffbe\063\uffbe\064\uffbe" +
    "\071\uffbe\001\002\000\004\065\231\001\002\000\052\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\014\uff9f" +
    "\017\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\057\uff9f\061\uff9f\063\uff9f\064\uff9f\071\uff9f\075\uff9f" +
    "\001\002\000\054\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\014\uffa1\016\223\017\uffa1\023\uffa1\024\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\057\uffa1\061\uffa1\063" +
    "\uffa1\064\uffa1\071\uffa1\075\uffa1\001\002\000\062\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\014\uffa4\015" +
    "\215\016\214\017\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\034\216\035\217\057\uffa4\061\uffa4\063" +
    "\uffa4\064\uffa4\071\uffa4\075\uffa4\001\002\000\052\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\014\uffa7\017" +
    "\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\057\uffa7\061\uffa7\063\uffa7\064\uffa7\071\uffa7\075\uffa7\001" +
    "\002\000\052\004\162\005\165\006\163\007\166\010\uffb6" +
    "\011\uffb6\014\uffb6\017\uffb6\023\200\024\203\026\205\027" +
    "\202\030\201\031\204\057\uffb6\061\uffb6\063\uffb6\064\uffb6" +
    "\071\uffb6\075\164\001\002\000\036\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\004\065\174\001\002\000\052\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\014\uffa6\017\uffa6\023\uffa6\024" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\057\uffa6\061\uffa6" +
    "\063\uffa6\064\uffa6\071\uffa6\075\uffa6\001\002\000\052\004" +
    "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\014\uff9e" +
    "\017\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\057\uff9e\061\uff9e\063\uff9e\064\uff9e\071\uff9e\075\uff9e" +
    "\001\002\000\036\006\064\032\070\040\065\041\056\042" +
    "\053\051\052\052\067\065\077\066\102\076\100\077\072" +
    "\100\074\101\054\102\062\001\002\000\012\010\113\011" +
    "\112\017\111\064\142\001\002\000\052\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\014\uffa8\017\uffa8\023" +
    "\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\057\uffa8" +
    "\061\uffa8\063\uffa8\064\uffa8\071\uffa8\075\uffa8\001\002\000" +
    "\024\010\uffbd\011\uffbd\014\uffbd\017\uffbd\057\uffbd\061\uffbd" +
    "\063\uffbd\064\uffbd\071\uffbd\001\002\000\052\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\014\uffac\017\uffac" +
    "\023\uffac\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\057" +
    "\uffac\061\uffac\063\uffac\064\uffac\071\uffac\075\uffac\001\002" +
    "\000\052\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\014\uffa5\017\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\057\uffa5\061\uffa5\063\uffa5\064\uffa5\071" +
    "\uffa5\075\uffa5\001\002\000\052\004\uffa0\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\014\uffa0\017\uffa0\023\uffa0\024" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\057\uffa0\061\uffa0" +
    "\063\uffa0\064\uffa0\071\uffa0\075\uffa0\001\002\000\036\006" +
    "\064\032\070\040\065\041\056\042\053\051\052\052\067" +
    "\065\077\066\102\076\100\077\072\100\074\101\054\102" +
    "\062\001\002\000\052\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\014\uffa9\017\uffa9\023\uffa9\024\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\057\uffa9\061\uffa9\063\uffa9" +
    "\064\uffa9\071\uffa9\075\uffa9\001\002\000\052\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\014\uffa2\017\uffa2" +
    "\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\057" +
    "\uffa2\061\uffa2\063\uffa2\064\uffa2\071\uffa2\075\uffa2\001\002" +
    "\000\064\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\014\uffab\015\106\016\103\017\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\034\105\035\107\057" +
    "\uffab\061\uffab\063\uffab\064\uffab\065\104\071\uffab\075\uffab" +
    "\001\002\000\006\040\131\066\130\001\002\000\040\006" +
    "\064\032\070\040\065\041\056\042\053\051\052\052\067" +
    "\064\122\065\077\066\102\076\100\077\072\100\074\101" +
    "\054\102\062\001\002\000\052\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\014\uff9a\017\uff9a\023\uff9a\024" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\057\uff9a\061\uff9a" +
    "\063\uff9a\064\uff9a\071\uff9a\075\uff9a\001\002\000\036\006" +
    "\064\032\070\040\065\041\056\042\053\051\052\052\067" +
    "\065\077\066\102\076\100\077\072\100\074\101\054\102" +
    "\062\001\002\000\052\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\014\uff98\017\uff98\023\uff98\024\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\057\uff98\061\uff98\063\uff98" +
    "\064\uff98\071\uff98\075\uff98\001\002\000\012\010\113\011" +
    "\112\014\114\017\111\001\002\000\036\006\064\032\070" +
    "\040\065\041\056\042\053\051\052\052\067\065\077\066" +
    "\102\076\100\077\072\100\074\101\054\102\062\001\002" +
    "\000\036\006\064\032\070\040\065\041\056\042\053\051" +
    "\052\052\067\065\077\066\102\076\100\077\072\100\074" +
    "\101\054\102\062\001\002\000\036\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\074\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\034\uff94\035\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\061\uff94\063" +
    "\uff94\064\uff94\071\uff94\075\uff94\001\002\000\024\010\uffbf" +
    "\011\112\014\uffbf\017\111\057\uffbf\061\uffbf\063\uffbf\064" +
    "\uffbf\071\uffbf\001\002\000\024\010\uffc0\011\uffc0\014\uffc0" +
    "\017\111\057\uffc0\061\uffc0\063\uffc0\064\uffc0\071\uffc0\001" +
    "\002\000\012\010\113\011\112\017\111\071\120\001\002" +
    "\000\036\006\064\032\070\040\065\041\056\042\053\051" +
    "\052\052\067\065\077\066\102\076\100\077\072\100\074" +
    "\101\054\102\062\001\002\000\024\010\113\011\112\014" +
    "\uff9b\017\111\057\uff9b\061\uff9b\063\uff9b\064\uff9b\071\uff9b" +
    "\001\002\000\052\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\014\uff87\017\uff87\023\uff87\024\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\057\uff87\061\uff87\063\uff87\064" +
    "\uff87\071\uff87\075\uff87\001\002\000\006\057\125\064\126" +
    "\001\002\000\014\010\113\011\112\017\111\057\uff85\064" +
    "\uff85\001\002\000\036\006\064\032\070\040\065\041\056" +
    "\042\053\051\052\052\067\065\077\066\102\076\100\077" +
    "\072\100\074\101\054\102\062\001\002\000\052\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\014\uff88\017" +
    "\uff88\023\uff88\024\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\057\uff88\061\uff88\063\uff88\064\uff88\071\uff88\075\uff88\001" +
    "\002\000\014\010\113\011\112\017\111\057\uff86\064\uff86" +
    "\001\002\000\076\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\014\uff93\015\uff93\016\uff93\017\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\034" +
    "\uff93\035\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\134\071\uff93\075\uff93\001" +
    "\002\000\004\065\132\001\002\000\004\064\133\001\002" +
    "\000\054\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\014\ufff0\016\ufff0\017\ufff0\023\ufff0\024\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\057\ufff0\061\ufff0\063\ufff0\064" +
    "\ufff0\071\ufff0\075\ufff0\001\002\000\040\006\064\032\070" +
    "\040\065\041\056\042\053\051\052\052\067\064\135\065" +
    "\077\066\102\076\100\077\072\100\074\101\054\102\062" +
    "\001\002\000\054\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\014\ufff1\016\ufff1\017\ufff1\023\ufff1\024\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\057\ufff1\061\ufff1\063" +
    "\ufff1\064\ufff1\071\ufff1\075\ufff1\001\002\000\006\057\125" +
    "\064\137\001\002\000\054\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\014\uffef\016\uffef\017\uffef\023\uffef" +
    "\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\057\uffef\061" +
    "\uffef\063\uffef\064\uffef\071\uffef\075\uffef\001\002\000\012" +
    "\010\113\011\112\017\111\064\141\001\002\000\052\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\014\uffaf" +
    "\017\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\057\uffaf\061\uffaf\063\uffaf\064\uffaf\071\uffaf\075\uffaf" +
    "\001\002\000\004\062\143\001\002\000\004\072\145\001" +
    "\002\000\010\021\154\063\152\072\145\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\010\021\uff8d\063\uff8d\072\uff8d\001" +
    "\002\000\012\010\113\011\112\017\111\071\150\001\002" +
    "\000\004\062\031\001\002\000\010\021\uff8c\063\uff8c\072" +
    "\uff8c\001\002\000\040\002\uff90\012\uff90\020\uff90\022\uff90" +
    "\033\uff90\036\uff90\037\uff90\050\uff90\060\uff90\062\uff90\063" +
    "\uff90\066\uff90\067\uff90\070\uff90\074\uff90\001\002\000\004" +
    "\063\160\001\002\000\004\071\156\001\002\000\010\021" +
    "\uff8e\063\uff8e\072\uff8e\001\002\000\004\062\031\001\002" +
    "\000\004\063\uff8b\001\002\000\040\002\uff8f\012\uff8f\020" +
    "\uff8f\022\uff8f\033\uff8f\036\uff8f\037\uff8f\050\uff8f\060\uff8f" +
    "\062\uff8f\063\uff8f\066\uff8f\067\uff8f\070\uff8f\074\uff8f\001" +
    "\002\000\052\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\014\uffb0\017\uffb0\023\uffb0\024\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\057\uffb0\061\uffb0\063\uffb0\064\uffb0" +
    "\071\uffb0\075\uffb0\001\002\000\036\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\036\006\064\032\070\040\065\041\056\042\053\051\052" +
    "\052\067\065\077\066\102\076\100\077\072\100\074\101" +
    "\054\102\062\001\002\000\036\006\064\032\070\040\065" +
    "\041\056\042\053\051\052\052\067\065\077\066\102\076" +
    "\100\077\072\100\074\101\054\102\062\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\036\006\064\032\070\040\065\041" +
    "\056\042\053\051\052\052\067\065\077\066\102\076\100" +
    "\077\072\100\074\101\054\102\062\001\002\000\052\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014\uffb3" +
    "\017\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\057\uffb3\061\uffb3\063\uffb3\064\uffb3\071\uffb3\075\164" +
    "\001\002\000\052\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\014\uffb4\017\uffb4\023\uffb4\024\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\057\uffb4\061\uffb4\063\uffb4\064" +
    "\uffb4\071\uffb4\075\164\001\002\000\052\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1\017\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\057\uffb1" +
    "\061\uffb1\063\uffb1\064\uffb1\071\uffb1\075\uffb1\001\002\000" +
    "\052\004\uffb2\005\165\006\uffb2\007\166\010\uffb2\011\uffb2" +
    "\014\uffb2\017\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\057\uffb2\061\uffb2\063\uffb2\064\uffb2\071\uffb2" +
    "\075\164\001\002\000\052\004\uffb5\005\165\006\uffb5\007" +
    "\166\010\uffb5\011\uffb5\014\uffb5\017\uffb5\023\uffb5\024\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\057\uffb5\061\uffb5\063" +
    "\uffb5\064\uffb5\071\uffb5\075\164\001\002\000\036\006\064" +
    "\032\070\040\065\041\056\042\053\051\052\052\067\065" +
    "\077\066\102\076\100\077\072\100\074\101\054\102\062" +
    "\001\002\000\012\010\113\011\112\017\111\064\176\001" +
    "\002\000\052\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\014\uff9c\017\uff9c\023\uff9c\024\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\057\uff9c\061\uff9c\063\uff9c\064\uff9c" +
    "\071\uff9c\075\uff9c\001\002\000\052\004\uffae\005\165\006" +
    "\uffae\007\166\010\uffae\011\uffae\014\uffae\017\uffae\023\uffae" +
    "\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\057\uffae\061" +
    "\uffae\063\uffae\064\uffae\071\uffae\075\164\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\036\006\064\032\070\040\065\041" +
    "\056\042\053\051\052\052\067\065\077\066\102\076\100" +
    "\077\072\100\074\101\054\102\062\001\002\000\036\006" +
    "\064\032\070\040\065\041\056\042\053\051\052\052\067" +
    "\065\077\066\102\076\100\077\072\100\074\101\054\102" +
    "\062\001\002\000\036\006\064\032\070\040\065\041\056" +
    "\042\053\051\052\052\067\065\077\066\102\076\100\077" +
    "\072\100\074\101\054\102\062\001\002\000\036\006\064" +
    "\032\070\040\065\041\056\042\053\051\052\052\067\065" +
    "\077\066\102\076\100\077\072\100\074\101\054\102\062" +
    "\001\002\000\036\006\064\032\070\040\065\041\056\042" +
    "\053\051\052\052\067\065\077\066\102\076\100\077\072" +
    "\100\074\101\054\102\062\001\002\000\036\004\162\005" +
    "\165\006\163\007\166\010\uffbc\011\uffbc\014\uffbc\017\uffbc" +
    "\057\uffbc\061\uffbc\063\uffbc\064\uffbc\071\uffbc\075\164\001" +
    "\002\000\036\004\162\005\165\006\163\007\166\010\uffba" +
    "\011\uffba\014\uffba\017\uffba\057\uffba\061\uffba\063\uffba\064" +
    "\uffba\071\uffba\075\164\001\002\000\036\004\162\005\165" +
    "\006\163\007\166\010\uffb8\011\uffb8\014\uffb8\017\uffb8\057" +
    "\uffb8\061\uffb8\063\uffb8\064\uffb8\071\uffb8\075\164\001\002" +
    "\000\036\004\162\005\165\006\163\007\166\010\uffbb\011" +
    "\uffbb\014\uffbb\017\uffbb\057\uffbb\061\uffbb\063\uffbb\064\uffbb" +
    "\071\uffbb\075\164\001\002\000\036\004\162\005\165\006" +
    "\163\007\166\010\uffb9\011\uffb9\014\uffb9\017\uffb9\057\uffb9" +
    "\061\uffb9\063\uffb9\064\uffb9\071\uffb9\075\164\001\002\000" +
    "\036\004\162\005\165\006\163\007\166\010\uffb7\011\uffb7" +
    "\014\uffb7\017\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\071" +
    "\uffb7\075\164\001\002\000\004\066\222\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\052\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\014\uff99\017\uff99\023\uff99\024\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\057\uff99\061\uff99\063" +
    "\uff99\064\uff99\071\uff99\075\uff99\001\002\000\052\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\014\uff97\017" +
    "\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\057\uff97\061\uff97\063\uff97\064\uff97\071\uff97\075\uff97\001" +
    "\002\000\012\010\113\011\112\014\221\017\111\001\002" +
    "\000\074\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\034\uff96\035" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\061\uff96" +
    "\063\uff96\064\uff96\071\uff96\075\uff96\001\002\000\074\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\034\uff95\035\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\061\uff95\063\uff95\064" +
    "\uff95\071\uff95\075\uff95\001\002\000\004\066\224\001\002" +
    "\000\004\065\225\001\002\000\040\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\064\226\065\077" +
    "\066\102\076\100\077\072\100\074\101\054\102\062\001" +
    "\002\000\054\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\014\ufff3\016\ufff3\017\ufff3\023\ufff3\024\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\057\ufff3\061\ufff3\063\ufff3" +
    "\064\ufff3\071\ufff3\075\ufff3\001\002\000\012\010\113\011" +
    "\112\017\111\064\230\001\002\000\054\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\057\ufff2\061\ufff2\063\ufff2\064\ufff2\071\ufff2\075\ufff2\001" +
    "\002\000\036\006\064\032\070\040\065\041\056\042\053" +
    "\051\052\052\067\065\077\066\102\076\100\077\072\100" +
    "\074\101\054\102\062\001\002\000\012\010\113\011\112" +
    "\017\111\057\233\001\002\000\036\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\012\010\113\011\112\017\111\057\235\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\012\010\113\011\112\017\111\057" +
    "\237\001\002\000\036\006\064\032\070\040\065\041\056" +
    "\042\053\051\052\052\067\065\077\066\102\076\100\077" +
    "\072\100\074\101\054\102\062\001\002\000\012\010\113" +
    "\011\112\017\111\064\241\001\002\000\052\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\014\uff9d\017\uff9d" +
    "\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\057" +
    "\uff9d\061\uff9d\063\uff9d\064\uff9d\071\uff9d\075\uff9d\001\002" +
    "\000\036\006\064\032\070\040\065\041\056\042\053\051" +
    "\052\052\067\065\077\066\102\076\100\077\072\100\074" +
    "\101\054\102\062\001\002\000\012\010\113\011\112\017" +
    "\111\064\244\001\002\000\052\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\014\uff89\017\uff89\023\uff89\024" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\057\uff89\061\uff89" +
    "\063\uff89\064\uff89\071\uff89\075\uff89\001\002\000\004\002" +
    "\001\001\002\000\040\002\uffd3\012\uffd3\020\uffd3\022\uffd3" +
    "\033\uffd3\036\uffd3\037\uffd3\050\uffd3\060\uffd3\062\uffd3\063" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\074\uffd3\001\002\000\012" +
    "\010\113\011\112\017\111\061\uff8a\001\002\000\040\002" +
    "\ufff6\012\ufff6\020\ufff6\022\ufff6\033\ufff6\036\ufff6\037\ufff6" +
    "\050\ufff6\060\ufff6\062\ufff6\063\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\074\ufff6\001\002\000\036\006\uffcb\032\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\051\uffcb\052\uffcb\065\uffcb\066\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\001\002\000\036" +
    "\006\uffcc\032\uffcc\040\uffcc\041\uffcc\042\uffcc\051\uffcc\052" +
    "\uffcc\065\uffcc\066\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\001\002\000\036\006\uffca\032\uffca\040\uffca\041" +
    "\uffca\042\uffca\051\uffca\052\uffca\065\uffca\066\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\001\002\000\036\006" +
    "\uffcd\032\uffcd\040\uffcd\041\uffcd\042\uffcd\051\uffcd\052\uffcd" +
    "\065\uffcd\066\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102" +
    "\uffcd\001\002\000\036\006\064\032\070\040\065\041\056" +
    "\042\053\051\052\052\067\065\077\066\102\076\100\077" +
    "\072\100\074\101\054\102\062\001\002\000\036\006\uffce" +
    "\032\uffce\040\uffce\041\uffce\042\uffce\051\uffce\052\uffce\065" +
    "\uffce\066\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\001\002\000\012\010\113\011\112\017\111\061\uffcf\001" +
    "\002\000\040\002\uffd2\012\uffd2\020\uffd2\022\uffd2\033\uffd2" +
    "\036\uffd2\037\uffd2\050\uffd2\060\uffd2\062\uffd2\063\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\074\uffd2\001\002\000\040\002\uffdf" +
    "\012\uffdf\020\uffdf\022\uffdf\033\uffdf\036\uffdf\037\uffdf\050" +
    "\uffdf\060\uffdf\062\uffdf\063\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\074\uffdf\001\002\000\042\006\064\015\265\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\062\266\065\077" +
    "\066\102\076\100\077\072\100\074\101\054\102\062\001" +
    "\002\000\004\066\264\001\002\000\010\025\uffc2\057\uffc2" +
    "\061\uffc2\001\002\000\040\006\064\014\302\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\004\066\271\001\002\000\012\010\113\011\112\017\111" +
    "\061\uffc8\001\002\000\006\057\275\063\274\001\002\000" +
    "\004\071\272\001\002\000\036\006\064\032\070\040\065" +
    "\041\056\042\053\051\052\052\067\065\077\066\102\076" +
    "\100\077\072\100\074\101\054\102\062\001\002\000\014" +
    "\010\113\011\112\017\111\057\uff91\063\uff91\001\002\000" +
    "\004\061\uffc5\001\002\000\004\066\276\001\002\000\004" +
    "\071\277\001\002\000\036\006\064\032\070\040\065\041" +
    "\056\042\053\051\052\052\067\065\077\066\102\076\100" +
    "\077\072\100\074\101\054\102\062\001\002\000\014\010" +
    "\113\011\112\017\111\057\uff92\063\uff92\001\002\000\006" +
    "\014\305\057\304\001\002\000\004\061\uffc6\001\002\000" +
    "\014\010\113\011\112\014\uffc3\017\111\057\uffc3\001\002" +
    "\000\036\006\064\032\070\040\065\041\056\042\053\051" +
    "\052\052\067\065\077\066\102\076\100\077\072\100\074" +
    "\101\054\102\062\001\002\000\004\061\uffc7\001\002\000" +
    "\014\010\113\011\112\014\uffc4\017\111\057\uffc4\001\002" +
    "\000\040\002\uffde\012\uffde\020\uffde\022\uffde\033\uffde\036" +
    "\uffde\037\uffde\050\uffde\060\uffde\062\uffde\063\uffde\066\uffde" +
    "\067\uffde\070\uffde\074\uffde\001\002\000\004\065\311\001" +
    "\002\000\006\064\314\074\312\001\002\000\004\066\323" +
    "\001\002\000\006\057\316\064\317\001\002\000\004\062" +
    "\031\001\002\000\040\002\uffed\012\uffed\020\uffed\022\uffed" +
    "\033\uffed\036\uffed\037\uffed\050\uffed\060\uffed\062\uffed\063" +
    "\uffed\066\uffed\067\uffed\070\uffed\074\uffed\001\002\000\004" +
    "\074\321\001\002\000\004\062\031\001\002\000\040\002" +
    "\uffee\012\uffee\020\uffee\022\uffee\033\uffee\036\uffee\037\uffee" +
    "\050\uffee\060\uffee\062\uffee\063\uffee\066\uffee\067\uffee\070" +
    "\uffee\074\uffee\001\002\000\004\066\322\001\002\000\006" +
    "\057\uffec\064\uffec\001\002\000\006\057\uffeb\064\uffeb\001" +
    "\002\000\036\012\017\020\047\022\044\033\020\036\026" +
    "\037\032\050\005\060\021\062\031\063\330\066\014\067" +
    "\011\070\007\074\025\001\002\000\040\002\ufffe\012\ufffe" +
    "\020\ufffe\022\ufffe\033\ufffe\036\ufffe\037\ufffe\050\ufffe\060" +
    "\ufffe\062\ufffe\063\ufffe\066\ufffe\067\ufffe\070\ufffe\074\ufffe" +
    "\001\002\000\004\061\334\001\002\000\040\002\ufffd\012" +
    "\ufffd\020\ufffd\022\ufffd\033\ufffd\036\ufffd\037\ufffd\050\ufffd" +
    "\060\ufffd\062\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd\074" +
    "\ufffd\001\002\000\044\002\uffff\012\uffff\020\uffff\021\uffff" +
    "\022\uffff\033\uffff\036\uffff\037\uffff\050\uffff\060\uffff\062" +
    "\uffff\063\uffff\066\uffff\067\uffff\070\uffff\072\uffff\074\uffff" +
    "\001\002\000\040\002\ufffc\012\ufffc\020\ufffc\022\ufffc\033" +
    "\ufffc\036\ufffc\037\ufffc\050\ufffc\060\ufffc\062\ufffc\063\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\074\ufffc\001\002\000\004\061" +
    "\333\001\002\000\040\002\ufffa\012\ufffa\020\ufffa\022\ufffa" +
    "\033\ufffa\036\ufffa\037\ufffa\050\ufffa\060\ufffa\062\ufffa\063" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\074\ufffa\001\002\000\040" +
    "\002\ufffb\012\ufffb\020\ufffb\022\ufffb\033\ufffb\036\ufffb\037" +
    "\ufffb\050\ufffb\060\ufffb\062\ufffb\063\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\074\ufffb\001\002\000\040\002\uffd9\012\uffd9\020" +
    "\uffd9\022\uffd9\033\uffd9\036\uffd9\037\uffd9\050\uffd9\060\uffd9" +
    "\062\uffd9\063\uffd9\066\uffd9\067\uffd9\070\uffd9\074\uffd9\001" +
    "\002\000\006\066\342\074\025\001\002\000\020\015\215" +
    "\016\214\025\256\053\254\054\252\055\251\056\253\001" +
    "\002\000\004\061\363\001\002\000\004\061\347\001\002" +
    "\000\020\015\106\016\343\025\256\053\254\054\252\055" +
    "\251\056\253\001\002\000\004\066\346\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\012\010\113\011\112\017\111\061" +
    "\uffd0\001\002\000\024\015\uff93\016\uff93\025\uff93\034\uff93" +
    "\035\uff93\053\uff93\054\uff93\055\uff93\056\uff93\001\002\000" +
    "\036\006\064\032\070\040\065\041\056\042\053\051\052" +
    "\052\067\065\077\066\102\076\100\077\072\100\074\101" +
    "\054\102\062\001\002\000\012\010\113\011\112\017\111" +
    "\061\351\001\002\000\004\066\355\001\002\000\004\064" +
    "\uffe5\001\002\000\004\064\uffe6\001\002\000\012\015\215" +
    "\016\214\034\216\035\217\001\002\000\012\015\106\016" +
    "\343\034\105\035\107\001\002\000\004\064\357\001\002" +
    "\000\004\062\360\001\002\000\034\012\017\020\047\022" +
    "\044\033\020\036\026\037\032\050\005\060\021\062\031" +
    "\066\014\067\011\070\007\074\025\001\002\000\036\012" +
    "\017\020\047\022\044\033\020\036\026\037\032\050\005" +
    "\060\021\062\031\063\362\066\014\067\011\070\007\074" +
    "\025\001\002\000\040\002\uffe8\012\uffe8\020\uffe8\022\uffe8" +
    "\033\uffe8\036\uffe8\037\uffe8\050\uffe8\060\uffe8\062\uffe8\063" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\074\uffe8\001\002\000\036" +
    "\006\064\032\070\040\065\041\056\042\053\051\052\052" +
    "\067\065\077\066\102\076\100\077\072\100\074\101\054" +
    "\102\062\001\002\000\012\010\113\011\112\017\111\061" +
    "\365\001\002\000\004\066\355\001\002\000\004\064\367" +
    "\001\002\000\004\062\370\001\002\000\034\012\017\020" +
    "\047\022\044\033\020\036\026\037\032\050\005\060\021" +
    "\062\031\066\014\067\011\070\007\074\025\001\002\000" +
    "\036\012\017\020\047\022\044\033\020\036\026\037\032" +
    "\050\005\060\021\062\031\063\372\066\014\067\011\070" +
    "\007\074\025\001\002\000\040\002\uffe7\012\uffe7\020\uffe7" +
    "\022\uffe7\033\uffe7\036\uffe7\037\uffe7\050\uffe7\060\uffe7\062" +
    "\uffe7\063\uffe7\066\uffe7\067\uffe7\070\uffe7\074\uffe7\001\002" +
    "\000\010\025\uffc1\057\uffc1\061\uffc1\001\002\000\040\002" +
    "\ufff5\012\ufff5\020\ufff5\022\ufff5\033\ufff5\036\ufff5\037\ufff5" +
    "\050\ufff5\060\ufff5\062\ufff5\063\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\074\ufff5\001\002\000\036\006\064\032\070\040\065" +
    "\041\056\042\053\051\052\052\067\065\077\066\102\076" +
    "\100\077\072\100\074\101\054\102\062\001\002\000\012" +
    "\010\113\011\112\017\111\064\377\001\002\000\004\061" +
    "\ufff4\001\002\000\036\006\064\032\070\040\065\041\056" +
    "\042\053\051\052\052\067\065\077\066\102\076\100\077" +
    "\072\100\074\101\054\102\062\001\002\000\012\010\113" +
    "\011\112\017\111\064\u0102\001\002\000\004\062\u0103\001" +
    "\002\000\034\012\017\020\047\022\044\033\020\036\026" +
    "\037\032\050\005\060\021\062\031\066\014\067\011\070" +
    "\007\074\025\001\002\000\036\012\017\020\047\022\044" +
    "\033\020\036\026\037\032\050\005\060\021\062\031\063" +
    "\u0105\066\014\067\011\070\007\074\025\001\002\000\040" +
    "\002\uffe4\012\uffe4\020\uffe4\022\uffe4\033\uffe4\036\uffe4\037" +
    "\uffe4\050\uffe4\060\uffe4\062\uffe4\063\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\074\uffe4\001\002\000\036\006\064\032\070\040" +
    "\065\041\056\042\053\051\052\052\067\065\077\066\102" +
    "\076\100\077\072\100\074\101\054\102\062\001\002\000" +
    "\012\010\113\011\112\017\111\064\u0108\001\002\000\004" +
    "\062\u0109\001\002\000\034\012\017\020\047\022\044\033" +
    "\020\036\026\037\032\050\005\060\021\062\031\066\014" +
    "\067\011\070\007\074\025\001\002\000\036\012\017\020" +
    "\047\022\044\033\020\036\026\037\032\050\005\060\021" +
    "\062\031\063\u010b\066\014\067\011\070\007\074\025\001" +
    "\002\000\042\002\uffe3\012\uffe3\013\u010c\020\uffe3\022\uffe3" +
    "\033\uffe3\036\uffe3\037\uffe3\050\uffe3\060\uffe3\062\uffe3\063" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\074\uffe3\001\002\000\006" +
    "\012\017\062\u010e\001\002\000\040\002\uffe2\012\uffe2\020" +
    "\uffe2\022\uffe2\033\uffe2\036\uffe2\037\uffe2\050\uffe2\060\uffe2" +
    "\062\uffe2\063\uffe2\066\uffe2\067\uffe2\070\uffe2\074\uffe2\001" +
    "\002\000\034\012\017\020\047\022\044\033\020\036\026" +
    "\037\032\050\005\060\021\062\031\066\014\067\011\070" +
    "\007\074\025\001\002\000\040\002\uffe1\012\uffe1\020\uffe1" +
    "\022\uffe1\033\uffe1\036\uffe1\037\uffe1\050\uffe1\060\uffe1\062" +
    "\uffe1\063\uffe1\066\uffe1\067\uffe1\070\uffe1\074\uffe1\001\002" +
    "\000\036\012\017\020\047\022\044\033\020\036\026\037" +
    "\032\050\005\060\021\062\031\063\u0111\066\014\067\011" +
    "\070\007\074\025\001\002\000\040\002\uffe0\012\uffe0\020" +
    "\uffe0\022\uffe0\033\uffe0\036\uffe0\037\uffe0\050\uffe0\060\uffe0" +
    "\062\uffe0\063\uffe0\066\uffe0\067\uffe0\070\uffe0\074\uffe0\001" +
    "\002\000\040\002\uffea\012\uffea\020\uffea\022\uffea\033\uffea" +
    "\036\uffea\037\uffea\050\uffea\060\uffea\062\uffea\063\uffea\066" +
    "\uffea\067\uffea\070\uffea\074\uffea\001\002\000\040\002\uffe9" +
    "\012\uffe9\020\uffe9\022\uffe9\033\uffe9\036\uffe9\037\uffe9\050" +
    "\uffe9\060\uffe9\062\uffe9\063\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\074\uffe9\001\002\000\040\002\uffdd\012\uffdd\020\uffdd\022" +
    "\uffdd\033\uffdd\036\uffdd\037\uffdd\050\uffdd\060\uffdd\062\uffdd" +
    "\063\uffdd\066\uffdd\067\uffdd\070\uffdd\074\uffdd\001\002\000" +
    "\036\006\064\032\070\040\065\041\056\042\053\051\052" +
    "\052\067\065\077\066\102\076\100\077\072\100\074\101" +
    "\054\102\062\001\002\000\012\010\113\011\112\017\111" +
    "\064\u0117\001\002\000\004\061\uffd1\001\002\000\040\002" +
    "\uffda\012\uffda\020\uffda\022\uffda\033\uffda\036\uffda\037\uffda" +
    "\050\uffda\060\uffda\062\uffda\063\uffda\066\uffda\067\uffda\070" +
    "\uffda\074\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\060\002\045\007\003\010\026\012\040\020" +
    "\012\021\035\022\032\023\005\024\023\026\037\027\014" +
    "\030\027\031\033\032\011\033\007\034\041\035\015\041" +
    "\034\043\021\047\044\050\042\051\036\052\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\343\001\001\000" +
    "\002\001\001\000\054\007\003\010\026\012\040\020\324" +
    "\021\035\022\032\023\005\024\023\026\037\027\014\030" +
    "\027\031\033\032\011\033\330\034\326\041\034\043\021" +
    "\047\044\050\325\051\036\052\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\007\003\010\026\012\040\020\012\021\035\022\032\023" +
    "\005\024\023\026\037\027\014\030\027\031\033\032\011" +
    "\033\007\034\041\035\323\041\034\043\021\047\044\050" +
    "\042\051\036\052\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\056\004\062\005\246\006\072\007\065\010\074\012\060" +
    "\013\054\014\075\015\100\050\050\051\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\056\004\062\005\070\006\072\007\065\010\074\012" +
    "\060\013\054\014\075\015\100\050\050\051\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\056\004\176\007\065" +
    "\010\074\012\060\014\075\015\100\050\050\051\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\056\004\160\007\065\010\074\012\060\014" +
    "\075\015\100\050\050\051\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\056\004\062" +
    "\005\137\006\072\007\065\010\074\012\060\013\054\014" +
    "\075\015\100\050\050\051\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\056\004\062\005\123\006\072\007\065\010\074" +
    "\012\060\013\054\014\075\015\100\037\122\050\050\051" +
    "\057\001\001\000\002\001\001\000\032\003\056\004\062" +
    "\005\107\006\072\007\065\010\074\012\060\013\054\014" +
    "\075\015\100\050\050\051\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\056\004\062\005\116\006" +
    "\072\007\065\010\074\012\060\013\054\014\075\015\100" +
    "\050\050\051\057\001\001\000\032\003\056\004\062\005" +
    "\115\006\072\007\065\010\074\012\060\013\054\014\075" +
    "\015\100\050\050\051\057\001\001\000\032\003\056\004" +
    "\062\005\114\006\072\007\065\010\074\012\060\013\054" +
    "\014\075\015\100\050\050\051\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\056\004\062\005\120\006\072\007\065\010" +
    "\074\012\060\013\054\014\075\015\100\050\050\051\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\056\004\062\005\126" +
    "\006\072\007\065\010\074\012\060\013\054\014\075\015" +
    "\100\050\050\051\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\056\004\062\005\123" +
    "\006\072\007\065\010\074\012\060\013\054\014\075\015" +
    "\100\037\135\050\050\051\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\145\046\143" +
    "\001\001\000\006\044\154\045\152\001\001\000\032\003" +
    "\056\004\062\005\146\006\072\007\065\010\074\012\060" +
    "\013\054\014\075\015\100\050\050\051\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\056\004\172\007\065\010\074\012\060\014\075" +
    "\015\100\050\050\051\057\001\001\000\024\003\056\004" +
    "\171\007\065\010\074\012\060\014\075\015\100\050\050" +
    "\051\057\001\001\000\024\003\056\004\170\007\065\010" +
    "\074\012\060\014\075\015\100\050\050\051\057\001\001" +
    "\000\024\003\056\004\167\007\065\010\074\012\060\014" +
    "\075\015\100\050\050\051\057\001\001\000\024\003\056" +
    "\004\166\007\065\010\074\012\060\014\075\015\100\050" +
    "\050\051\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\056\004\062\005\174\006\072\007\065\010\074" +
    "\012\060\013\054\014\075\015\100\050\050\051\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\056\004\212\007\065\010\074\012\060\014" +
    "\075\015\100\050\050\051\057\001\001\000\024\003\056" +
    "\004\211\007\065\010\074\012\060\014\075\015\100\050" +
    "\050\051\057\001\001\000\024\003\056\004\210\007\065" +
    "\010\074\012\060\014\075\015\100\050\050\051\057\001" +
    "\001\000\024\003\056\004\207\007\065\010\074\012\060" +
    "\014\075\015\100\050\050\051\057\001\001\000\024\003" +
    "\056\004\206\007\065\010\074\012\060\014\075\015\100" +
    "\050\050\051\057\001\001\000\024\003\056\004\205\007" +
    "\065\010\074\012\060\014\075\015\100\050\050\051\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\056\004\062\005\217\006" +
    "\072\007\065\010\074\012\060\013\054\014\075\015\100" +
    "\050\050\051\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\056\004" +
    "\062\005\226\006\072\007\065\010\074\012\060\013\054" +
    "\014\075\015\100\050\050\051\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\056" +
    "\004\062\005\231\006\072\007\065\010\074\012\060\013" +
    "\054\014\075\015\100\050\050\051\057\001\001\000\002" +
    "\001\001\000\032\003\056\004\062\005\233\006\072\007" +
    "\065\010\074\012\060\013\054\014\075\015\100\050\050" +
    "\051\057\001\001\000\002\001\001\000\032\003\056\004" +
    "\062\005\235\006\072\007\065\010\074\012\060\013\054" +
    "\014\075\015\100\050\050\051\057\001\001\000\002\001" +
    "\001\000\032\003\056\004\062\005\237\006\072\007\065" +
    "\010\074\012\060\013\054\014\075\015\100\050\050\051" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\056\004\062\005\242\006\072\007\065\010\074\012" +
    "\060\013\054\014\075\015\100\050\050\051\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\056\004\062\005\256\006\072\007\065" +
    "\010\074\012\060\013\054\014\075\015\100\050\050\051" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\056\004\062\005" +
    "\266\006\072\007\065\010\074\012\060\013\054\014\075" +
    "\015\100\050\050\051\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\056\004\062\005\302\006\072" +
    "\007\065\010\074\012\060\013\054\014\075\015\100\036" +
    "\300\050\050\051\057\001\001\000\004\042\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\056\004\062\005\272\006\072\007\065\010\074" +
    "\012\060\013\054\014\075\015\100\050\050\051\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\056\004\062\005\277\006" +
    "\072\007\065\010\074\012\060\013\054\014\075\015\100" +
    "\050\050\051\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\056" +
    "\004\062\005\305\006\072\007\065\010\074\012\060\013" +
    "\054\014\075\015\100\050\050\051\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\007\003\010\026\012\040\020\324\021\035\022\032" +
    "\023\005\024\023\026\037\027\014\030\027\031\033\032" +
    "\011\033\330\034\326\041\034\043\021\047\044\050\325" +
    "\051\036\052\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\336\021\337\022\340\041\034" +
    "\001\001\000\004\017\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\343\001\001\000\002\001\001" +
    "\000\032\003\056\004\062\005\344\006\072\007\065\010" +
    "\074\012\060\013\054\014\075\015\100\050\050\051\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\056\004\062\005\347\006\072\007\065\010\074\012\060" +
    "\013\054\014\075\015\100\050\050\051\057\001\001\000" +
    "\002\001\001\000\012\007\351\010\352\011\355\012\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\003\010\026\012\040\020\012\021\035\022" +
    "\032\023\005\024\023\026\037\027\014\030\027\031\033" +
    "\032\011\033\007\034\041\035\360\041\034\043\021\047" +
    "\044\050\042\051\036\052\022\001\001\000\054\007\003" +
    "\010\026\012\040\020\324\021\035\022\032\023\005\024" +
    "\023\026\037\027\014\030\027\031\033\032\011\033\330" +
    "\034\326\041\034\043\021\047\044\050\325\051\036\052" +
    "\331\001\001\000\002\001\001\000\032\003\056\004\062" +
    "\005\363\006\072\007\065\010\074\012\060\013\054\014" +
    "\075\015\100\050\050\051\057\001\001\000\002\001\001" +
    "\000\012\007\351\010\352\011\365\012\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\007\003\010\026" +
    "\012\040\020\012\021\035\022\032\023\005\024\023\026" +
    "\037\027\014\030\027\031\033\032\011\033\007\034\041" +
    "\035\370\041\034\043\021\047\044\050\042\051\036\052" +
    "\022\001\001\000\054\007\003\010\026\012\040\020\324" +
    "\021\035\022\032\023\005\024\023\026\037\027\014\030" +
    "\027\031\033\032\011\033\330\034\326\041\034\043\021" +
    "\047\044\050\325\051\036\052\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\056" +
    "\004\062\005\375\006\072\007\065\010\074\012\060\013" +
    "\054\014\075\015\100\050\050\051\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\056\004\062\005" +
    "\u0100\006\072\007\065\010\074\012\060\013\054\014\075" +
    "\015\100\050\050\051\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\007\003\010\026\012\040\020\012" +
    "\021\035\022\032\023\005\024\023\026\037\027\014\030" +
    "\027\031\033\032\011\033\007\034\041\035\u0103\041\034" +
    "\043\021\047\044\050\042\051\036\052\022\001\001\000" +
    "\054\007\003\010\026\012\040\020\324\021\035\022\032" +
    "\023\005\024\023\026\037\027\014\030\027\031\033\032" +
    "\011\033\330\034\326\041\034\043\021\047\044\050\325" +
    "\051\036\052\331\001\001\000\002\001\001\000\032\003" +
    "\056\004\062\005\u0106\006\072\007\065\010\074\012\060" +
    "\013\054\014\075\015\100\050\050\051\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\007\003\010\026" +
    "\012\040\020\012\021\035\022\032\023\005\024\023\026" +
    "\037\027\014\030\027\031\033\032\011\033\007\034\041" +
    "\035\u0109\041\034\043\021\047\044\050\042\051\036\052" +
    "\022\001\001\000\054\007\003\010\026\012\040\020\324" +
    "\021\035\022\032\023\005\024\023\026\037\027\014\030" +
    "\027\031\033\032\011\033\330\034\326\041\034\043\021" +
    "\047\044\050\325\051\036\052\331\001\001\000\002\001" +
    "\001\000\006\024\u010e\025\u010c\001\001\000\002\001\001" +
    "\000\056\007\003\010\026\012\040\020\012\021\035\022" +
    "\032\023\005\024\023\026\037\027\014\030\027\031\033" +
    "\032\011\033\007\034\041\035\u010f\041\034\043\021\047" +
    "\044\050\042\051\036\052\022\001\001\000\002\001\001" +
    "\000\054\007\003\010\026\012\040\020\324\021\035\022" +
    "\032\023\005\024\023\026\037\027\014\030\027\031\033" +
    "\032\011\033\330\034\326\041\034\043\021\047\044\050" +
    "\325\051\036\052\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\056\004\062\005\u0115\006\072\007\065\010\074\012\060" +
    "\013\054\014\075\015\100\050\050\051\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserfs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserfs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserfs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserfs$actions {
  private final parserfs parser;

  /** Constructor */
  CUP$parserfs$actions(parserfs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action_part00000000(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserfs$result;

      /* select the action based on the action number */
      switch (CUP$parserfs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = start_val;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserfs$parser.done_parsing();
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 setInstrucciones(valor); 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveI INSTRUCCIONES llaveD 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BLOQUE",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES BLOQUE 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCIONES METODO 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCIONES IMPORTAR puntocoma 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 Bloque met = new Bloque(); met.add(valor); RESULT = met; 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= BLOQUE 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= METODO 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= IMPORTAR puntocoma 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPORTAR ::= importar pari EXPL pard 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp destino = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Importar(iright,ileft, destino);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",40, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NATIVA ::= NATIVA punto identificador pari pard 
            {
              Nodo RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Nodo origen = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT= new Nativa(origenright, origenleft, origen, funcion);
             
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",39, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NATIVA ::= NATIVA punto identificador pari EXPL pard 
            {
              Nodo RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Nodo origen = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp metodo = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT= new Nativa(origenright, origenleft, origen, funcion, metodo);
             
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",39, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NATIVA ::= identificador punto identificador pari pard 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",39, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NATIVA ::= identificador punto arrayarchivo pari pard 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), "guardar");
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",39, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NATIVA ::= identificador punto identificador pari LVALORES pard 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> parametros = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion, parametros);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",39, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= funcion identificador pari PARAMETROS pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Nodo> parametros = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre, parametros, instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= funcion identificador pari pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre,  instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= PARAMETROS coma var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;       
        
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 
            ArrayList<Nodo> l = new ArrayList<Nodo>(); 
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BREAK ::= detener puntocoma 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT  = new Romper(ileft, iright);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BREAK",22, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTINUE ::= tcontinuar puntocoma 
            {
              Sentencia RESULT =null;
		 RESULT = new Continuar();
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CONTINUE",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FOR ::= para pari ASIGNACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR ::= para pari DECLARACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ACTUALIZACION ::= DECREMENTO 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = d;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ACTUALIZACION ::= AUMENTO 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = a;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WHILE ::= mientras pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new While(cond, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("WHILE",20, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(cond,met);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD sino ELSE 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new IfElse(cond,met,inst2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= IF 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sent;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(new BoolExp(true),met );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= IMPRIMIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;
		int wileleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int wileright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo wile = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = wile;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int aumentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int aumentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp aument = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = aument;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo fr = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = fr;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sw;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= BREAK 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= CONTINUE 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= SELECCIONAR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= RETORNAR puntocoma 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= NATIVA puntocoma 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= imprimir pari EXPL pard 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Imprimir(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= identificador TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(new idExp(nombreleft, nombreright, nombre), valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= ACCESO TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(acceso, valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TASIGNACION ::= igual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TASIGNACION ::= masigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TASIGNACION ::= menosigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TASIGNACION ::= multiigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TASIGNACION ::= divigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= LID 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT  = new Declaracion(lleft, lright, l);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= LID igual EXPL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Declaracion(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= LID igual corchetei LARREGLO corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valor = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= LID igual corchetei corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= LID igual llaveI LATRIBUTO llaveD 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Atributo atributos = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Declaracion(lleft, lright, l, atributos);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LARREGLO ::= LARREGLO coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LARREGLO ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LID ::= LID coma identificador 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 lista.add(valor); RESULT = lista;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",31, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LID ::= var identificador 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",31, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPL ::= EXPL and EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new And(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPL ::= EXPL or EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Or(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPL ::= SSELECCION 
            {
              Exp RESULT =null;
		int seleccionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int seleccionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp seleccion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = seleccion;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPL ::= EXPC 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPC ::= EXP mayor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPC ::= EXP menor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPC ::= EXP menorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPC ::= EXP mayorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPC ::= EXP igualigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Igual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPC ::= EXP desigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Diferente(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPC ::= EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor1;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP suma EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Suma(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP multi EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Multi(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP div EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Div(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP resta EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Resta(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP potencia EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Potencia(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= exclam EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Negacion(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= pari EXPL pard 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= resta EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Menos(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= decimal 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new DoubleExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= entero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new IntExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= identificador 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new idExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= cadena 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new StringExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= falso 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= verdadero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= caracter 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new CharExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= AUMENTO 
            {
              Exp RESULT =null;
		int aumleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aumright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp aum = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = aum;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= DECREMENTO 
            {
              Exp RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= ACCESO 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = acceso;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= LLAMADA 
            {
              Exp RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = llamada;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= VENTANA 
            {
              Exp RESULT =null;
		int ventanaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int ventanaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp ventana = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = ventana;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= NATIVA 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT =(Exp) valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= ARRAYARCHIVO 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= LEERGXML 
            {
              Exp RESULT =null;
		int xmlleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int xmlright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp xml = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = xml;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= nulo 
            {
              Exp RESULT =null;
		int nuloleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nuloright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nulo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new StringExp("nulo");
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VENTANA ::= crearventana pari EXPL coma EXPL coma EXPL coma EXPL pard 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-9)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).right;
		Exp color = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Exp alto = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Exp ancho = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp nombre = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                Atributo atributos = new Atributo(colorleft, colorright, "color", color);
                atributos.addAtributo("alto", alto);
                atributos.addAtributo("ancho", ancho);
                atributos.addAtributo("id", nombre);
                atributos.addAtributo("nombre", nombre);
                atributos.addAtributo("tipo", new StringExp("ventana"));
                atributos.addAtributo("contenido",new Hashtable<String,Simbolo>());
                RESULT = atributos;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("VENTANA",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-9)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRAYARCHIVO ::= arrayarchivo pari EXPL pard 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                    RESULT = new ArrayArchivo(iright, ileft, expresion);
                
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ARRAYARCHIVO",10, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SSELECCION ::= EXPL interrogacion EXPL dospuntos EXPL 
            {
              Exp RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valorv = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valorf = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new SSeleccion(condicionleft, condicionright, condicion, valorv, valorf);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SSELECCION",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AUMENTO ::= identificador aumento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AUMENTO ::= ACCESO aumento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECREMENTO ::= identificador decremento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECREMENTO ::= ACCESO decremento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ACCESO ::= ACCESO corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new  AccesoArray(expresionright,expresionleft ,acceso, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ACCESO ::= ACCESO punto identificador 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new  Acceso(accesoright,accesoleft ,acceso, new idExp(nombre));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ACCESO ::= identificador corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new  AccesoArray(nombreright,nombreleft ,new idExp(nombre), expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ACCESO ::= identificador punto identificador 
            {
              Exp RESULT =null;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre1 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int nombre2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nombre2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nombre2 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Acceso(nombre1right,nombre1left ,new idExp(nombre1), new idExp(nombre2));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LATRIBUTO ::= LATRIBUTO coma identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Atributo t = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                t.addAtributo(nombre,valor);
                RESULT = t;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LATRIBUTO ::= identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Atributo(nombreleft, nombreright, nombre, valor);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",32, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",33, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO DEFECTO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",33, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",36, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",36, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASO ::= caso EXPL dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, condicion, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DEFECTO ::= defecto dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, null, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DEFECTO",35, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RETORNAR ::= retornar EXPL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Retorno(ileft, iright, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("RETORNAR",37, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LEERGXML ::= leergxml pari EXPL pard 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
        RESULT = new Leer(ileft, iright, valor);
    
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LEERGXML",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LLAMADA ::= identificador pari LVALORES pard 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valores = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Llamada(ileft, iright, i, valores);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LLAMADA",38, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LLAMADA ::= identificador pari pard 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT = new Llamada(ileft, iright, i, new ArrayList<Exp>());
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LLAMADA",38, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LVALORES ::= LVALORES coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LVALORES ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserfs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
              return CUP$parserfs$do_action_part00000000(
                               CUP$parserfs$act_num,
                               CUP$parserfs$parser,
                               CUP$parserfs$stack,
                               CUP$parserfs$top);
    }
}

}
