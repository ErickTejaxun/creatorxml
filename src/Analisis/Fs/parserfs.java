
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Fs;

import java_cup.runtime.*;
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserfs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserfs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserfs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserfs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\032" +
    "\005\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\004\000\002" +
    "\033\004\000\002\050\006\000\002\047\007\000\002\047" +
    "\010\000\002\047\007\000\002\047\010\000\002\031\010" +
    "\000\002\031\007\000\002\036\006\000\002\036\004\000" +
    "\002\026\004\000\002\030\004\000\002\025\015\000\002" +
    "\025\015\000\002\010\003\000\002\010\003\000\002\024" +
    "\011\000\002\022\011\000\002\022\013\000\002\023\003" +
    "\000\002\023\005\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\004\000\002\021\006\000" +
    "\002\020\005\000\002\020\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\007" +
    "\000\002\017\006\000\002\017\007\000\002\034\005\000" +
    "\002\034\003\000\002\037\005\000\002\037\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\013\006" +
    "\000\002\012\007\000\002\006\004\000\002\006\004\000" +
    "\002\007\004\000\002\007\004\000\002\011\006\000\002" +
    "\011\005\000\002\011\006\000\002\011\005\000\002\040" +
    "\007\000\002\040\005\000\002\041\011\000\002\041\012" +
    "\000\002\044\004\000\002\044\003\000\002\042\006\000" +
    "\002\043\005\000\002\045\004\000\002\046\006\000\002" +
    "\046\005\000\002\035\005\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\034\012\017\020\047\022\044\033\020\036" +
    "\026\037\032\046\005\056\021\060\031\064\014\065\011" +
    "\066\007\072\025\001\002\000\004\057\u0104\001\002\000" +
    "\004\063\u0101\001\002\000\004\057\u0100\001\002\000\004" +
    "\057\377\001\002\000\040\002\ufff7\012\ufff7\020\ufff7\022" +
    "\ufff7\033\ufff7\036\ufff7\037\ufff7\046\ufff7\056\ufff7\060\ufff7" +
    "\061\ufff7\064\ufff7\065\ufff7\066\ufff7\072\ufff7\001\002\000" +
    "\004\057\376\001\002\000\040\002\uffd6\012\uffd6\020\uffd6" +
    "\022\uffd6\033\uffd6\036\uffd6\037\uffd6\046\uffd6\056\uffd6\060" +
    "\uffd6\061\uffd6\064\uffd6\065\uffd6\066\uffd6\072\uffd6\001\002" +
    "\000\040\002\ufff9\012\ufff9\020\ufff9\022\ufff9\033\ufff9\036" +
    "\ufff9\037\ufff9\046\ufff9\056\ufff9\060\ufff9\061\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\072\ufff9\001\002\000\026\015\100\016" +
    "\076\025\232\034\077\035\102\051\230\052\226\053\225" +
    "\054\227\063\101\001\002\000\040\002\uffd9\012\uffd9\020" +
    "\uffd9\022\uffd9\033\uffd9\036\uffd9\037\uffd9\046\uffd9\056\uffd9" +
    "\060\uffd9\061\uffd9\064\uffd9\065\uffd9\066\uffd9\072\uffd9\001" +
    "\002\000\036\002\000\012\017\020\047\022\044\033\020" +
    "\036\026\037\032\046\005\056\021\060\031\064\014\065" +
    "\011\066\007\072\025\001\002\000\004\063\362\001\002" +
    "\000\004\063\354\001\002\000\004\063\351\001\002\000" +
    "\040\002\uffd5\012\uffd5\020\uffd5\022\uffd5\033\uffd5\036\uffd5" +
    "\037\uffd5\046\uffd5\056\uffd5\060\uffd5\061\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\072\uffd5\001\002\000\004\057\350\001\002" +
    "\000\040\002\uffdd\012\uffdd\020\uffdd\022\uffdd\033\uffdd\036" +
    "\uffdd\037\uffdd\046\uffdd\056\uffdd\060\uffdd\061\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\072\uffdd\001\002\000\004\064\347\001" +
    "\002\000\004\063\312\001\002\000\004\057\311\001\002" +
    "\000\040\002\uffd7\012\uffd7\020\uffd7\022\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\046\uffd7\056\uffd7\060\uffd7\061\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\072\uffd7\001\002\000\034\012\017\020" +
    "\047\022\044\033\020\036\026\037\032\046\005\056\021" +
    "\060\031\064\014\065\011\066\007\072\025\001\002\000" +
    "\004\064\264\001\002\000\004\057\263\001\002\000\040" +
    "\002\uffd8\012\uffd8\020\uffd8\022\uffd8\033\uffd8\036\uffd8\037" +
    "\uffd8\046\uffd8\056\uffd8\060\uffd8\061\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\072\uffd8\001\002\000\010\025\236\055\237\057" +
    "\uffca\001\002\000\004\057\235\001\002\000\006\016\213" +
    "\057\234\001\002\000\040\002\uffdc\012\uffdc\020\uffdc\022" +
    "\uffdc\033\uffdc\036\uffdc\037\uffdc\046\uffdc\056\uffdc\060\uffdc" +
    "\061\uffdc\064\uffdc\065\uffdc\066\uffdc\072\uffdc\001\002\000" +
    "\024\015\206\016\204\025\232\034\205\035\207\051\230" +
    "\052\226\053\225\054\227\001\002\000\040\002\ufff8\012" +
    "\ufff8\020\ufff8\022\ufff8\033\ufff8\036\ufff8\037\ufff8\046\ufff8" +
    "\056\ufff8\060\ufff8\061\ufff8\064\ufff8\065\ufff8\066\ufff8\072" +
    "\ufff8\001\002\000\004\057\224\001\002\000\030\006\061" +
    "\032\065\040\063\047\052\063\073\064\075\074\074\075" +
    "\066\076\070\077\053\100\060\001\002\000\004\057\222" +
    "\001\002\000\004\002\221\001\002\000\004\063\050\001" +
    "\002\000\030\006\061\032\065\040\063\047\052\063\073" +
    "\064\075\074\074\075\066\076\070\077\053\100\060\001" +
    "\002\000\052\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\014\uffa4\017\uffa4\023\uffa4\024\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\055\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\067\uffa4\073\uffa4\001\002\000\052\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\014\uffab\017\uffab\023\uffab" +
    "\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\055\uffab\057" +
    "\uffab\061\uffab\062\uffab\067\uffab\073\uffab\001\002\000\052" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\014" +
    "\uffae\017\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\055\uffae\057\uffae\061\uffae\062\uffae\067\uffae\073" +
    "\uffae\001\002\000\024\010\uffbf\011\uffbf\014\uffbf\017\uffbf" +
    "\055\uffbf\057\uffbf\061\uffbf\062\uffbf\067\uffbf\001\002\000" +
    "\054\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\014\uffa3\016\213\017\uffa3\023\uffa3\024\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\055\uffa3\057\uffa3\061\uffa3\062\uffa3" +
    "\067\uffa3\073\uffa3\001\002\000\062\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\014\uffa5\015\206\016\204" +
    "\017\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\034\205\035\207\055\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\067\uffa5\073\uffa5\001\002\000\052\004\133\005\136\006" +
    "\134\007\137\010\uffb7\011\uffb7\014\uffb7\017\uffb7\023\170" +
    "\024\173\026\175\027\172\030\171\031\174\055\uffb7\057" +
    "\uffb7\061\uffb7\062\uffb7\067\uffb7\073\135\001\002\000\052" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\014" +
    "\uffa8\017\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\055\uffa8\057\uffa8\061\uffa8\062\uffa8\067\uffa8\073" +
    "\uffa8\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\052\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\014\uffa7\017\uffa7\023\uffa7\024\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\055\uffa7\057\uffa7\061\uffa7" +
    "\062\uffa7\067\uffa7\073\uffa7\001\002\000\004\063\164\001" +
    "\002\000\012\010\110\011\107\017\106\062\145\001\002" +
    "\000\030\006\061\032\065\040\063\047\052\063\073\064" +
    "\075\074\074\075\066\076\070\077\053\100\060\001\002" +
    "\000\052\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\014\uffa9\017\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\055\uffa9\057\uffa9\061\uffa9\062\uffa9\067" +
    "\uffa9\073\uffa9\001\002\000\024\010\uffbe\011\uffbe\014\uffbe" +
    "\017\uffbe\055\uffbe\057\uffbe\061\uffbe\062\uffbe\067\uffbe\001" +
    "\002\000\052\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\014\uffad\017\uffad\023\uffad\024\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\055\uffad\057\uffad\061\uffad\062\uffad" +
    "\067\uffad\073\uffad\001\002\000\052\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\014\uffa6\017\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\055\uffa6\057" +
    "\uffa6\061\uffa6\062\uffa6\067\uffa6\073\uffa6\001\002\000\052" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\014" +
    "\uffa2\017\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\055\uffa2\057\uffa2\061\uffa2\062\uffa2\067\uffa2\073" +
    "\uffa2\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\052\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\014\uffaa\017\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\055\uffaa\057\uffaa\061\uffaa" +
    "\062\uffaa\067\uffaa\073\uffaa\001\002\000\064\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\014\uffac\015\100" +
    "\016\076\017\uffac\023\uffac\024\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\034\077\035\102\055\uffac\057\uffac\061\uffac" +
    "\062\uffac\063\101\067\uffac\073\uffac\001\002\000\004\064" +
    "\123\001\002\000\052\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\014\uff9f\017\uff9f\023\uff9f\024\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\055\uff9f\057\uff9f\061\uff9f" +
    "\062\uff9f\067\uff9f\073\uff9f\001\002\000\030\006\061\032" +
    "\065\040\063\047\052\063\073\064\075\074\074\075\066" +
    "\076\070\077\053\100\060\001\002\000\032\006\061\032" +
    "\065\040\063\047\052\062\103\063\073\064\075\074\074" +
    "\075\066\076\070\077\053\100\060\001\002\000\052\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\014\uff9d" +
    "\017\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\055\uff9d\057\uff9d\061\uff9d\062\uff9d\067\uff9d\073\uff9d" +
    "\001\002\000\052\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\014\uff8d\017\uff8d\023\uff8d\024\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\055\uff8d\057\uff8d\061\uff8d\062" +
    "\uff8d\067\uff8d\073\uff8d\001\002\000\006\055\116\062\117" +
    "\001\002\000\014\010\110\011\107\017\106\055\uff8b\062" +
    "\uff8b\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\024\010\uffc0\011\107\014\uffc0\017\106" +
    "\055\uffc0\057\uffc0\061\uffc0\062\uffc0\067\uffc0\001\002\000" +
    "\024\010\uffc1\011\uffc1\014\uffc1\017\106\055\uffc1\057\uffc1" +
    "\061\uffc1\062\uffc1\067\uffc1\001\002\000\012\010\110\011" +
    "\107\017\106\067\114\001\002\000\030\006\061\032\065" +
    "\040\063\047\052\063\073\064\075\074\074\075\066\076" +
    "\070\077\053\100\060\001\002\000\024\010\110\011\107" +
    "\014\uffa0\017\106\055\uffa0\057\uffa0\061\uffa0\062\uffa0\067" +
    "\uffa0\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\052\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\014\uff8e\017\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\055\uff8e\057\uff8e\061\uff8e" +
    "\062\uff8e\067\uff8e\073\uff8e\001\002\000\014\010\110\011" +
    "\107\017\106\055\uff8c\062\uff8c\001\002\000\012\010\110" +
    "\011\107\014\122\017\106\001\002\000\074\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\034\uff99\035\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\057\uff99\061\uff99\062\uff99\067" +
    "\uff99\073\uff99\001\002\000\076\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\034\uff98\035\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\055\uff98\057\uff98\061\uff98\062\uff98\063\124\067\uff98" +
    "\073\uff98\001\002\000\032\006\061\032\065\040\063\047" +
    "\052\062\125\063\073\064\075\074\074\075\066\076\070" +
    "\077\053\100\060\001\002\000\054\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\055" +
    "\ufff1\057\ufff1\061\ufff1\062\ufff1\067\ufff1\073\ufff1\001\002" +
    "\000\012\010\110\011\107\017\106\062\127\001\002\000" +
    "\054\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\014\ufff0\016\ufff0\017\ufff0\023\ufff0\024\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\055\ufff0\057\ufff0\061\ufff0\062\ufff0" +
    "\067\ufff0\073\ufff0\001\002\000\012\010\110\011\107\017" +
    "\106\062\131\001\002\000\052\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\014\uffb0\017\uffb0\023\uffb0\024" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\055\uffb0\057\uffb0" +
    "\061\uffb0\062\uffb0\067\uffb0\073\uffb0\001\002\000\052\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1" +
    "\017\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\055\uffb1\057\uffb1\061\uffb1\062\uffb1\067\uffb1\073\uffb1" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\052\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\014\uffb4\017\uffb4\023\uffb4\024\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\055\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\067\uffb4\073\135\001\002\000\052\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5\017\uffb5\023" +
    "\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\055\uffb5" +
    "\057\uffb5\061\uffb5\062\uffb5\067\uffb5\073\135\001\002\000" +
    "\052\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\014\uffb2\017\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\055\uffb2\057\uffb2\061\uffb2\062\uffb2\067\uffb2" +
    "\073\uffb2\001\002\000\052\004\uffb3\005\136\006\uffb3\007" +
    "\137\010\uffb3\011\uffb3\014\uffb3\017\uffb3\023\uffb3\024\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\055\uffb3\057\uffb3\061" +
    "\uffb3\062\uffb3\067\uffb3\073\135\001\002\000\052\004\uffb6" +
    "\005\136\006\uffb6\007\137\010\uffb6\011\uffb6\014\uffb6\017" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\055\uffb6\057\uffb6\061\uffb6\062\uffb6\067\uffb6\073\135\001" +
    "\002\000\004\060\146\001\002\000\004\070\150\001\002" +
    "\000\010\021\157\061\155\070\150\001\002\000\030\006" +
    "\061\032\065\040\063\047\052\063\073\064\075\074\074" +
    "\075\066\076\070\077\053\100\060\001\002\000\010\021" +
    "\uff92\061\uff92\070\uff92\001\002\000\012\010\110\011\107" +
    "\017\106\067\153\001\002\000\004\060\031\001\002\000" +
    "\010\021\uff91\061\uff91\070\uff91\001\002\000\040\002\uff95" +
    "\012\uff95\020\uff95\022\uff95\033\uff95\036\uff95\037\uff95\046" +
    "\uff95\056\uff95\060\uff95\061\uff95\064\uff95\065\uff95\066\uff95" +
    "\072\uff95\001\002\000\004\061\163\001\002\000\004\067" +
    "\161\001\002\000\010\021\uff93\061\uff93\070\uff93\001\002" +
    "\000\004\060\031\001\002\000\004\061\uff90\001\002\000" +
    "\040\002\uff94\012\uff94\020\uff94\022\uff94\033\uff94\036\uff94" +
    "\037\uff94\046\uff94\056\uff94\060\uff94\061\uff94\064\uff94\065" +
    "\uff94\066\uff94\072\uff94\001\002\000\030\006\061\032\065" +
    "\040\063\047\052\063\073\064\075\074\074\075\066\076" +
    "\070\077\053\100\060\001\002\000\012\010\110\011\107" +
    "\017\106\062\166\001\002\000\052\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\014\uffa1\017\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\055\uffa1\057" +
    "\uffa1\061\uffa1\062\uffa1\067\uffa1\073\uffa1\001\002\000\052" +
    "\004\uffaf\005\136\006\uffaf\007\137\010\uffaf\011\uffaf\014" +
    "\uffaf\017\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\055\uffaf\057\uffaf\061\uffaf\062\uffaf\067\uffaf\073" +
    "\135\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\030\006\061\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\036\004\133\005\136\006\134\007\137" +
    "\010\uffbd\011\uffbd\014\uffbd\017\uffbd\055\uffbd\057\uffbd\061" +
    "\uffbd\062\uffbd\067\uffbd\073\135\001\002\000\036\004\133" +
    "\005\136\006\134\007\137\010\uffbb\011\uffbb\014\uffbb\017" +
    "\uffbb\055\uffbb\057\uffbb\061\uffbb\062\uffbb\067\uffbb\073\135" +
    "\001\002\000\036\004\133\005\136\006\134\007\137\010" +
    "\uffb9\011\uffb9\014\uffb9\017\uffb9\055\uffb9\057\uffb9\061\uffb9" +
    "\062\uffb9\067\uffb9\073\135\001\002\000\036\004\133\005" +
    "\136\006\134\007\137\010\uffbc\011\uffbc\014\uffbc\017\uffbc" +
    "\055\uffbc\057\uffbc\061\uffbc\062\uffbc\067\uffbc\073\135\001" +
    "\002\000\036\004\133\005\136\006\134\007\137\010\uffba" +
    "\011\uffba\014\uffba\017\uffba\055\uffba\057\uffba\061\uffba\062" +
    "\uffba\067\uffba\073\135\001\002\000\036\004\133\005\136" +
    "\006\134\007\137\010\uffb8\011\uffb8\014\uffb8\017\uffb8\055" +
    "\uffb8\057\uffb8\061\uffb8\062\uffb8\067\uffb8\073\135\001\002" +
    "\000\004\064\212\001\002\000\052\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\014\uff9e\017\uff9e\023\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\055\uff9e\057" +
    "\uff9e\061\uff9e\062\uff9e\067\uff9e\073\uff9e\001\002\000\030" +
    "\006\061\032\065\040\063\047\052\063\073\064\075\074" +
    "\074\075\066\076\070\077\053\100\060\001\002\000\052" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\014" +
    "\uff9c\017\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\055\uff9c\057\uff9c\061\uff9c\062\uff9c\067\uff9c\073" +
    "\uff9c\001\002\000\012\010\110\011\107\014\211\017\106" +
    "\001\002\000\074\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\034" +
    "\uff9b\035\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\057\uff9b\061\uff9b\062\uff9b\067\uff9b\073\uff9b\001\002\000" +
    "\074\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\034\uff9a\035\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\061" +
    "\uff9a\062\uff9a\067\uff9a\073\uff9a\001\002\000\004\064\214" +
    "\001\002\000\004\063\215\001\002\000\032\006\061\032" +
    "\065\040\063\047\052\062\216\063\073\064\075\074\074" +
    "\075\066\076\070\077\053\100\060\001\002\000\054\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\014\ufff3" +
    "\016\ufff3\017\ufff3\023\ufff3\024\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\055\ufff3\057\ufff3\061\ufff3\062\ufff3\067\ufff3" +
    "\073\ufff3\001\002\000\012\010\110\011\107\017\106\062" +
    "\220\001\002\000\054\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\014\ufff2\016\ufff2\017\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\055\ufff2\057\ufff2" +
    "\061\ufff2\062\ufff2\067\ufff2\073\ufff2\001\002\000\004\002" +
    "\001\001\002\000\040\002\uffd4\012\uffd4\020\uffd4\022\uffd4" +
    "\033\uffd4\036\uffd4\037\uffd4\046\uffd4\056\uffd4\060\uffd4\061" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\001\002\000\012" +
    "\010\110\011\107\017\106\057\uff8f\001\002\000\040\002" +
    "\ufff6\012\ufff6\020\ufff6\022\ufff6\033\ufff6\036\ufff6\037\ufff6" +
    "\046\ufff6\056\ufff6\060\ufff6\061\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\072\ufff6\001\002\000\030\006\uffcc\032\uffcc\040\uffcc" +
    "\047\uffcc\063\uffcc\064\uffcc\074\uffcc\075\uffcc\076\uffcc\077" +
    "\uffcc\100\uffcc\001\002\000\030\006\uffcd\032\uffcd\040\uffcd" +
    "\047\uffcd\063\uffcd\064\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\001\002\000\030\006\uffcb\032\uffcb\040\uffcb" +
    "\047\uffcb\063\uffcb\064\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\001\002\000\030\006\uffce\032\uffce\040\uffce" +
    "\047\uffce\063\uffce\064\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\001\002\000\030\006\061\032\065\040\063" +
    "\047\052\063\073\064\075\074\074\075\066\076\070\077" +
    "\053\100\060\001\002\000\030\006\uffcf\032\uffcf\040\uffcf" +
    "\047\uffcf\063\uffcf\064\uffcf\074\uffcf\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\001\002\000\012\010\110\011\107\017\106" +
    "\057\uffd0\001\002\000\040\002\uffd3\012\uffd3\020\uffd3\022" +
    "\uffd3\033\uffd3\036\uffd3\037\uffd3\046\uffd3\056\uffd3\060\uffd3" +
    "\061\uffd3\064\uffd3\065\uffd3\066\uffd3\072\uffd3\001\002\000" +
    "\040\002\uffe0\012\uffe0\020\uffe0\022\uffe0\033\uffe0\036\uffe0" +
    "\037\uffe0\046\uffe0\056\uffe0\060\uffe0\061\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\072\uffe0\001\002\000\034\006\061\015\241" +
    "\032\065\040\063\047\052\060\242\063\073\064\075\074" +
    "\074\075\066\076\070\077\053\100\060\001\002\000\004" +
    "\064\240\001\002\000\010\025\uffc3\055\uffc3\057\uffc3\001" +
    "\002\000\032\006\061\014\256\032\065\040\063\047\052" +
    "\063\073\064\075\074\074\075\066\076\070\077\053\100" +
    "\060\001\002\000\004\064\245\001\002\000\012\010\110" +
    "\011\107\017\106\057\uffc9\001\002\000\006\055\251\061" +
    "\250\001\002\000\004\067\246\001\002\000\030\006\061" +
    "\032\065\040\063\047\052\063\073\064\075\074\074\075" +
    "\066\076\070\077\053\100\060\001\002\000\014\010\110" +
    "\011\107\017\106\055\uff96\061\uff96\001\002\000\004\057" +
    "\uffc6\001\002\000\004\064\252\001\002\000\004\067\253" +
    "\001\002\000\030\006\061\032\065\040\063\047\052\063" +
    "\073\064\075\074\074\075\066\076\070\077\053\100\060" +
    "\001\002\000\014\010\110\011\107\017\106\055\uff97\061" +
    "\uff97\001\002\000\006\014\261\055\260\001\002\000\004" +
    "\057\uffc7\001\002\000\014\010\110\011\107\014\uffc4\017" +
    "\106\055\uffc4\001\002\000\030\006\061\032\065\040\063" +
    "\047\052\063\073\064\075\074\074\075\066\076\070\077" +
    "\053\100\060\001\002\000\004\057\uffc8\001\002\000\014" +
    "\010\110\011\107\014\uffc5\017\106\055\uffc5\001\002\000" +
    "\040\002\uffdf\012\uffdf\020\uffdf\022\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\046\uffdf\056\uffdf\060\uffdf\061\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\072\uffdf\001\002\000\004\063\265\001\002" +
    "\000\006\062\270\072\266\001\002\000\004\064\277\001" +
    "\002\000\006\055\272\062\273\001\002\000\004\060\031" +
    "\001\002\000\040\002\uffee\012\uffee\020\uffee\022\uffee\033" +
    "\uffee\036\uffee\037\uffee\046\uffee\056\uffee\060\uffee\061\uffee" +
    "\064\uffee\065\uffee\066\uffee\072\uffee\001\002\000\004\072" +
    "\275\001\002\000\004\060\031\001\002\000\040\002\uffef" +
    "\012\uffef\020\uffef\022\uffef\033\uffef\036\uffef\037\uffef\046" +
    "\uffef\056\uffef\060\uffef\061\uffef\064\uffef\065\uffef\066\uffef" +
    "\072\uffef\001\002\000\004\064\276\001\002\000\006\055" +
    "\uffed\062\uffed\001\002\000\006\055\uffec\062\uffec\001\002" +
    "\000\036\012\017\020\047\022\044\033\020\036\026\037" +
    "\032\046\005\056\021\060\031\061\304\064\014\065\011" +
    "\066\007\072\025\001\002\000\040\002\ufffe\012\ufffe\020" +
    "\ufffe\022\ufffe\033\ufffe\036\ufffe\037\ufffe\046\ufffe\056\ufffe" +
    "\060\ufffe\061\ufffe\064\ufffe\065\ufffe\066\ufffe\072\ufffe\001" +
    "\002\000\004\057\310\001\002\000\040\002\ufffd\012\ufffd" +
    "\020\ufffd\022\ufffd\033\ufffd\036\ufffd\037\ufffd\046\ufffd\056" +
    "\ufffd\060\ufffd\061\ufffd\064\ufffd\065\ufffd\066\ufffd\072\ufffd" +
    "\001\002\000\044\002\uffff\012\uffff\020\uffff\021\uffff\022" +
    "\uffff\033\uffff\036\uffff\037\uffff\046\uffff\056\uffff\060\uffff" +
    "\061\uffff\064\uffff\065\uffff\066\uffff\070\uffff\072\uffff\001" +
    "\002\000\040\002\ufffc\012\ufffc\020\ufffc\022\ufffc\033\ufffc" +
    "\036\ufffc\037\ufffc\046\ufffc\056\ufffc\060\ufffc\061\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\072\ufffc\001\002\000\004\057\307" +
    "\001\002\000\040\002\ufffa\012\ufffa\020\ufffa\022\ufffa\033" +
    "\ufffa\036\ufffa\037\ufffa\046\ufffa\056\ufffa\060\ufffa\061\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\072\ufffa\001\002\000\040\002" +
    "\ufffb\012\ufffb\020\ufffb\022\ufffb\033\ufffb\036\ufffb\037\ufffb" +
    "\046\ufffb\056\ufffb\060\ufffb\061\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\072\ufffb\001\002\000\040\002\uffda\012\uffda\020\uffda" +
    "\022\uffda\033\uffda\036\uffda\037\uffda\046\uffda\056\uffda\060" +
    "\uffda\061\uffda\064\uffda\065\uffda\066\uffda\072\uffda\001\002" +
    "\000\006\064\316\072\025\001\002\000\020\015\206\016" +
    "\204\025\232\051\230\052\226\053\225\054\227\001\002" +
    "\000\004\057\337\001\002\000\004\057\323\001\002\000" +
    "\020\015\100\016\317\025\232\051\230\052\226\053\225" +
    "\054\227\001\002\000\004\064\322\001\002\000\030\006" +
    "\061\032\065\040\063\047\052\063\073\064\075\074\074" +
    "\075\066\076\070\077\053\100\060\001\002\000\012\010" +
    "\110\011\107\017\106\057\uffd1\001\002\000\024\015\uff98" +
    "\016\uff98\025\uff98\034\uff98\035\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\001\002\000\030\006\061\032\065\040\063" +
    "\047\052\063\073\064\075\074\074\075\066\076\070\077" +
    "\053\100\060\001\002\000\012\010\110\011\107\017\106" +
    "\057\325\001\002\000\004\064\331\001\002\000\004\062" +
    "\uffe6\001\002\000\004\062\uffe7\001\002\000\012\015\206" +
    "\016\204\034\205\035\207\001\002\000\012\015\100\016" +
    "\317\034\077\035\102\001\002\000\004\062\333\001\002" +
    "\000\004\060\334\001\002\000\034\012\017\020\047\022" +
    "\044\033\020\036\026\037\032\046\005\056\021\060\031" +
    "\064\014\065\011\066\007\072\025\001\002\000\036\012" +
    "\017\020\047\022\044\033\020\036\026\037\032\046\005" +
    "\056\021\060\031\061\336\064\014\065\011\066\007\072" +
    "\025\001\002\000\040\002\uffe8\012\uffe8\020\uffe8\022\uffe8" +
    "\033\uffe8\036\uffe8\037\uffe8\046\uffe8\056\uffe8\060\uffe8\061" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\072\uffe8\001\002\000\030" +
    "\006\061\032\065\040\063\047\052\063\073\064\075\074" +
    "\074\075\066\076\070\077\053\100\060\001\002\000\012" +
    "\010\110\011\107\017\106\057\341\001\002\000\004\064" +
    "\331\001\002\000\004\062\343\001\002\000\004\060\344" +
    "\001\002\000\034\012\017\020\047\022\044\033\020\036" +
    "\026\037\032\046\005\056\021\060\031\064\014\065\011" +
    "\066\007\072\025\001\002\000\036\012\017\020\047\022" +
    "\044\033\020\036\026\037\032\046\005\056\021\060\031" +
    "\061\346\064\014\065\011\066\007\072\025\001\002\000" +
    "\040\002\uffe9\012\uffe9\020\uffe9\022\uffe9\033\uffe9\036\uffe9" +
    "\037\uffe9\046\uffe9\056\uffe9\060\uffe9\061\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\072\uffe9\001\002\000\010\025\uffc2\055\uffc2" +
    "\057\uffc2\001\002\000\040\002\ufff5\012\ufff5\020\ufff5\022" +
    "\ufff5\033\ufff5\036\ufff5\037\ufff5\046\ufff5\056\ufff5\060\ufff5" +
    "\061\ufff5\064\ufff5\065\ufff5\066\ufff5\072\ufff5\001\002\000" +
    "\030\006\061\032\065\040\063\047\052\063\073\064\075" +
    "\074\074\075\066\076\070\077\053\100\060\001\002\000" +
    "\012\010\110\011\107\017\106\062\353\001\002\000\004" +
    "\057\ufff4\001\002\000\030\006\061\032\065\040\063\047" +
    "\052\063\073\064\075\074\074\075\066\076\070\077\053" +
    "\100\060\001\002\000\012\010\110\011\107\017\106\062" +
    "\356\001\002\000\004\060\357\001\002\000\034\012\017" +
    "\020\047\022\044\033\020\036\026\037\032\046\005\056" +
    "\021\060\031\064\014\065\011\066\007\072\025\001\002" +
    "\000\036\012\017\020\047\022\044\033\020\036\026\037" +
    "\032\046\005\056\021\060\031\061\361\064\014\065\011" +
    "\066\007\072\025\001\002\000\040\002\uffe5\012\uffe5\020" +
    "\uffe5\022\uffe5\033\uffe5\036\uffe5\037\uffe5\046\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\064\uffe5\065\uffe5\066\uffe5\072\uffe5\001" +
    "\002\000\030\006\061\032\065\040\063\047\052\063\073" +
    "\064\075\074\074\075\066\076\070\077\053\100\060\001" +
    "\002\000\012\010\110\011\107\017\106\062\364\001\002" +
    "\000\004\060\365\001\002\000\034\012\017\020\047\022" +
    "\044\033\020\036\026\037\032\046\005\056\021\060\031" +
    "\064\014\065\011\066\007\072\025\001\002\000\036\012" +
    "\017\020\047\022\044\033\020\036\026\037\032\046\005" +
    "\056\021\060\031\061\367\064\014\065\011\066\007\072" +
    "\025\001\002\000\042\002\uffe4\012\uffe4\013\370\020\uffe4" +
    "\022\uffe4\033\uffe4\036\uffe4\037\uffe4\046\uffe4\056\uffe4\060" +
    "\uffe4\061\uffe4\064\uffe4\065\uffe4\066\uffe4\072\uffe4\001\002" +
    "\000\006\012\017\060\372\001\002\000\040\002\uffe3\012" +
    "\uffe3\020\uffe3\022\uffe3\033\uffe3\036\uffe3\037\uffe3\046\uffe3" +
    "\056\uffe3\060\uffe3\061\uffe3\064\uffe3\065\uffe3\066\uffe3\072" +
    "\uffe3\001\002\000\034\012\017\020\047\022\044\033\020" +
    "\036\026\037\032\046\005\056\021\060\031\064\014\065" +
    "\011\066\007\072\025\001\002\000\040\002\uffe2\012\uffe2" +
    "\020\uffe2\022\uffe2\033\uffe2\036\uffe2\037\uffe2\046\uffe2\056" +
    "\uffe2\060\uffe2\061\uffe2\064\uffe2\065\uffe2\066\uffe2\072\uffe2" +
    "\001\002\000\036\012\017\020\047\022\044\033\020\036" +
    "\026\037\032\046\005\056\021\060\031\061\375\064\014" +
    "\065\011\066\007\072\025\001\002\000\040\002\uffe1\012" +
    "\uffe1\020\uffe1\022\uffe1\033\uffe1\036\uffe1\037\uffe1\046\uffe1" +
    "\056\uffe1\060\uffe1\061\uffe1\064\uffe1\065\uffe1\066\uffe1\072" +
    "\uffe1\001\002\000\040\002\uffeb\012\uffeb\020\uffeb\022\uffeb" +
    "\033\uffeb\036\uffeb\037\uffeb\046\uffeb\056\uffeb\060\uffeb\061" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\072\uffeb\001\002\000\040" +
    "\002\uffea\012\uffea\020\uffea\022\uffea\033\uffea\036\uffea\037" +
    "\uffea\046\uffea\056\uffea\060\uffea\061\uffea\064\uffea\065\uffea" +
    "\066\uffea\072\uffea\001\002\000\040\002\uffde\012\uffde\020" +
    "\uffde\022\uffde\033\uffde\036\uffde\037\uffde\046\uffde\056\uffde" +
    "\060\uffde\061\uffde\064\uffde\065\uffde\066\uffde\072\uffde\001" +
    "\002\000\030\006\061\032\065\040\063\047\052\063\073" +
    "\064\075\074\074\075\066\076\070\077\053\100\060\001" +
    "\002\000\012\010\110\011\107\017\106\062\u0103\001\002" +
    "\000\004\057\uffd2\001\002\000\040\002\uffdb\012\uffdb\020" +
    "\uffdb\022\uffdb\033\uffdb\036\uffdb\037\uffdb\046\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\064\uffdb\065\uffdb\066\uffdb\072\uffdb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\060\002\045\006\003\007\026\011\040\016" +
    "\012\017\035\020\032\021\005\022\023\024\037\025\014" +
    "\026\027\027\033\030\011\031\007\032\041\033\015\037" +
    "\034\041\021\045\044\046\042\047\036\050\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\317\001\001\000" +
    "\002\001\001\000\054\006\003\007\026\011\040\016\300" +
    "\017\035\020\032\021\005\022\023\024\037\025\014\026" +
    "\027\027\033\030\011\031\304\032\302\037\034\041\021" +
    "\045\044\046\301\047\036\050\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\003\007\026\011\040\016\012\017\035\020\032\021" +
    "\005\022\023\024\037\025\014\026\027\027\033\030\011" +
    "\031\007\032\041\033\277\037\034\041\021\045\044\046" +
    "\042\047\036\050\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\056\004\222\005\066\006\061\007\070\011\055\012\053" +
    "\013\071\046\050\047\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\056\004\063" +
    "\005\066\006\061\007\070\011\055\012\053\013\071\046" +
    "\050\047\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\166\006\061\007\070\011\055\013\071\046\050\047" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\131\006\061\007\070\011\055\013" +
    "\071\046\050\047\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\056\004\127\005\066\006\061\007\070" +
    "\011\055\012\053\013\071\046\050\047\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\056\004\120\005\066\006\061\007" +
    "\070\011\055\012\053\013\071\046\050\047\054\001\001" +
    "\000\030\003\056\004\104\005\066\006\061\007\070\011" +
    "\055\012\053\013\071\035\103\046\050\047\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\056\004\112\005\066\006\061" +
    "\007\070\011\055\012\053\013\071\046\050\047\054\001" +
    "\001\000\026\003\056\004\111\005\066\006\061\007\070" +
    "\011\055\012\053\013\071\046\050\047\054\001\001\000" +
    "\026\003\056\004\110\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\056" +
    "\004\114\005\066\006\061\007\070\011\055\012\053\013" +
    "\071\046\050\047\054\001\001\000\002\001\001\000\026" +
    "\003\056\004\117\005\066\006\061\007\070\011\055\012" +
    "\053\013\071\046\050\047\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\056\004\125\005\066\006\061" +
    "\007\070\011\055\012\053\013\071\046\050\047\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\143\006\061\007\070\011\055\013\071\046\050" +
    "\047\054\001\001\000\020\003\142\006\061\007\070\011" +
    "\055\013\071\046\050\047\054\001\001\000\020\003\141" +
    "\006\061\007\070\011\055\013\071\046\050\047\054\001" +
    "\001\000\020\003\140\006\061\007\070\011\055\013\071" +
    "\046\050\047\054\001\001\000\020\003\137\006\061\007" +
    "\070\011\055\013\071\046\050\047\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\150" +
    "\044\146\001\001\000\006\042\157\043\155\001\001\000" +
    "\026\003\056\004\151\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\056\004\164\005" +
    "\066\006\061\007\070\011\055\012\053\013\071\046\050" +
    "\047\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\202\006\061\007\070\011\055" +
    "\013\071\046\050\047\054\001\001\000\020\003\201\006" +
    "\061\007\070\011\055\013\071\046\050\047\054\001\001" +
    "\000\020\003\200\006\061\007\070\011\055\013\071\046" +
    "\050\047\054\001\001\000\020\003\177\006\061\007\070" +
    "\011\055\013\071\046\050\047\054\001\001\000\020\003" +
    "\176\006\061\007\070\011\055\013\071\046\050\047\054" +
    "\001\001\000\020\003\175\006\061\007\070\011\055\013" +
    "\071\046\050\047\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\056\004\207\005\066\006\061\007\070\011" +
    "\055\012\053\013\071\046\050\047\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\056" +
    "\004\216\005\066\006\061\007\070\011\055\012\053\013" +
    "\071\046\050\047\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\056\004\232\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\056\004\242\005\066\006\061\007\070\011" +
    "\055\012\053\013\071\046\050\047\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\056\004\256\005" +
    "\066\006\061\007\070\011\055\012\053\013\071\034\254" +
    "\046\050\047\054\001\001\000\004\040\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\056\004\246\005\066\006\061\007\070\011\055\012" +
    "\053\013\071\046\050\047\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\056\004\253\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\056\004\261\005\066\006\061\007\070\011" +
    "\055\012\053\013\071\046\050\047\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\003\007\026\011\040\016\300\017\035\020\032" +
    "\021\005\022\023\024\037\025\014\026\027\027\033\030" +
    "\011\031\304\032\302\037\034\041\021\045\044\046\301" +
    "\047\036\050\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\312\017\314\020\313\037\034" +
    "\001\001\000\004\015\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\317\001\001\000\002\001\001" +
    "\000\026\003\056\004\320\005\066\006\061\007\070\011" +
    "\055\012\053\013\071\046\050\047\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\056\004\323\005" +
    "\066\006\061\007\070\011\055\012\053\013\071\046\050" +
    "\047\054\001\001\000\002\001\001\000\012\006\325\007" +
    "\326\010\331\011\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\006\003\007\026\011\040" +
    "\016\012\017\035\020\032\021\005\022\023\024\037\025" +
    "\014\026\027\027\033\030\011\031\007\032\041\033\334" +
    "\037\034\041\021\045\044\046\042\047\036\050\022\001" +
    "\001\000\054\006\003\007\026\011\040\016\300\017\035" +
    "\020\032\021\005\022\023\024\037\025\014\026\027\027" +
    "\033\030\011\031\304\032\302\037\034\041\021\045\044" +
    "\046\301\047\036\050\305\001\001\000\002\001\001\000" +
    "\026\003\056\004\337\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\012\006\325\007\326\010\341\011\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\003\007" +
    "\026\011\040\016\012\017\035\020\032\021\005\022\023" +
    "\024\037\025\014\026\027\027\033\030\011\031\007\032" +
    "\041\033\344\037\034\041\021\045\044\046\042\047\036" +
    "\050\022\001\001\000\054\006\003\007\026\011\040\016" +
    "\300\017\035\020\032\021\005\022\023\024\037\025\014" +
    "\026\027\027\033\030\011\031\304\032\302\037\034\041" +
    "\021\045\044\046\301\047\036\050\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\056\004\351\005\066\006\061\007\070\011\055\012\053" +
    "\013\071\046\050\047\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\056\004\354\005\066\006\061" +
    "\007\070\011\055\012\053\013\071\046\050\047\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\003" +
    "\007\026\011\040\016\012\017\035\020\032\021\005\022" +
    "\023\024\037\025\014\026\027\027\033\030\011\031\007" +
    "\032\041\033\357\037\034\041\021\045\044\046\042\047" +
    "\036\050\022\001\001\000\054\006\003\007\026\011\040" +
    "\016\300\017\035\020\032\021\005\022\023\024\037\025" +
    "\014\026\027\027\033\030\011\031\304\032\302\037\034" +
    "\041\021\045\044\046\301\047\036\050\305\001\001\000" +
    "\002\001\001\000\026\003\056\004\362\005\066\006\061" +
    "\007\070\011\055\012\053\013\071\046\050\047\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\003" +
    "\007\026\011\040\016\012\017\035\020\032\021\005\022" +
    "\023\024\037\025\014\026\027\027\033\030\011\031\007" +
    "\032\041\033\365\037\034\041\021\045\044\046\042\047" +
    "\036\050\022\001\001\000\054\006\003\007\026\011\040" +
    "\016\300\017\035\020\032\021\005\022\023\024\037\025" +
    "\014\026\027\027\033\030\011\031\304\032\302\037\034" +
    "\041\021\045\044\046\301\047\036\050\305\001\001\000" +
    "\002\001\001\000\006\022\372\023\370\001\001\000\002" +
    "\001\001\000\056\006\003\007\026\011\040\016\012\017" +
    "\035\020\032\021\005\022\023\024\037\025\014\026\027" +
    "\027\033\030\011\031\007\032\041\033\373\037\034\041" +
    "\021\045\044\046\042\047\036\050\022\001\001\000\002" +
    "\001\001\000\054\006\003\007\026\011\040\016\300\017" +
    "\035\020\032\021\005\022\023\024\037\025\014\026\027" +
    "\027\033\030\011\031\304\032\302\037\034\041\021\045" +
    "\044\046\301\047\036\050\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\056\004\u0101\005\066\006\061\007\070\011\055" +
    "\012\053\013\071\046\050\047\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserfs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserfs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserfs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserfs$actions {
  private final parserfs parser;

  /** Constructor */
  CUP$parserfs$actions(parserfs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action_part00000000(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserfs$result;

      /* select the action based on the action number */
      switch (CUP$parserfs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = start_val;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserfs$parser.done_parsing();
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 setInstrucciones(valor); 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveI INSTRUCCIONES llaveD 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BLOQUE",24, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES BLOQUE 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCIONES METODO 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCIONES IMPORTAR puntocoma 
            {
              Bloque RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 Bloque met = new Bloque(); met.add(valor); RESULT = met; 
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= BLOQUE 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque valor = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= METODO 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= LLAMADA puntocoma 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Llamada valor = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= IMPORTAR puntocoma 
            {
              Bloque RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		Bloque met = new Bloque(); met.add(valor); RESULT = met;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPORTAR ::= importar pari EXPL pard 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp destino = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Importar(iright,ileft, destino);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",38, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NATIVA ::= NATIVA punto identificador pari pard 
            {
              Nodo RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Nodo origen = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT= new Nativa(origenright, origenleft, origen, funcion);
             
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",37, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NATIVA ::= NATIVA punto identificador pari EXPL pard 
            {
              Nodo RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Nodo origen = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp metodo = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT= new Nativa(origenright, origenleft, origen, metodo);
             
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",37, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NATIVA ::= identificador punto identificador pari pard 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",37, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NATIVA ::= identificador punto identificador pari EXPL pard 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp metodo = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion, metodo);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("NATIVA",37, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METODO ::= funcion identificador pari PARAMETROS pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Nodo> parametros = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre, parametros, instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= funcion identificador pari pard BLOQUE 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Metodo(ileft, iright, nombre,  instrucciones );
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("METODO",23, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= PARAMETROS coma var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;       
        
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= var identificador 
            {
              ArrayList<Nodo> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 
            ArrayList<Nodo> l = new ArrayList<Nodo>(); 
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BREAK ::= detener puntocoma 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT  = new Romper(ileft, iright);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("BREAK",20, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTINUE ::= tcontinuar puntocoma 
            {
              Sentencia RESULT =null;
		 RESULT = new Continuar();
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CONTINUE",22, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FOR ::= para pari ASIGNACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FOR ::= para pari DECLARACION puntocoma EXPL puntocoma ACTUALIZACION pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new For(i,c,a,bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-10)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ACTUALIZACION ::= DECREMENTO 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = d;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ACTUALIZACION ::= AUMENTO 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = a;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",6, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WHILE ::= mientras pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new While(cond, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(cond,met);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= si pari EXPL pard llaveI INSTRUCCIONES llaveD sino ELSE 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new IfElse(cond,met,inst2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-8)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= IF 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sent;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= llaveI INSTRUCCIONES llaveD 
            {
              Nodo RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Bloque met = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new If(new BoolExp(true),met );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= IMPRIMIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = inst;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;
		int wileleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int wileright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo wile = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = wile;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int aumentleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int aumentright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp aument = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = aument;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo fr = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = fr;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = sw;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= BREAK 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= CONTINUE 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Sentencia valor = (Sentencia)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= SELECCIONAR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= RETORNAR puntocoma 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= NATIVA puntocoma 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMPRIMIR ::= imprimir pari EXPL pard 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Imprimir(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= identificador TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(new idExp(nombreleft, nombreright, nombre), valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= ACCESO TASIGNACION EXPL 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Asignacion(acceso, valor,tipo);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TASIGNACION ::= igual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TASIGNACION ::= masigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TASIGNACION ::= menosigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TASIGNACION ::= multiigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TASIGNACION ::= divigual 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("TASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= LID 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT  = new Declaracion(lleft, lright, l);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= LID igual EXPL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Declaracion(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= LID igual corchetei LARREGLO corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valor = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= LID igual corchetei corcheted 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= LID igual llaveI LATRIBUTO llaveD 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Atributo atributos = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Declaracion(lleft, lright, l, atributos);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LARREGLO ::= LARREGLO coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LARREGLO ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LARREGLO",26, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LID ::= LID coma identificador 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 lista.add(valor); RESULT = lista;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LID ::= var identificador 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPL ::= EXPL and EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new And(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPL ::= EXPL or EXPL 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Or(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPL ::= SSELECCION 
            {
              Exp RESULT =null;
		int seleccionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int seleccionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp seleccion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = seleccion;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPL ::= EXPC 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPL",2, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPC ::= EXP mayor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPC ::= EXP menor EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorQue(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPC ::= EXP menorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MenorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPC ::= EXP mayorigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new MayorIgual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPC ::= EXP igualigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Igual(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPC ::= EXP desigual EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Diferente(valor1,valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPC ::= EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor1;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXPC",3, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP suma EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Suma(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP multi EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Multi(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP div EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Div(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP resta EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Resta(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP potencia EXP 
            {
              Exp RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valor1 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor2 = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Potencia(valor1, valor2);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= exclam EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Negacion(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= pari EXPL pard 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= resta EXP 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Menos(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= decimal 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new DoubleExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= entero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new IntExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= identificador 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new idExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= cadena 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new StringExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= falso 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= verdadero 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new BoolExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= caracter 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new CharExp(valor);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= AUMENTO 
            {
              Exp RESULT =null;
		int aumleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int aumright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp aum = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = aum;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= DECREMENTO 
            {
              Exp RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp dec = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = dec;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ACCESO 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = acceso;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= LLAMADA 
            {
              Exp RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = llamada;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= NATIVA 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT =(Exp) valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= ARRAYARCHIVO 
            {
              Exp RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = valor;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARRAYARCHIVO ::= arrayarchivo pari EXPL pard 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                    RESULT = new ArrayArchivo(iright, ileft, expresion);
                
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ARRAYARCHIVO",9, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SSELECCION ::= EXPL interrogacion EXPL dospuntos EXPL 
            {
              Exp RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp valorv = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valorf = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new SSeleccion(condicionleft, condicionright, condicion, valorv, valorf);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SSELECCION",8, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AUMENTO ::= identificador aumento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AUMENTO ::= ACCESO aumento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Aumento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("AUMENTO",4, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECREMENTO ::= identificador decremento 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(idleft, idright ,new idExp(id));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECREMENTO ::= ACCESO decremento 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new Decremento(accesoleft, accesoright ,acceso);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DECREMENTO",5, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCESO ::= ACCESO corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		RESULT = new  AccesoArray(expresionright,expresionleft ,acceso, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESO ::= ACCESO punto identificador 
            {
              Exp RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp acceso = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new  Acceso(accesoright,accesoleft ,acceso, new idExp(nombre));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCESO ::= identificador corchetei EXPL corcheted 
            {
              Exp RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		 RESULT = new  AccesoArray(nombreright,nombreleft ,new idExp(nombre), expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACCESO ::= identificador punto identificador 
            {
              Exp RESULT =null;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre1 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int nombre2left = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int nombre2right = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		String nombre2 = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		 RESULT = new Acceso(nombre1right,nombre1left ,new idExp(nombre1), new idExp(nombre2));
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LATRIBUTO ::= LATRIBUTO coma identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Atributo t = (Atributo)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                t.addAtributo(nombre,valor);
                RESULT = t;
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LATRIBUTO ::= identificador dospuntos EXPL 
            {
              Atributo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		
                RESULT = new Atributo(nombreleft, nombreright, nombre, valor);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LATRIBUTO",30, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",31, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-6)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SELECCIONAR ::= selecciona pari EXPL pard llaveI LCASO DEFECTO llaveD 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",31, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-7)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",34, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LCASO",34, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASO ::= caso EXPL dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, condicion, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("CASO",32, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DEFECTO ::= defecto dospuntos BLOQUE 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Caso(ileft, iright, null, bloque);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("DEFECTO",33, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RETORNAR ::= retornar EXPL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		RESULT = new Retorno(ileft, iright, expresion);
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("RETORNAR",35, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LLAMADA ::= identificador pari LVALORES pard 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).right;
		ArrayList<Exp> valores = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-1)).value;
		
                RESULT = new Llamada(ileft, iright, i, valores);
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LLAMADA",36, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-3)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LLAMADA ::= identificador pari pard 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		
                RESULT = new Llamada(ileft, iright, i, new ArrayList<Exp>());
            
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LLAMADA",36, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LVALORES ::= LVALORES coma EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.elementAt(CUP$parserfs$top-2)), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LVALORES ::= EXPL 
            {
              ArrayList<Exp> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()).right;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$parserfs$stack.peek()).value;
		ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT = l;
              CUP$parserfs$result = parser.getSymbolFactory().newSymbol("LVALORES",27, ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserfs$stack.peek()), RESULT);
            }
          return CUP$parserfs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserfs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserfs$do_action(
    int                        CUP$parserfs$act_num,
    java_cup.runtime.lr_parser CUP$parserfs$parser,
    java.util.Stack            CUP$parserfs$stack,
    int                        CUP$parserfs$top)
    throws java.lang.Exception
    {
              return CUP$parserfs$do_action_part00000000(
                               CUP$parserfs$act_num,
                               CUP$parserfs$parser,
                               CUP$parserfs$stack,
                               CUP$parserfs$top);
    }
}

}
