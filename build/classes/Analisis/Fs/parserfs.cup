package Analisis.Fs; // Paquete
import java_cup.runtime.*; 
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;

parser code
{:    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }
:}


/*Terminales*/

terminal String suma, multi, resta, div, or, and,si,sino/*,sinosi*/, corcheted, corchetei;
terminal String desigual, igualigual, igual, mayor, menor, mayorigual,  menorigual, exclam, mientras, aumento, decremento, para;
terminal String tint, tchar, tbool, tstring, tdouble, imprimir,cadena, nulo, masigual, menosigual, multiigual, divigual,coma;
terminal String puntocoma, llaveI, llaveD, pard, pari, identificador, tbreak,tcontinuar, dospuntos, caso,seleccion, var, potencia;
terminal Boolean falso, verdadero;
terminal Integer entero;
terminal Double decimal;
terminal char caracter;


/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal Exp  EXP, EXPL, EXPC, AUMENTO, DECREMENTO,  ACTUALIZACION, ACCESO;
non terminal String TIPO, TASIGNACION;
non terminal Sentencia  INSTRUCCION, DECLARACION,ASIGNACION, IMPRIMIR , IF  , ELSE ,WHILE,FOR;
non terminal Sentencia BREAK,SWITCH, CONTINUE, METODO;
non terminal Bloque BLOQUE, INSTRUCCIONES;
non terminal ArrayList<Exp> PARAMETROS, LARREGLO;
non terminal ArrayList<String> LID;

/* Precedencia 
precedence left suma, resta;
precedence left multi, div;*/
precedence left suma, resta ;
precedence left div, multi;
precedence left potencia;
precedence left and;
precedence left or;
precedence left exclam;



/* ­­­­­­­­­­­­­­ Definición de la gramatica  ­­­­­­­­­­­ */
start with INICIO; // indicamos con qué producción debe empezar la gramatica.

INICIO::= INSTRUCCIONES:valor{: setInstrucciones(valor); :}
;

BLOQUE::= llaveI INSTRUCCIONES:met llaveD {: RESULT = met;:}
;        

INSTRUCCIONES::= INSTRUCCIONES:met INSTRUCCION:valor{: met.add(valor); RESULT = met;:}
                |INSTRUCCIONES:met BLOQUE:valor{: met.add(valor); RESULT = met;:}
                |INSTRUCCION:valor {: Bloque met = new Bloque(); met.add(valor); RESULT = met; :}
                |BLOQUE:valor {:Bloque met = new Bloque(); met.add(valor); RESULT = met;:}                                
;

METODO::= TIPO:tipo identificador:nombre pari PARAMETROS:parametros pard BLOQUE:instrucciones
            {:
                RESULT = null;
            :}          
;

BREAK::= tbreak puntocoma{:RESULT  = new Romper();:}
;

CONTINUE::= tcontinuar puntocoma {: RESULT = new Continuar();:}
;

FOR::= para pari ASIGNACION:i puntocoma EXPL:c puntocoma ACTUALIZACION:a pard llaveI INSTRUCCIONES:bloque llaveD
    {:RESULT = new For(i,c,a,bloque);:}
    |para pari DECLARACION:i puntocoma EXPL:c puntocoma ACTUALIZACION:a pard llaveI INSTRUCCIONES:bloque llaveD
    {:RESULT = new For(i,c,a,bloque);:}
;

ACTUALIZACION::= DECREMENTO:d {:RESULT = d;:}
                |AUMENTO:a {:RESULT = a;:}
;

WHILE::= mientras pari EXPL:cond pard llaveI INSTRUCCIONES:bloque llaveD {:RESULT = new While(cond, bloque);:}
;

IF::= si pari EXPL:cond pard llaveI INSTRUCCIONES:met llaveD {: RESULT = new If(cond,met);:}
    |si pari EXPL:cond pard llaveI INSTRUCCIONES:met llaveD sino ELSE:inst2 {: RESULT = new IfElse(cond,met,inst2);:}    
;

ELSE::=   IF:sent {:RESULT = sent;:}
        | llaveI INSTRUCCIONES:met llaveD {: RESULT = new If(new BoolExp(true),met );:}
;

INSTRUCCION::= DECLARACION:inst puntocoma{:RESULT = inst;:}
              |ASIGNACION:inst puntocoma{:RESULT = inst;:}
              |IMPRIMIR:inst puntocoma{:RESULT = inst;:}
              |IF:inst{: RESULT = inst;:}              
              |WHILE:wile {:RESULT = wile;:}
              /*
              |AUMENTO:aument puntocoma {:RESULT = aument;:}
              |DECREMENTO:dec puntocoma {:RESULT = dec;:}
              */
              |FOR:fr {:RESULT = fr;:}
              |SWITCH:sw {:RESULT = sw;:} 
              |BREAK:valor {:RESULT = valor;:}
              |CONTINUE:valor {:RESULT = valor;:}
;

IMPRIMIR::= imprimir pari EXPL:valor pard {:RESULT = new Imprimir(valor);:}
;

ASIGNACION::= identificador:nombre TASIGNACION:tipo EXPL:valor {:RESULT = new Asignacion(nombre, valor,tipo);:}
;

TASIGNACION::= igual:valor{:RESULT = valor;:}
            | masigual:valor{:RESULT = valor;:}
            | menosigual:valor{:RESULT = valor;:}
            | multiigual:valor{:RESULT = valor;:}                        
            | divigual:valor{:RESULT = valor;:}
;                        


DECLARACION::=  LID:l {:RESULT  = new Declaracion(lleft, lright, l);:}
              | LID:l igual EXPL:valor {:RESULT = new Declaracion(lleft, lright,l, valor);:}
              | LID:l igual corchetei LARREGLO:valor corcheted {:RESULT = new DeclaracionArray(lleft, lright,l, valor);:}
              | LID:l igual corchetei  corcheted {:RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );:}
;

LARREGLO::= LARREGLO:l coma EXPL:valor {:l.add(valor); RESULT = l;:}
        | EXPL:valor {:ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;:}
;

LID::= LID:lista coma identificador:valor {: lista.add(valor); RESULT = lista;:}
        | var:i identificador:valor {:ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;:}
;

EXPL ::= EXPL:valor1 and EXPL:valor2 {: RESULT = new And(valor1,valor2);:}
        |EXPL:valor1 or EXPL:valor2 {: RESULT = new Or(valor1,valor2);:}        
        |EXPC:valor{:RESULT = valor;:}
;


EXPC::= 
     EXP:valor1 mayor EXP:valor2 {:RESULT = new MayorQue(valor1,valor2);:}
    |EXP:valor1 menor EXP:valor2 {:RESULT = new MenorQue(valor1,valor2);:}   
    |EXP:valor1 menorigual EXP:valor2   {:RESULT = new MenorIgual(valor1,valor2);:} 
    |EXP:valor1 mayorigual EXP:valor2 {:RESULT = new MayorIgual(valor1,valor2);:}   
    |EXP:valor1 igualigual EXP:valor2{:RESULT = new Igual(valor1,valor2);:}
    |EXP:valor1 desigual EXP:valor2{:RESULT = new Diferente(valor1,valor2);:}
    |EXP:valor1{:RESULT = valor1;:}

;

EXP::= 
        EXP:valor1 suma EXP:valor2 {:RESULT = new Suma(valor1, valor2);:}      
       |EXP:valor1 multi EXP:valor2 {:RESULT = new Multi(valor1, valor2);:}            
       |EXP:valor1 div EXP:valor2 {:RESULT = new Div(valor1, valor2);:}
       |EXP:valor1 resta EXP:valor2 {:RESULT = new Resta(valor1, valor2);:}
       |EXP:valor1 potencia EXP:valor2 {:RESULT = new Potencia(valor1, valor2);:}
       |exclam EXP:valor {: RESULT = new Negacion(valor);:}       
       /*|pari EXP:valor pard {:RESULT = valor;:}  */
       |pari EXPL:valor pard {:RESULT = valor;:}  
       |resta EXP:valor {: RESULT = new Menos(valor);:}
       |decimal:valor {:RESULT = new DoubleExp(valor);:} 
       |entero:valor {:RESULT = new IntExp(valor);:} 
       |identificador:valor {: RESULT = new idExp(valor);:}
       |cadena:valor {: RESULT = new StringExp(valor);:}       
       |falso:valor {: RESULT = new BoolExp(valor);:}
       |verdadero:valor {: RESULT = new BoolExp(valor);:}
       |caracter:valor {:RESULT = new CharExp(valor);:}       
       |AUMENTO:aum {:RESULT = aum;:}
       |DECREMENTO:dec {:RESULT = dec;:}   
       |ACCESO:acceso {:RESULT = acceso;:}    
       ;

AUMENTO::= identificador:id aumento {:RESULT = new Aumento(idleft, idright ,new idExp(id));:};
DECREMENTO::=identificador:id decremento {:RESULT = new Decremento(idleft, idright ,new idExp(id));:};

ACCESO::= identificador:nombre corchetei EXPL:expresion corcheted {: RESULT = new  AccesoArray(nombreright,nombreleft ,nombre, expresion);:}
;