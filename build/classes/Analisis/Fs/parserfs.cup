package Analisis.Fs; // Paquete
import java_cup.runtime.*; 
import Recursos.*;
import java.util.ArrayList;
import java.util.LinkedList;
import Analisis.Fs.AST.*;

parser code
{:    
    public ArrayList<error> listaErrores = new ArrayList<error>();
    public Bloque metodo;
    public void setInstrucciones(Bloque m)
    {
        metodo = m;
    }

    public LinkedList<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right >= 0)
                {
                    linea = s.right + 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());
            error a = new error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setValor(s.value.toString());
            a.setDescripcion("Sintactico");
            a.setPath("-------");
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());

        error a = new error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setValor(s.value.toString());
        a.setDescripcion("Sintactico");
        a.setPath("----");       
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }
        a.setDescripcion("Se esperaba: " +esperados); 
        a.setTipo("Sintactico");
        Imprimir("Linea: "+linea + "\tColumna: " + columna);
        singlenton.addErrores(a);    

    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) 
    {        
        report_error(message, info);
        //System.exit(0);
    }  

    public void Imprimir(Object str)  
    {
        System.out.println(str);
    }
:}


/*Terminales*/

terminal String suma, multi, resta, div, or, and,si,sino/*,sinosi*/, corcheted, corchetei, punto, interrogacion, selecciona, defecto, retornar;
terminal String desigual, igualigual, igual, mayor, menor, mayorigual,  menorigual, exclam, mientras, aumento, decremento, para, funcion;
terminal String arrayarchivo;
terminal String tint, tchar, tbool, tstring, tdouble, imprimir,cadena, nulo, masigual, menosigual, multiigual, divigual,coma,importar;
terminal String puntocoma, llaveI, llaveD, pard, pari, identificador, detener,tcontinuar, dospuntos, caso,seleccion, var, potencia;
terminal Boolean falso, verdadero;
terminal Integer entero;
terminal Double decimal;
terminal char caracter;


/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal Exp  EXP, EXPL, EXPC, AUMENTO, DECREMENTO,  ACTUALIZACION, ACCESO, SSELECCION, ARRAYARCHIVO;
non terminal String TIPO, TASIGNACION;
non terminal /*Sentencia*/ Nodo  INSTRUCCION, DECLARACION,ASIGNACION, IMPRIMIR , IF  , ELSE ,WHILE,FOR;
non terminal Sentencia BREAK,SWITCH, CONTINUE, METODO;
non terminal Bloque BLOQUE, INSTRUCCIONES;
non terminal ArrayList<Exp>  LARREGLO;
non terminal ArrayList<Exp> LVALORES;
non terminal ArrayList<Nodo> PARAMETROS;
non terminal ArrayList<String> LID;
non terminal Atributo LATRIBUTO;
non terminal Nodo SELECCIONAR;
non terminal Caso CASO, DEFECTO;
non terminal ArrayList<Caso> LCASO;
non terminal Nodo RETORNAR;
non terminal Llamada LLAMADA;
non terminal Nodo NATIVA, IMPORTAR;


/* Precedencia 
precedence left suma, resta;
precedence left multi, div;*/
precedence left suma, resta ;
precedence left div, multi;
precedence left potencia;
precedence left and;
precedence left or;
precedence left exclam;
precedence left interrogacion;



/* ­­­­­­­­­­­­­­ Definición de la gramatica  ­­­­­­­­­­­ */
start with INICIO; // indicamos con qué producción debe empezar la gramatica.

INICIO::= INSTRUCCIONES:valor{: setInstrucciones(valor); :}
;

BLOQUE::= llaveI INSTRUCCIONES:met llaveD {: RESULT = met;:}
;        

INSTRUCCIONES::= INSTRUCCIONES:met INSTRUCCION:valor{: met.add(valor); RESULT = met;:}
                |INSTRUCCIONES:met BLOQUE:valor{: met.add(valor); RESULT = met;:}
                |INSTRUCCIONES:met METODO:valor{: met.add(valor); RESULT = met;:}
                /*|INSTRUCCIONES:met NATIVA:valor puntocoma{: met.add(valor); RESULT = met;:}*/
                |INSTRUCCIONES:met LLAMADA:valor puntocoma{: met.add(valor); RESULT = met;:}
                |INSTRUCCIONES:met IMPORTAR:valor puntocoma{: met.add(valor); RESULT = met;:}
                |INSTRUCCION:valor {: Bloque met = new Bloque(); met.add(valor); RESULT = met; :}
                |BLOQUE:valor {:Bloque met = new Bloque(); met.add(valor); RESULT = met;:}   
                |METODO:valor {:Bloque met = new Bloque(); met.add(valor); RESULT = met;:}   
                |LLAMADA:valor puntocoma {:Bloque met = new Bloque(); met.add(valor); RESULT = met;:} 
                |IMPORTAR:valor puntocoma {:Bloque met = new Bloque(); met.add(valor); RESULT = met;:} 
                /*|NATIVA:valor puntocoma{:Bloque met = new Bloque(); met.add(valor); RESULT = met;:}  */
;

IMPORTAR::= importar:i pari EXPL:destino pard 
            {:
                RESULT = new Importar(iright,ileft, destino);
            :};

NATIVA::=  
             NATIVA:origen punto identificador:funcion pari pard 
             {:
                RESULT= new Nativa(origenright, origenleft, origen, funcion);
             :}
            |NATIVA:origen punto identificador:funcion pari identificador:metodo pard                         
             {:
                RESULT= new Nativa(origenright, origenleft, origen, funcion, metodo);
             :}            
            |identificador:nombre punto identificador:funcion pari pard 
            {:
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion);
            :}
            |identificador:nombre punto identificador:funcion pari identificador:metodo  pard 
            {:
                RESULT = new Nativa (nombreleft, nombreright, new idExp(nombre), funcion, metodo);
            :}            
;          

METODO::= funcion:i identificador:nombre pari PARAMETROS:parametros pard BLOQUE:instrucciones
            {:
                RESULT = new Metodo(ileft, iright, nombre, parametros, instrucciones );
            :} 
    |  funcion:i identificador:nombre pari  pard BLOQUE:instrucciones
            {:
                RESULT = new Metodo(ileft, iright, nombre,  instrucciones );
            :}                      
;

PARAMETROS::= PARAMETROS:l coma var identificador:valor 
        {:
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;       
        :}
        |var identificador:valor 
            {: 
            ArrayList<Nodo> l = new ArrayList<Nodo>(); 
            ArrayList<String> ln = new ArrayList<String>();
            ln.add(valor);
            l.add(new Declaracion(valorleft, valorright, ln)); 
            RESULT =l;
            :}
;


BREAK::= detener:i puntocoma{:RESULT  = new Romper(ileft, iright);:}
;

CONTINUE::= tcontinuar puntocoma {: RESULT = new Continuar();:}
;

FOR::= para pari ASIGNACION:i puntocoma EXPL:c puntocoma ACTUALIZACION:a pard llaveI INSTRUCCIONES:bloque llaveD
    {:RESULT = new For(i,c,a,bloque);:}
    |para pari DECLARACION:i puntocoma EXPL:c puntocoma ACTUALIZACION:a pard llaveI INSTRUCCIONES:bloque llaveD
    {:RESULT = new For(i,c,a,bloque);:}
;

ACTUALIZACION::= DECREMENTO:d {:RESULT = d;:}
                |AUMENTO:a {:RESULT = a;:}
;

WHILE::= mientras pari EXPL:cond pard llaveI INSTRUCCIONES:bloque llaveD {:RESULT = new While(cond, bloque);:}
;

IF::= si pari EXPL:cond pard llaveI INSTRUCCIONES:met llaveD {: RESULT = new If(cond,met);:}
    |si pari EXPL:cond pard llaveI INSTRUCCIONES:met llaveD sino ELSE:inst2 {: RESULT = new IfElse(cond,met,inst2);:}    
;

ELSE::=   IF:sent {:RESULT = sent;:}
        | llaveI INSTRUCCIONES:met llaveD {: RESULT = new If(new BoolExp(true),met );:}
;

INSTRUCCION::= DECLARACION:inst puntocoma{:RESULT = inst;:}
              |ASIGNACION:inst puntocoma{:RESULT = inst;:}
              |IMPRIMIR:inst puntocoma{:RESULT = inst;:}
              |IF:inst{: RESULT = inst;:}              
              |WHILE:wile {:RESULT = wile;:}              
              |AUMENTO:aument puntocoma {:RESULT = aument;:}
              |DECREMENTO:dec puntocoma {:RESULT = dec;:}              
              |FOR:fr {:RESULT = fr;:}
              |SWITCH:sw {:RESULT = sw;:} 
              |BREAK:valor {:RESULT = valor;:}
              |CONTINUE:valor {:RESULT = valor;:}
              |SELECCIONAR:valor {:RESULT = valor;:}
              |RETORNAR:valor puntocoma {:RESULT = valor;:}
              |NATIVA:valor puntocoma{:RESULT = valor;:}  
;

IMPRIMIR::= imprimir pari EXPL:valor pard {:RESULT = new Imprimir(valor);:}
;

ASIGNACION::= identificador:nombre TASIGNACION:tipo EXPL:valor {:RESULT = new Asignacion(new idExp(nombreleft, nombreright, nombre), valor,tipo);:}
            |ACCESO:acceso TASIGNACION:tipo EXPL:valor {:RESULT = new Asignacion(acceso, valor,tipo);:}

;

TASIGNACION::= igual:valor{:RESULT = valor;:}
            | masigual:valor{:RESULT = valor;:}
            | menosigual:valor{:RESULT = valor;:}
            | multiigual:valor{:RESULT = valor;:}                        
            | divigual:valor{:RESULT = valor;:}
;                        


DECLARACION::=  LID:l {:RESULT  = new Declaracion(lleft, lright, l);:}
              | LID:l igual EXPL:valor {:RESULT = new Declaracion(lleft, lright,l, valor);:}
              | LID:l igual corchetei LARREGLO:valor corcheted {:RESULT = new DeclaracionArray(lleft, lright,l, valor);:}
              | LID:l igual corchetei  corcheted {:RESULT = new DeclaracionArray(lleft, lright,l, new ArrayList<Exp>() );:}
              | LID:l igual llaveI LATRIBUTO:atributos llaveD{:RESULT = new Declaracion(lleft, lright, l, atributos);:}
;

LARREGLO::= LARREGLO:l coma EXPL:valor {:l.add(valor); RESULT = l;:}
        | EXPL:valor {:ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT =l;:}
;

LID::= LID:lista coma identificador:valor {: lista.add(valor); RESULT = lista;:}
        | var:i identificador:valor {:ArrayList<String> l = new ArrayList<String>(); l.add(valor); RESULT =l;:}
;

EXPL ::= EXPL:valor1 and EXPL:valor2 {: RESULT = new And(valor1,valor2);:}
        |EXPL:valor1 or EXPL:valor2 {: RESULT = new Or(valor1,valor2);:}  
        |SSELECCION:seleccion{:RESULT = seleccion;:}       
        |EXPC:valor{:RESULT = valor;:}
;


EXPC::= 
     EXP:valor1 mayor EXP:valor2 {:RESULT = new MayorQue(valor1,valor2);:}
    |EXP:valor1 menor EXP:valor2 {:RESULT = new MenorQue(valor1,valor2);:}   
    |EXP:valor1 menorigual EXP:valor2   {:RESULT = new MenorIgual(valor1,valor2);:} 
    |EXP:valor1 mayorigual EXP:valor2 {:RESULT = new MayorIgual(valor1,valor2);:}   
    |EXP:valor1 igualigual EXP:valor2{:RESULT = new Igual(valor1,valor2);:}
    |EXP:valor1 desigual EXP:valor2{:RESULT = new Diferente(valor1,valor2);:}
    |EXP:valor1{:RESULT = valor1;:}

;

EXP::= 
        EXP:valor1 suma EXP:valor2 {:RESULT = new Suma(valor1, valor2);:}      
       |EXP:valor1 multi EXP:valor2 {:RESULT = new Multi(valor1, valor2);:}            
       |EXP:valor1 div EXP:valor2 {:RESULT = new Div(valor1, valor2);:}
       |EXP:valor1 resta EXP:valor2 {:RESULT = new Resta(valor1, valor2);:}
       |EXP:valor1 potencia EXP:valor2 {:RESULT = new Potencia(valor1, valor2);:}
       |exclam EXP:valor {: RESULT = new Negacion(valor);:}       
       /*|pari EXP:valor pard {:RESULT = valor;:}  */
       |pari EXPL:valor pard {:RESULT = valor;:}  
       |resta EXP:valor {: RESULT = new Menos(valor);:}
       |decimal:valor {:RESULT = new DoubleExp(valor);:} 
       |entero:valor {:RESULT = new IntExp(valor);:} 
       |identificador:valor {: RESULT = new idExp(valor);:}
       |cadena:valor {: RESULT = new StringExp(valor);:}       
       |falso:valor {: RESULT = new BoolExp(valor);:}
       |verdadero:valor {: RESULT = new BoolExp(valor);:}
       |caracter:valor {:RESULT = new CharExp(valor);:}       
       |AUMENTO:aum {:RESULT = aum;:}
       |DECREMENTO:dec {:RESULT = dec;:}   
       |ACCESO:acceso {:RESULT = acceso;:}   
       |LLAMADA:llamada{:RESULT = llamada;:}  
       |NATIVA:valor {:RESULT =(Exp) valor;:}   
       |ARRAYARCHIVO:valor{:RESULT = valor;:}   
       ;

ARRAYARCHIVO::= arrayarchivo:i pari EXPL:expresion pard
                {:
                    RESULT = new ArrayArchivo(iright, ileft, expresion);
                :}
;


SSELECCION::= EXPL:condicion interrogacion EXPL:valorv dospuntos EXPL:valorf
            {:
                RESULT = new SSeleccion(condicionleft, condicionright, condicion, valorv, valorf);
            :}
;

AUMENTO::= identificador:id aumento {:RESULT = new Aumento(idleft, idright ,new idExp(id));:}
          |ACCESO:acceso aumento {:RESULT = new Aumento(accesoleft, accesoright ,acceso);:}
;
DECREMENTO::=identificador:id decremento {:RESULT = new Decremento(idleft, idright ,new idExp(id));:}
        |ACCESO:acceso decremento {:RESULT = new Decremento(accesoleft, accesoright ,acceso);:}
;

ACCESO::= ACCESO:acceso corchetei EXPL:expresion corcheted {:RESULT = new  AccesoArray(expresionright,expresionleft ,acceso, expresion);:}
        |ACCESO:acceso punto identificador:nombre {:RESULT = new  Acceso(accesoright,accesoleft ,acceso, new idExp(nombre));:}                
        |identificador:nombre corchetei EXPL:expresion corcheted {: RESULT = new  AccesoArray(nombreright,nombreleft ,new idExp(nombre), expresion);:}  
        |identificador:nombre1 punto identificador:nombre2 {: RESULT = new Acceso(nombre1right,nombre1left ,new idExp(nombre1), new idExp(nombre2));:}     
;

LATRIBUTO::= LATRIBUTO:t coma identificador:nombre dospuntos EXPL:valor 
            {:
                t.addAtributo(nombre,valor);
                RESULT = t;
            :}  
            
            |identificador:nombre dospuntos EXPL:valor 
            {:
                RESULT = new Atributo(nombreleft, nombreright, nombre, valor);
            :}  
;

//Seleccion(int l, int c, Nodo condicion, ArrayList<Caso> lista)
SELECCIONAR::= selecciona:i pari EXPL:condicion pard llaveI LCASO:lista llaveD 
            {:
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            :}
            | selecciona:i pari EXPL:condicion pard llaveI LCASO:lista DEFECTO:defecto llaveD 
            {:
                lista.add(defecto);
                RESULT = new Seleccion(ileft, iright, condicion, lista);
            :}
;

LCASO::= LCASO:l CASO:caso {:l.add(caso); RESULT = l;:}
        |CASO:caso {:ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;:}
;


CASO::= caso:i EXPL:condicion dospuntos BLOQUE:bloque {:RESULT = new Caso(ileft, iright, condicion, bloque);:}
;

DEFECTO::= defecto:i dospuntos BLOQUE:bloque {:RESULT = new Caso(ileft, iright, null, bloque);:}
;

RETORNAR::=  retornar:i EXPL:expresion {:RESULT = new Retorno(ileft, iright, expresion);:}
;

LLAMADA::= identificador:i pari LVALORES:valores pard 
            {:
                RESULT = new Llamada(ileft, iright, i, valores);
            :}
            | identificador:i pari  pard 
            {:
                RESULT = new Llamada(ileft, iright, i, new ArrayList<Exp>());
            :}            
;


LVALORES::= LVALORES:l coma EXPL:valor {:l.add(valor); RESULT = l;:}
        |EXPL:valor {:ArrayList<Exp> l = new ArrayList<Exp>(); l.add(valor); RESULT = l;:}
;

